-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/awesome-leptos/README.md
# Awesome Leptos

A collection of awesome libraries in the Leptos ecosystem.

[Leptos](https://github.com/leptos-rs/leptos) is a framework for creating
full-stack web applications using Rust.

## Resources

- [Leptos Book](https://github.com/leptos-rs/leptos/tree/main/docs/book) (WIP)
- [Discord Community](https://discord.gg/YdRAhS7eQB)

## Tools

- [cargo-leptos](https://github.com/leptos-rs/cargo-leptos) coordinates
  rebuilding the server and client side of your app
- [leptosfmt](https://github.com/bram209/leptosfmt) provides formatting for the
  `view` macro
- [leptos-fmt vscode plugin](https://github.com/codeitlikemiley/leptos-fmt) - autoformat your code with leptosfmt
- [leptosfmt-action](https://github.com/LesnyRumcajs/leptosfmt-action) - Github Action for the [leptosfmt](https://github.com/bram209/leptosfmt) to facilitate embedding it in CI
- [cargo-runner vscode plugin](https://github.com/codeitlikemiley/cargo-runner) - Yet Another Command Runner but specifically for your Rust Project, Just press <kbd>CMD + R</kbd> and it would run the correct command depending on your cursor context it can do cargo run, cargo test and doctest , cargo build and even debug. If you need to override command to add other options you can press <kbd>CMD+SHIFT+R</kbd> ,for more info check [readme](https://github.com/codeitlikemiley/cargo-runner).
- [vscode-leptos-snippets](https://github.com/mondeja/vscode-leptos-snippets) - Useful code snippets for Leptos development in VSCode.


## Starter Templates

### Official

- [leptos-rs/start-trunk](https://github.com/leptos-rs/start-trunk) - Starter
  template for Client-Side Rendered Leptos web framework apps using the
  [Trunk](https://trunkrs.dev/) build tool. Server agnostic.

- [leptos-rs/start](https://github.com/leptos-rs/start) - Starter template for
  use with the Leptos web framework and Actix.

- [leptos-rs/start-axum](https://github.com/leptos-rs/start-axum) - Starter
  template for use with the Leptos web framework and Axum.
- [leptos-rs/start-axum-workspace](https://github.com/leptos-rs/start-axum-workspace) -
  Same as above but using Cargo workspace to split crates

- [leptos-rs/start-aws](https://github.com/leptos-rs/start-aws) - Starter
  template for use with Leptos, Axum, and Amazon Web Services.

- [leptos-rs/start-spin](https://github.com/leptos-rs/start-spin) - Starter
  template for use with the Leptos web framework and the
  [Spin](https://www.fermyon.com/spin) serverless [WASI](https://wasi.dev/)
  platform.

### Unofficial

- [leptos-fullstack](https://github.com/srid/leptos-fullstack) - A
  [Nix](https://nixos.org/) template for full-stack web apps in Rust using
  Leptos + Tailwind

- [leptos-workers](https://github.com/BrandonDyer64/leptos-workers) - Starter
  template for use with Leptos in
  [Cloudflare Workers](https://developers.cloudflare.com/workers/)

- [tauri-leptos-ssr](https://github.com/codeitlikemiley/tauri-leptos-ssr) - ⚡ Tauri + Leptos SSR starter template , Build native desktop apps with server-side rendering, all in Rust.

## Styling and Design

- [Stylers](https://github.com/abishekatp/stylers) Compile-time scoped CSS
  extracted from Leptos components
- [Styled](https://github.com/eboody/styled) Scoped CSS styles
- [turf](https://github.com/myFavShrimp/turf) - Macro based compile-time SCSS
  transpilation, CSS minification, and class name uniquification toolchain
  inspired by CSS modules
- [phosphor-leptos](https://github.com/SorenHolstHansen/phosphor-leptos) The
  [phosphor icon family](https://phosphoricons.com/)
- [Stylance](https://github.com/basro/stylance-rs) Scoped CSS modules.
- [Tailwind Fuse](https://github.com/gaucho-labs/tailwind-fuse) Fuse Tailwind
  CSS class together handling conflicts, and create variant based component
  styles. Inspired by [shadcn/ui](https://ui.shadcn.com/)
- [Leptos Remix Icon](https://crates.io/crates/leptos-remix-icon) A wrapper
  around [Remix Icon](https://remixicon.com/)

## Quality of Life

- [`tracing-subscriber-wasm`](https://crates.io/crates/tracing-subscriber-wasm)
  A `MakeWriter` implementation to allow directly using `tracing_subscriber` in
  the browser or with NodeJS to allow for beautiful `tracing` integration into
  Leptos apps.
- [`wasm-bindgen-struct`](https://crates.io/crates/wasm-bindgen-struct) A crate
  making it easier to declare `wasm_bindgen` types and implement getters/setter
  as if they were normal Rust structs.

## Alternate Macros

- [`leptos-mview`](https://github.com/blorbb/leptos-mview) A concise `view!`
  macro inspired by [maud](https://maud.lambda.xyz/).

## Components

- [Thaw](https://github.com/thaw-ui/thaw) An easy to use leptos component
  library.
- [leptos-struct-table](https://github.com/Synphonyte/leptos-struct-table)
  Easily create powerful tables from structs.
- [leptix](https://github.com/leptix/leptix) Accessible and unstyled components
  for Leptos.
- [leptos-material](https://github.com/jordi-star/leptos-material) A leptos component wrapper for [Material Web Components](https://material-web.dev/), along with some extra components to fill in the gaps.
- [Rust Radix](https://radix.rustforweb.org) Leptos port of Radix,
  a library of components, icons, colors, and templates for building high-quality, accessible UI.
- [Rust shadcn/ui](https://shadcn-ui.rustforweb.org) Leptos port of shadcn/ui,
  a library of beautifully designed components that you can copy and paste into your apps.

## Libraries

- [leptos-use](https://leptos-use.rs/) Reactive primitives to make app
  development easier. (Like react-use, vue-use, etc.)
- [leptos-fetch](https://github.com/zakstucke/leptos-fetch) Async cache for
  data fetching and state management
- [lepticons](https://lepticons.9bits.cc/) An icon library for Leptos with live demo
- [leptos-icons](https://github.com/Carlosted/leptos-icons) An icon library for
  Leptos
- [leptos_image](https://github.com/gaucho-labs/leptos-image) Image optimizer
  that converts images to .webp format, and generates Low Quality Image
  Placeholders to include in your initial SSR render
- [leptos-declarative](https://github.com/jquesada2016/leptos-declarative)
  Declarative control-flow components
- [leptos-tracked](https://docs.rs/leptos-tracked/latest/leptos_tracked/)
  Utility traits for composing Leptos signals with fewer nested closures
- [leptos-signals](https://github.com/akesson/leptos-signals) Additional
  primitives for working with signals
- [leptos-tea](https://github.com/jquesada2016/leptos-tea) A library for state
  management using The Elm Architecture (TEA) in Leptos
- [leptos-leaflet](https://github.com/headless-studio/leptos-leaflet) Leaflet
  components for Leptos
- [Papelito](https://github.com/msmaiaa/papelito) A simple WYSIWYG editor for
  leptos.
- [leptos-server-signal](https://github.com/tqwewe/leptos_server_signal) Leptos
  signals kept in sync with the server through websockets.
- [leptos_sse](https://github.com/messense/leptos_sse) Leptos server signals
  synced through Server-Sent-Events (SSE).
- [leptos_ws](https://github.com/TimTom2016/leptos_ws) Leptos WS is a Websocket Library to support updates coordinated
  from the Server
- [leptos_i18n](https://github.com/Baptistemontan/leptos_i18n) A translation
  library for Leptos.
- [leptos-fluent](https://github.com/mondeja/leptos-fluent) Internationalization
  framework for Leptos using fluent-templates.
- [leptos_darkmode](https://gitlab.com/kerkmann/leptos_darkmode) A Darkmode
  Helper which adds the `dark` class for Tailwind CSS, based on the local
  storage or media profile.
- [leptos_oidc](https://gitlab.com/kerkmann/leptos_oidc) A Leptos utility
  library for simplified OpenID Connect (OIDC) authentication integration.
- [leptos_meilisearch](https://gitlab.com/kerkmann/leptos_meilisearch) A Leptos
  integration for [meilisearch](https://www.meilisearch.com/), wrapping them in
  a `Resource` and helps with useful helper functions und utils.
- [leptos-captcha](https://github.com/sebadob/leptos-captcha) Simple, fully
  self-hosted Captcha / PoW component for Leptos without any user interaction.
- [leptos-obfuscate](https://github.com/sebadob/leptos-obfuscate) Tiny crate
  with a Leptos component for obfuscating email addresses for bot and spam
  protection
- [cinnog](https://github.com/NiklasEi/cinnog) Experimental static site
  generator using Bevy ECS as a data layer
- [leptoaster](https://github.com/KiaShakiba/leptoaster) A minimal toast library
  for Leptos.
- [leptos_toaster](https://github.com/SorenHolstHansen/leptos_toaster) A Toaster
  component for Leptos heavily inspired by
  [Sonner](https://github.com/emilkowalski/sonner)
- [leptos-hotkeys](https://github.com/gaucho-labs/leptos-hotkeys) Declaratively
  create and pair keybindings with callbacks for Leptos applications.
- [leptos-chartistry](https://github.com/feral-dot-io/leptos-chartistry)
  Chartistry is an extensible charting library for Leptos with many
  [examples](https://feral-dot-io.github.io/leptos-chartistry/examples.html). It
  provides a simple and easy to use `<Chart>` component.
- [leptos_drag_reorder](https://github.com/tqwewe/leptos_drag_reorder) Leptos hook for draggable panels which can be rearranged.
- [Rust Floating UI](https://floating-ui.rustforweb.org/) Leptos port of Floating UI,
  a library that helps you create “floating” elements such as tooltips, popovers, dropdowns, and more.
- [Rust Lucide](https://lucide.rustforweb.org/) Leptos port of Lucide,
  a beautiful & consistent icon toolkit made by the community.
- [leptos_async_signal](https://github.com/demiurg-dev/leptos_async_signal)
  Async signal for SSR generation (generalization of `leptos_meta`).
- [leptos_animate](https://github.com/brofrain/leptos-animate) A bunch of utilities for animating elements with ease. FLIP and CSS in/out transitions included.
- [leptos-unique-ids](https://github.com/mondeja/leptos-unique-ids) Ensure globally unique DOM identifiers across a Leptos application.

## Blogs / Websites

- [Axons Talent](https://axonstalent.com) The official website of Axons Talent, a global technology recruitment company.
- [leptos.dev](https://leptos.dev) The official Leptos website, built with
  Leptos (of course.)
- [benw.is](http://benw.is) benwis's personal blog, built with Leptos SSR,
  storage in Sqlite, and compiled to Spin!
- [Itehax's blog](https://itehax.com) Markdown blog written using Leptos(with
  server side rendering) and styled using Preline (component library for
  tailwindcss) ([source](https://github.com/itehax/rust-blog))
- [LeVuMinhHuy's blog](https://github.com/LeVuMinhHuy/blog) A simple markdown to
  html blog
- [viz.rs](https://viz.rs/) The documentation site for Viz web framework
- [khuedoan.com](https://khuedoan.com) Markdown blog built with Leptos and Axum,
  styled with Tailwind CSS ([source](https://github.com/khuedoan/blog))
- [nicoburniske.com](https://nicoburniske.com) Blog + Photo gallery (using
  leptos_image and leptos_query). Styled with Tailwind CSS.
- [quanticbox.app](https://quanticbox.app) Basic financial dashboard built with
  Leptos, Axum, and Diesel. Styled with Tailwind CSS and DaisyUI.
- [rustytube.rs](https://rustytube.rs) Youtube client for desktop & web. Built
  with Leptos and Tauri; designed with Tailwind and DaisyUI.
  ([repo & binaries](https://github.com/opensourcecheemsburgers/RustyTube))
- [jlewis.sh](https://jlewis.sh/) Personal blog
- [joeymckenzie.tech](https://joeymckenzie.tech/) Markdown blog using Leptos,
  DaisyUI, and Shiki for code highlighting
  ([source](https://github.com/JoeyMckenzie/joeymckenzie.tech))
- [moturbo.com](https://moturbo.com/) Shop for motorcycle parts, built with
  Leptos.
- [utils.surge.sh](https://utils.surge.sh) Utils Homepage and dashboard, Utils(utilities) is a set of CLI tools to Transform developer experience, boost productivity, and elevate the quality of your projects. Built with Leptos CSR + Tailwind + [Remix Icon](https://remixicon.com) and [Animate On Scroll Library](https://michalsnik.github.io/aos/)
- [s1n7ax.com](https://s1n7ax.com/) Portfolio using Leptos SSR + Tailwind ([github](https://github.com/s1n7ax/my-website))
- [atpage](https://atpage.one/) linktree-like application on atproto, [built with Leptos](https://github.com/danloh/atpage).
- [TryRust](https://tryrust.org/) Little Rust playground like TryHaskell or TryClojure. Built with Leptos + Tailwind + Tokio/Axum. ([github](https://github.com/rust-dd/tryrust.org))
- [Rust-DD Blog Engine](https://rust-dd.com) A Blog engine written in Rust, using Leptos SSR + Tailwind, SurrealDB, Dufs and Tokio/Axum. ([github](https://github.com/rust-dd/blog))
- [Ever blog](https://www.everdev.it/) Blog, built with Leptos SSR (Axum) + TailwindCSS, storage in RedisDB, email sender with SMTP to feedback feature.
- [Ibis](https://ibis.wiki) Federated encyclopedia based on ActivityPub protocol, uses Leptos, Axum, Diesel and Tailwind. Open source under AGPL and available for selfhosting
- [Owdle](https://owdle.guessing.day/) Daily guessing game with Overwatch heroes. Built with Leptos CSR.
- [simpleicons.org](https://simpleicons.org) The website for [Simple Icons](https://github.com/simple-icons/simple-icons). Built with Leptos CSR + TailwindCSS ([github](https://github.com/simple-icons/simple-icons-website-rs))
- [osynic-osuapi.deno.dev](https://osynic-osuapi.deno.dev/) Beautiful, modern [OsynicOsuapi](https://github.com/osynicite/osynic_osuapi) demo website. Deployed on Deno Deploy. Built with Leptos CSR + TailwindCSS + Lucide Leptos + Leptos Fluent + Osynic Osuapi ([github](https://github.com/islatri/leptos_osuapi_playground))
- [SQLite Playground](https://sqlight.dev) A SQLite Playground that runs completely locally. Built with Leptos CSR. ([github](https://github.com/Spxg/sqlight))

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/awesome-leptos/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/CODE_OF_CONDUCT.md
# Contributor Covenant Code of Conduct

_This Code of Conduct is based on the [Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct)
and the [Bevy Code of Conduct](https://raw.githubusercontent.com/bevyengine/bevy/main/CODE_OF_CONDUCT.md),
which are adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling)
and the [Contributor Covenant](https://www.contributor-covenant.org)._

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

We are a community of people learning and exploring how to build better web applications
with Rust. When interacting with one another, please remember that there are no experts and there are
no stupid questions. Assume the best in other people's communication, and take a step back if
you find yourself getting defensive.

Please note the following guidelines as well:

* Please avoid using overtly sexual aliases or other nicknames that might detract from a friendly, safe and welcoming environment for all.
* Please be kind and courteous. There’s no need to be mean or rude.
* Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.
* Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.
* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term “harassment” as including the definition in the [Citizen Code of Conduct](https://github.com/stumpsyn/policies/blob/master/citizen_code_of_conduct.md); if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don’t tolerate behavior that excludes people in socially marginalized groups.
* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact the maintainers immediately. Whether you’re a regular contributor or a newcomer, we care about making this community a safe place for you and we’ve got your back.
* Do not make casual mention of slavery or indentured servitude and/or false comparisons of one's occupation or situation to slavery. Please consider using or asking about alternate terminology when referring to such metaphors in technology.
* Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.

## Moderation

These are the policies for upholding [our community’s standards of conduct](#our-standards). If you feel that a thread needs moderation, please contact the maintainers.

1. Remarks that violate the community standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner).
2. Remarks that maintainers find inappropriate, whether listed in the code of conduct or not, are also not allowed.
3. Maintainers will first respond to such remarks with a warning.
4. If the warning is unheeded, the user will be “kicked,” i.e., kicked out of the communication channel to cool off.
5. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.
6. Maintainers may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.
7. If a maintainer bans someone and you think it was unjustified, please take it up with that maintainer, or with a different maintainer, in private. Complaints about bans in-channel are not allowed.
8. Maintainers are held to a higher standard than other community members. If a maintainer creates an inappropriate situation, they should expect less leeway than others.

The enforcement policies in the code of conduct apply to all official venues, including Discord channels, GitHub repositories, and all other forums.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/CODE_OF_CONDUCT.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/ARCHITECTURE.md
# Architecture

The goal of this document is to make it easier for contributors (and anyone
who’s interested!) to understand the architecture of the framework.

The whole Leptos framework is built from a series of layers. Each of these layers
depends on the one below it, but each can be used independently from the ones
built on top of it. While running a command like `cargo leptos new --git 
leptos-rs/start` pulls in the whole framework, it’s important to remember that
none of this is magic: each layer of that onion can be stripped away and
reimplemented, configured, or adapted as needed, incrementally.

> Everything that follows will assume you have a good working understanding
> of the framework. There will be explanations of how some parts of it work
> or fit together, but these are not docs. They assume you know what I’m
> talking about.

## The Reactive System: `leptos_reactive`

The reactive system allows you to define dynamic values (signals),
the relationships between them (derived signals and memos), and the side effects
that run in response to them (effects).

These concepts are completely independent of the DOM and can be used to drive
any kind of reactive updates. The reactive system is based on the assumption
that data is relatively cheap, and side effects are relatively expensive. Its
goal is to minimize those side effects (like updating the DOM or making a network
requests) as infrequently as possible.

The reactive system is implemented as a single data structure that exists at
runtime. In exchange for giving ownership over a value to the reactive system
(by creating a signal), you receive a `Copy + 'static` identifier for its
location in the reactive system. This enables most of the ergonomics of storing
and sharing state, the use of callback closures without lifetime issues, etc.
This is implemented by storing signals in a slotmap arena. The signal, memo,
and scope types that are exposed to users simply carry around an index into that
slotmap.

> Items owned by the reactive system are dropped when the corresponding reactive
> scope is dropped, i.e., when the component or section of the UI they’re
> created in is removed. In a sense, Leptos implements a “garbage collector”
> in which the lifetime of data is tied to the lifetime of the UI, not Rust’s
> lexical scopes.

## The DOM Renderer: `leptos_dom`

The reactive system can be used to drive any kinds of side effects. One very
common side effect is calling an imperative method, for example to update the
DOM.

The entire DOM renderer is built on top of the reactive system. It provides
a builder pattern that can be used to create DOM elements dynamically.

The renderer assumes, as a convention, that dynamic attributes, classes,
styles, and children are defined by being passed a `Fn() -> T`, where their
static equivalents just receive `T`. There’s nothing about this that is
divinely ordained, but it’s a useful convention because it allows us to use
zero-overhead derived signals as one of several ways to indicate dynamic
content.

`leptos_dom` also contains code for server-side rendering of the same
UI views to HTML, either for out-of-order streaming (`src/ssr.rs`) or
in-order streaming/async rendering (`src/ssr_in_order.rs`).

## The Macros: `leptos_macro`

It’s entirely possible to write Leptos code with no macros at all. The
`view` and `component` macros, the most common, can be replaced by
the builder syntax and simple functions (see the `counter_without_macros`
example). But the macros enable a JSX-like syntax for describing views.

This package also contains the `Params` derive macro used for typed
queries and route params in the router.

### Macro-based Optimizations

Leptos 0.0.x was built much more heavily on macros. Taking its cues  
from SolidJS, the `view` macro emitted different code for CSR, SSR, and
hydration, optimizing each. The CSR/hydrate versions worked by compiling
the view to an HTML template string, cloning that `<template>`, and
traversing the DOM to set up reactivity. The SSR version worked similarly
by compiling the static parts of the view to strings at compile time,
reducing the amount of work that needed to be done on each request.

Proc macros are hard, and this system was brittle. 0.1 introduced a
more robust renderer, including the builder syntax, and rebuilt the `view`
macro to use that builder syntax instead. It moved the optimized-but-buggy
CSR version of the macro to a more-limited `template` macro.

The `view` macro now separately optimizes SSR to use the same static-string
optimizations, which (by our benchmarks) makes Leptos about 3-4x faster
than similar Rust frontend frameworks in its HTML rendering.

> The optimization is pretty straightforward. Consider the following view:
>
> ```rust
> view! { cx,
>   <main class="text-center">
>     <div class="flex-col">
>       <button>"Click me."</button>
>       <p class="italic">"Text."</p>
>     </div>
>   </main>
> }
> ```
>
> Internally, with the builder this is something like
>
> ```rust
> Element {
>   tag: "main",
>   attrs: vec![("class", "text-center")],
>   children: vec![
> 	  Element {
> 		tag: "div",
> 		attrs: vec![("class", "flex-col")],
>       children: vec![
>         Element {
> 	        tag: "button",
> 			attrs: vec![],
> 			children: vec!["Click me"]
>         },
>         Element {
> 	        tag: "p",
> 			attrs: vec![("class", "italic")],
> 			children: vec!["Text"]
>         }
>       ]
> 	  }
>   ]
> }
> ```
>
> This is a _bunch_ of small allocations and separate strings,
> and in early 0.1 versions we used a `SmallVec` for children and
> attributes and actually caused some stack overflows.
>
> But if you look at the view itself you can see that none of this
> will _ever_ change. So we can actually optimize it at compile
> time to a single `&'static str`:
>
> ```rust
> r#"<main class="text-center">
>     <div class="flex-col">
>       <button>"Click me."</button>
>       <p class="italic">"Text."</p>
>     </div>
>   </main>"#
> ```

## Server Functions (`leptos_server`, `server_fn`, and `server_fn_macro`)

Server functions are a framework-agnostic shorthand for converting
a function, whose body can only be run on the server, into an ad hoc
REST API endpoint, and then generating code on the client to call that
endpoint when you call the function.

These are inspired by Solid/Bling’s `server$` functions, and there’s
similar work being done in a number of other JavaScript frameworks.

RPC is not a new idea, but these kinds of server functions may be.
Specifically, by using web standards (defaulting to `POST`/`GET` requests
with URL-encoded form data) they allow easy graceful degradation and the
use of the `<form>` element.

This function is split across three packages so that `server_fn` and
`server_fn_macro` can be used by other frameworks. `leptos_server`
includes some Leptos-specific reactive functionality (like actions).

## `leptos`

This package is built on and reexports most of the layers already
mentioned, and implements a number of control-flow components (`<Show/>`,
`<ErrorBoundary/>`, `<For/>`, `<Suspense/>`, `<Transition/>`) that use
public APIs of the other packages.

This is the main entrypoint for users, but is relatively light itself.

## `leptos_meta`

This package exists to allow you to work with tags normally found in
the `<head>`, from within your components.

It is implemented as a distinct package, rather than part of
`leptos_dom`, on the principle that “what can be implemented in userland,
should be.” The framework can be used without it, so it’s not in core.

## `leptos_router`

The router originates as a direct port of `solid-router`, which is the
origin of most of its terminology, architecture, and route-matching logic.

Subsequent developments (like animated routing, and managing route transitions
given the lack of `useTransition` in Leptos) have caused it to diverge
slightly from Solid’s exact code, but it is still very closely related.

The core principle here is “nested routing,” dividing a single page
into independently-rendered parts. This is described in some detail in the docs.

Like `leptos_meta`, it is implemented as a distinct package, because it
can be replaced with another router or with none. The framework can be used
without it, so it’s not in core.

## Server Integrations

The server integrations are the most “frameworky” layer of the whole framework.
These **do** assume the use of `leptos`, `leptos_router`, and `leptos_meta`.
They specifically draw routing data from `leptos_router`, and inject the
metadata from `leptos_meta` into the `<head>` appropriately.

But of course, if you one day create `leptos-helmet` and `leptos-better-router`,
you can create new server integrations that plug them into the SSR rendering
methods from `leptos_dom` instead. Everything involved is quite modular.

These packages essentially provide helpers that save the templates and user apps
from including a huge amount of boilerplate to connect the various other packages
correctly. Again, early versions of the framework examples are illustrative here
for reference: they include large amounts of manual SSR route handling, etc.

## `cargo-leptos` helpers

`leptos_config` and `leptos_hot_reload` exist to support two different features
of `cargo-leptos`, namely its configuration and its view-patching/hot-reloading 
features.

It’s important to say that the main feature `cargo-leptos` remains its ability
to conveniently tie together different build tooling, compiling your app to
WASM for the browser, building the server version, pulling in SASS and
Tailwind, etc. It is an extremely good build tool, not a magic formula. Each
of the examples includes instructions for how to run the examples without
`cargo-leptos`.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/ARCHITECTURE.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/TODO.md
- core examples
    - [x] counter
    - [x] counters
    - [x] fetch
    - [x] todomvc 
    - [x] error_boundary
    - [x] parent\_child
        - [x] on: on components
    - [ ] router
    - [ ] slots 
    - [ ] hackernews
    - [ ] counter\_isomorphic
    - [ ] todo\_app\_sqlite
- other ssr examples
    - [ ] error boundary SSR
- reactivity 
    - Signal wrappers
    - SignalDispose implementations on all Copy types
    - untracked access warnings
- ErrorBoundary
    - [ ] RenderHtml implementation 
    - [ ] Separate component?
- Suspense/Transition components?
- callbacks
    - unsync StoredValue
- SSR
    - escaping HTML correctly (attributes + text nodes)
- router
    - nested routes
    - trailing slashes
- \_meta package (and use in hackernews)
- integrations
- update tests
- hackernews example
  - TODOs
  - Suspense/Transition/Await components
  - nicer routing components
  - async routing (waiting for data to load before navigation)
  - `<A>` component
  - figure out rebuilding issues: list (needs new signal IDs) vs. regular rebuild

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/TODO.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/README.md
<picture>
    <source srcset="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_pref_dark_RGB.svg" media="(prefers-color-scheme: dark)">
    <img src="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_RGB.svg" alt="Leptos Logo">
</picture>

[![crates.io](https://img.shields.io/crates/v/leptos.svg)](https://crates.io/crates/leptos)
[![docs.rs](https://docs.rs/leptos/badge.svg)](https://docs.rs/leptos)
![Crates.io MSRV](https://img.shields.io/crates/msrv/leptos)
[![Discord](https://img.shields.io/discord/1031524867910148188?color=%237289DA&label=discord)](https://discord.gg/YdRAhS7eQB)
[![Matrix](https://img.shields.io/badge/Matrix-leptos-grey?logo=matrix&labelColor=white&logoColor=black)](https://matrix.to/#/#leptos:matrix.org)

[Website](https://leptos.dev) | [Book](https://leptos-rs.github.io/leptos/) | [Docs.rs](https://docs.rs/leptos/latest/leptos/) | [Playground](https://codesandbox.io/p/sandbox/leptos-rtfggt?file=%2Fsrc%2Fmain.rs%3A1%2C1) | [Discord](https://discord.gg/YdRAhS7eQB)

You can find a list of useful libraries and example projects at [`awesome-leptos`](https://github.com/leptos-rs/awesome-leptos).

# Leptos

```rust
use leptos::*;

#[component]
pub fn SimpleCounter(initial_value: i32) -> impl IntoView {
    // create a reactive signal with the initial value
    let (value, set_value) = signal(initial_value);

    // create event handlers for our buttons
    // note that `value` and `set_value` are `Copy`, so it's super easy to move them into closures
    let clear = move |_| set_value(0);
    let decrement = move |_| set_value.update(|value| *value -= 1);
    let increment = move |_| set_value.update(|value| *value += 1);

    // create user interfaces with the declarative `view!` macro
    view! {
        <div>
            <button on:click=clear>Clear</button>
            <button on:click=decrement>-1</button>
            // text nodes can be quoted or unquoted
            <span>"Value: " {value} "!"</span>
            <button on:click=increment>+1</button>
        </div>
    }
}

// we also support a builder syntax rather than the JSX-like `view` macro
#[component]
pub fn SimpleCounterWithBuilder(initial_value: i32) -> impl IntoView {
    use leptos::html::*;

    let (value, set_value) = signal(initial_value);
    let clear = move |_| set_value(0);
    let decrement = move |_| set_value.update(|value| *value -= 1);
    let increment = move |_| set_value.update(|value| *value += 1);

    // the `view` macro above expands to this builder syntax
    div().child((
        button().on(ev::click, clear).child("Clear"),
        button().on(ev::click, decrement).child("-1"),
        span().child(("Value: ", value, "!")),
        button().on(ev::click, increment).child("+1")
    ))
}

// Easy to use with Trunk (trunkrs.dev) or with a simple wasm-bindgen setup
pub fn main() {
    mount_to_body(|| view! {
        <SimpleCounter initial_value=3 />
    })
}
```

## About the Framework

Leptos is a full-stack, isomorphic Rust web framework leveraging fine-grained reactivity to build declarative user interfaces.

## What does that mean?

- **Full-stack**: Leptos can be used to build apps that run in the browser (client-side rendering), on the server (server-side rendering), or by rendering HTML on the server and then adding interactivity in the browser (server-side rendering with hydration). This includes support for HTTP streaming of both data ([`Resource`s](https://docs.rs/leptos/latest/leptos/struct.Resource.html)) and HTML (out-of-order or in-order streaming of [`<Suspense/>`](https://docs.rs/leptos/latest/leptos/fn.Suspense.html) components.)
- **Isomorphic**: Leptos provides primitives to write isomorphic [server functions](https://docs.rs/leptos_server/0.2.5/leptos_server/index.html), i.e., functions that can be called with the “same shape” on the client or server, but only run on the server. This means you can write your server-only logic (database requests, authentication etc.) alongside the client-side components that will consume it, and call server functions as if they were running in the browser, without needing to create and maintain a separate REST or other API.
- **Web**: Leptos is built on the Web platform and Web standards. The [router](https://docs.rs/leptos_router/latest/leptos_router/) is designed to use Web fundamentals (like links and forms) and build on top of them rather than trying to replace them.
- **Framework**: Leptos provides most of what you need to build a modern web app: a reactive system, templating library, and a router that works on both the server and client side.
- **Fine-grained reactivity**: The entire framework is built from reactive primitives. This allows for extremely performant code with minimal overhead: when a reactive signal’s value changes, it can update a single text node, toggle a single class, or remove an element from the DOM without any other code running. (So, no virtual DOM overhead!)
- **Declarative**: Tell Leptos how you want the page to look, and let the framework tell the browser how to do it.

## Learn more

Here are some resources for learning more about Leptos:

- [Book](https://leptos-rs.github.io/leptos/) (work in progress)
- [Examples](https://github.com/leptos-rs/leptos/tree/main/examples)
- [API Documentation](https://docs.rs/leptos/latest/leptos/)
- [Common Bugs](https://github.com/leptos-rs/leptos/tree/main/docs/COMMON_BUGS.md) (and how to fix them!)

## `nightly` Note

Most of the examples assume you’re using `nightly` version of Rust and the `nightly` feature of Leptos. To use `nightly` Rust, you can either set your toolchain globally or on per-project basis.

To set `nightly` as a default toolchain for all projects (and add the ability to compile Rust to WebAssembly, if you haven’t already):

```
rustup toolchain install nightly
rustup default nightly
rustup target add wasm32-unknown-unknown
```

If you'd like to use `nightly` only in your Leptos project however, add [`rust-toolchain.toml`](https://rust-lang.github.io/rustup/overrides.html#the-toolchain-file) file with the following content:

```toml
[toolchain]
channel = "nightly"
targets = ["wasm32-unknown-unknown"]
```

The `nightly` feature enables the function call syntax for accessing and setting signals, as opposed to `.get()` and `.set()`. This leads to a consistent mental model in which accessing a reactive value of any kind (a signal, memo, or derived signal) is always represented as a function call. This is only possible with nightly Rust and the `nightly` feature.

## `cargo-leptos`

[`cargo-leptos`](https://github.com/leptos-rs/cargo-leptos) is a build tool that's designed to make it easy to build apps that run on both the client and the server, with seamless integration. The best way to get started with a real Leptos project right now is to use `cargo-leptos` and our starter templates for [Actix](https://github.com/leptos-rs/start) or [Axum](https://github.com/leptos-rs/start-axum).

```bash
cargo install cargo-leptos
cargo leptos new --git https://github.com/leptos-rs/start-axum
cd [your project name]
cargo leptos watch
```

Open browser to [http://localhost:3000/](http://localhost:3000/).

## FAQs

### What’s up with the name?

_Leptos_ (λεπτός) is an ancient Greek word meaning “thin, light, refined, fine-grained.” To me, a classicist and not a dog owner, it evokes the lightweight reactive system that powers the framework. I've since learned the same word is at the root of the medical term “leptospirosis,” a blood infection that affects humans and animals... My bad. No dogs were harmed in the creation of this framework.

### Is it production ready?

People usually mean one of three things by this question.

1. **Are the APIs stable?** i.e., will I have to rewrite my whole app from Leptos 0.1 to 0.2 to 0.3 to 0.4, or can I write it now and benefit from new features and updates as new versions come?

The APIs are basically settled. We’re adding new features, but we’re very happy with where the type system and patterns have landed. I would not expect major breaking changes to your code to adapt to future releases, in terms of architecture.

2. **Are there bugs?**

Yes, I’m sure there are. You can see from the state of our issue tracker over time that there aren’t that _many_ bugs and they’re usually resolved pretty quickly. But for sure, there may be moments where you encounter something that requires a fix at the framework level, which may not be immediately resolved.

3. **Am I a consumer or a contributor?**

This may be the big one: “production ready” implies a certain orientation to a library: that you can basically use it, without any special knowledge of its internals or ability to contribute. Everyone has this at some level in their stack: for example I (@gbj) don’t have the capacity or knowledge to contribute to something like `wasm-bindgen` at this point: I simply rely on it to work.

There are several people in the community using Leptos right now for internal apps at work, who have also become significant contributors. I think this is the right level of production use for now. There may be missing features that you need, and you may end up building them! But for internal apps, if you’re willing to build and contribute missing pieces along the way, the framework is definitely usable right now.

### Can I use this for native GUI?

Sure! Obviously the `view` macro is for generating DOM nodes but you can use the reactive system to drive any native GUI toolkit that uses the same kind of object-oriented, event-callback-based framework as the DOM pretty easily. The principles are the same:

- Use signals, derived signals, and memos to create your reactive system
- Create GUI widgets
- Use event listeners to update signals
- Create effects to update the UI

The 0.7 update originally set out to create a "generic rendering" approach that would allow us to reuse most of the same view logic to do all of the above. Unfortunately, this has had to be shelved for now due to difficulties encountered by the Rust compiler when building larger-scale applications with the number of generics spread throughout the codebase that this required. It's an approach I'm looking forward to exploring again in the future; feel free to reach out if you're interested in this kind of work.

### How is this different from Yew?

Yew is the most-used library for Rust web UI development, but there are several differences between Yew and Leptos, in philosophy, approach, and performance.

- **VDOM vs. fine-grained:** Yew is built on the virtual DOM (VDOM) model: state changes cause components to re-render, generating a new virtual DOM tree. Yew diffs this against the previous VDOM, and applies those patches to the actual DOM. Component functions rerun whenever state changes. Leptos takes an entirely different approach. Components run once, creating (and returning) actual DOM nodes and setting up a reactive system to update those DOM nodes.
- **Performance:** This has huge performance implications: Leptos is simply much faster at both creating and updating the UI than Yew is.
- **Server integration:** Yew was created in an era in which browser-rendered single-page apps (SPAs) were the dominant paradigm. While Leptos supports client-side rendering, it also focuses on integrating with the server side of your application via server functions and multiple modes of serving HTML, including out-of-order streaming.

### How is this different from Dioxus?

Like Leptos, Dioxus is a framework for building UIs using web technologies. However, there are significant differences in approach and features.

- **VDOM vs. fine-grained:** While Dioxus has a performant virtual DOM (VDOM), it still uses coarse-grained/component-scoped reactivity: changing a stateful value reruns the component function and diffs the old UI against the new one. Leptos components use a different mental model, creating (and returning) actual DOM nodes and setting up a reactive system to update those DOM nodes.
- **Web vs. desktop priorities:** Dioxus uses Leptos server functions in its fullstack mode, but does not have the same `<Suspense>`-based support for things like streaming HTML rendering, or share the same focus on holistic web performance. Leptos tends to prioritize holistic web performance (streaming HTML rendering, smaller WASM binary sizes, etc.), whereas Dioxus has an unparalleled experience when building desktop apps, because your application logic runs as a native Rust binary.

### How is this different from Sycamore?

Sycamore and Leptos are both heavily influenced by SolidJS. At this point, Leptos has a larger community and ecosystem and is more actively developed. Other differences:

- **Templating DSLs:** Sycamore uses a custom templating language for its views, while Leptos uses a JSX-like template format.
- **`'static` signals:** One of Leptos’s main innovations was the creation of `Copy + 'static` signals, which have excellent ergonomics. Sycamore is in the process of adopting the same pattern, but this is not yet released.
- **Perseus vs. server functions:** The Perseus metaframework provides an opinionated way to build Sycamore apps that include server functionality. Leptos instead provides primitives like server functions in the core of the framework.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/CONTRIBUTING.md
# Contributing to Leptos

Thanks for your interesting in contributing to Leptos! This is a truly
community-driven framework, and while we have a central maintainer (@gbj)
large parts of the renderer, reactive system, and server integrations have
all been written by other contributors. Contributions are always welcome.

Participation in this community is governed by a [Code of Conduct](./CODE_OF_CONDUCT.md).
Some of the most active conversations around development take place on our
[Discord server](https://discord.gg/YdRAhS7eQB).

This guide seeks to

- describe some of the framework’s values (in a technical, not an ethical, sense)
- provide a high-level overview of how the pieces of the framework fit together
- orient you to the organization of this repository

## Values

Leptos, as a framework, reflects certain technical values:

- **Expose primitives rather than imposing patterns.** Provide building blocks
  that users can combine together to build up more complex behavior, rather than
  requiring users follow certain templates, file formats, etc. e.g., components
  are defined as functions, rather than a bespoke single-file component format.
  The reactive system feeds into the rendering system, rather than being defined
  by it.
- **Bottom-up over top-down.** If you envision a user’s application as a tree
  (like an HTML document), push meaning toward the leaves of the tree. e.g., If data
  needs to be loaded, load it in a granular primitive (resources) rather than a
  route- or page-level data structure.
- **Performance by default.** When possible, users should only pay for what they
  use. e.g., we don’t make all component props reactive by default. This is
  because doing so would force the overhead of a reactive prop onto props that don’t
  need to be reactive.
- **Full-stack performance.** Performance can’t be limited to a single metric,
  whether that’s a DOM rendering benchmark, WASM binary size, or server response
  time. Use methods like HTTP streaming and progressive enhancement to enable
  applications to load, become interactive, and respond as quickly as possible.
- **Use safe Rust.** There’s no need for `unsafe` Rust in the framework, and
  avoiding it at all costs reduces the maintenance and testing burden significantly.
- **Embrace Rust semantics.** Especially in things like UI templating, use Rust
  semantics or extend them in a predictable way with control-flow components
  rather than overloading the meaning of Rust terms like `if` or `for` in a
  framework-specific way.
- **Enhance ergonomics without obfuscating what’s happening.** This is by far
  the hardest to achieve. It’s often the case that adding additional layers to
  improve DX (like a custom build tool and starter templates) comes across as
  “too magic” to some people who haven’t had to build the same things manually.
  When possible, make it easier to see how the pieces fit together, without
  sacrificing the improved DX.

## Processes

We do not have PR templates or formal processes for approving PRs. But there
are a few guidelines that will make it a better experience for everyone:

- Run `cargo fmt` before submitting your code.
- Keep PRs limited to addressing one feature or one issue, in general. In some
  cases (e.g., “reduce allocations in the reactive system”) this may touch a number
  of different areas, but is still conceptually one thing.
- If it’s an unsolicited PR not linked to an open issue, please include a
  specific explanation for what it’s trying to achieve. For example: “When I
  was trying to deploy my app under _circumstances X_, I found that the way
  _function Y_ was implemented caused _issue Z_. This PR should fix that by
  _solution._”
- Our CI tests every PR against all the existing examples, sometimes requiring
  compilation for both server and client side, etc. It’s thorough but slow. If
  you want to run CI locally to reduce frustration, you can do that by installing
  `cargo-make` and using `cargo make check && cargo make test && cargo make
check-examples`.

## Before Submitting a PR

We have a fairly extensive CI setup that runs both lints (like `rustfmt` and `clippy`)
and tests on PRs. You can run most of these locally if you have `cargo-make` installed.

Note that some of the `rustfmt` settings used require usage of the nightly compiler.
Formatting the code using the stable toolchain may result in a wrong code format and
subsequently CI errors.
Run `cargo +nightly fmt` if you want to keep the stable toolchain active.
You may want to let your IDE automatically use the `+nightly` parameter when a
"format on save" action is used.

If you added an example, make sure to add it to the list in `examples/Makefile.toml`.

From the root directory of the repo, run
- `cargo +nightly fmt`
- `cargo +nightly make check`
- `cargo +nightly make test`
- `cargo +nightly make check-examples`
- `cargo +nightly make --profile=github-actions ci`

If you modified an example:
- `cd examples/your_example`
- `cargo +nightly fmt -- --config-path ../..`
- `cargo +nightly make --profile=github-actions verify-flow`

## Architecture

See [ARCHITECTURE.md](./ARCHITECTURE.md).

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/CONTRIBUTING.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/SECURITY.md
# Security Policy

## Reporting a Vulnerability

To report a suspected security issue, please contact security@leptos.dev rather than opening
a public issue.

## Supported Versions

The most-recently-released version of the library is supported with security updates.
For example, if a security issue is discovered that affects 0.3.2 and all later releases,
a 0.4.x patch will be released but a new 0.3.x patch release will not be made. You should 
plan to update to the latest version to receive any new features or bugfixes of any kind.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/SECURITY.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/reactive_stores_macro/README.md
This crate provides macro that are helpful or required when using the `reactive_stores` crate.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/reactive_stores_macro/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/next_tuple/README.md
Allows extending a tuple, or creating a new tuple, by adding the next value.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/next_tuple/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/README.md
# `projects` README

The `projects` directory is intended as a collective of medium-to-large-scale examples: a place to show a variety of use cases and integrations between Leptos and other libraries. Over time, our hope is that this allows us to showcase a wider variety of user examples, without the main `examples` directory becoming too overwhelming to be useful.

The `examples` directory is included in our CI, and examples are regularly linted and tested. The barrier to entry for the `projects` directory is intended to be lower: Example projects will generally be built against a particular version, and not regularly linted or updated. Hopefully this distinction allows us to accept more examples without worrying about the maintenance burden of constant updates.

Feel free to submit projects to this directory via PR!


## Index

### meilisearch-searchbar 
[Meilisearch](https://www.meilisearch.com/) is a search engine built in Rust that you can self-host. This example shows how to run it alongside a leptos server and present a search bar with autocomplete to the user.

### nginx-mpmc 
[Nginx](https://nginx.org/) Multiple Producer Multi Consumer, this example shows how you can use Nginx to provide different clients to the user while running multiple Leptos servers that provide server functions to any of the clients.

### ory-kratos 
[Ory](https://www.ory.sh/docs/welcome) is a combination of different authorization services. Ory Kratos is their Identification service, which provides password storage, emailing, login and registration functionality, etc. This example shows running Ory Kratos alongside a leptos server and making use of their UI Node data types in leptos. TODO: This example needs a bit more work to show off SSO passwordless etc 

### tauri-from-scratch
This example walks you through in explicit detail how to use [Tauri](https://tauri.app/) to render your Leptos App on non web targets using [WebView](https://en.wikipedia.org/wiki/WebView) while communicating with your leptos server and servering an SSR supported web experience. TODO: It could be simplified since part of the readme includes copying and pasting boilerplate.

### counter_dwarf_debug
This example shows how to add breakpoints within the browser or visual studio code for debugging.

### bevy3d_ui
This example uses the bevy 3d game engine with leptos within webassembly.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/ory-kratos/README.md
# Leptos Ory Kratos Integration (With Axum)
This repo used [start-axum-workspace](https://github.com/leptos-rs/start-axum-workspace/) as a base.

## How to run the example.

Run in different terminal windows (for the best result)

```sh
cargo leptos serve
```

```sh
docker compose up
```

```sh
cargo test --test app_suite
```

This will run our server, set up our compose file (MailCrab, Ory Kratos, Ory Ketos) and run the test suite that walks through logging in, registration, verification etc.

The e2e testing uses [chromiumoxide](https://crates.io/crates/chromiumoxide) and does things like monitor network requests, console messages, take screenshots during the flow and produces them when any of our feature tests fail. This can be a helpful starting point in debugging. Currently it just prints the output into files in the e2e directory but it could be modified to pipe them somewhere like a tool to help with the development process.


## High Level Overview

Our project runs a leptos server alongside various Ory Kratos. Kratos provides identification, and we use it when registering users, and credentialing them.
<br>
A normal flow would look something like:<br>
<ul>
<li>
I go to the homepage,I click register
</li>
</li>
I am redirected to the register page, the register page isn't hardcoded but is rendered by parsing the UI data structure given by Ory Kratos. The visible portions correspond to the fields we've set in our ./kratos/email.schema.json schema file, but it includes
hidden fields (i.e a CSRF token to prevent CSRF). This project includes unstyled parsing code for the UI data structure.
</li>
<li>
I sign up with an email and password
</li>
<li>
Our leptos server will intercept the form data and then pass it on to the ory kratos service.
</li>
<li>
Ory Kratos validates those inputs given the validation criteria ./kratos/email.schema.json schema file
</li>
<li>
Ory Kratos then verifies me by sending me an email.
</li>
<li>
In this example we catch the email with an instance of mailcrab (an email server for testing purposes we run in our docker compose)
. You can use mailcrab locally 127.0.0.1:1080
</li>
<li>
I look inside the email, I see a code and a link where I will input the code.
</li>
<li>
I click through and input the code, and I am verified.
</li>
<li>
When I go to the login page, it's rendered based on the same method as the registration page. I.e Kratos sends a UI data structure which is parsed into the UI we show the user.
</li>
<li>
I use my password and email on the login page to login.
</li>
<li>
Again, Our leptos server acts as the inbetween between the client and the Ory Kratos service. There were some pecularities between the CSRF token being set in the headers (which Ory Kratos updates with every step in the flow), SSR, and having the client communicate directly with Ory Kratos which lead me to use this approach where our server is the intermediary between the client and Ory Kratos.
</li>
<li>
Ory Kratos is session based, so after it recieves valid login credentials it creates a session and returns the session token. The session token is passed via cookies with every future request. All this does is establish the identity of the caller, to perform authentication we need a way to establish permissions given an individuals identity and how that relates to the content on the website. In this example I just use tables in the database but this example could be extended to use Ory Ketos, with is to Authorization a Ory Kratos is to Identification.
</li>
</ul>

When given bad input in a field, Ory Kratos issues a new render UI data structure with error messages and we rerender the login page.

## With regards to Ory Oathkeeper And Ory Ketos.

Ory Oathkeeper is a reverse proxy that sits between your server and the client, it takes the session token, looks to see what is being requested in the request and then checks the configuration files of your Ory Services to see if such a thing is allowed. It will communicate with the Ory services on your behalf and then pass on the authorized request to the appropriate location or reject it otherwise.
<br>
Ory Ketos is the authorization part of the Ory suite, Ory Kratos simplies identifies the user (this is often conflated with authorization but authorization is different). Authorization is the process of after having confirmed a user's identity provisioning services based on some permission structure. I.e Role Based Authorization, Document based permissions, etc. Ory Ketos uses a similar configuration file based set up to Ory Kratos.
<br>
Instead of either of those, in this example we use an extractor to extract the session cookie and verify it with our kratos service and then perform our own checks. This is simpler to set up, more inutitive, and thus better for smaller projects. Identification is complicated, and it's nice to have it be modularized for whatever app we are building. This will save a lot of time when building multiple apps. The actual provisioning of services for most apps is much simpler, i.e database lookup tied to identification and some logic checks. Is the user preiumum? How much have they used the API compared to the maximum? Using Ory Kratos can reduce complexity and decrease your time to market, especially over multiple attempts.
<br>
In production you'd have a virtual private server and you'd serve your leptos server behind Nginx, Nginx routes the calls to the Leptos Server and never to our Ory Kratos. Our Rust server handles all the communication between the client and Ory services. This is simpler from an implementation perspective then including Ory Oathkeeper and Ory Ketos. Ory Kratos/Ketos presume all api calls they recieve are valid by default, so it's best not to expose them at all to any traffic from the outside world. And when building our leptos app we'll have a clear idea about when and how these services are being communicated with when our service acts as the intermediary.

## How this project is tested

We use Gherkin feature files to describe the behavior of the application. We use [cucumber](https://docs.rs/cucumber/latest/cucumber/) as our test harness and match the feature files to [chromiumoxide](https://docs.rs/chromiumoxide/latest/chromiumoxide/) code to drive a local chromium application. I'm using e2e testing mostly to confirm that the service provides the value to the user, in this case just authorization testing. And that, that value proposition doesn't break when we change some middleware code that touches everything etc.
<br>
The `ids` crate includes a list of static strings that we'll use in our chromiumoxide lookups and our frontend to make our testing as smooth as possible. There are other ways to do this, such as find by text, which would find the "Sign Up" text and click it etc. So these tests don't assert anything with regards to presentation, just functionality.

## How to use mkcert to get a locally signed certificate (and why)
We need to use https because we are sending cookies with the `Secure;` flag, cookies with the Secure flag can't be used 
unless delivered over https. Since we're using chromedriver for e2e testing let's use mkcert to create a cert that will allow 
https://127.0.0.1:3000/ to be a valid url.
Install mkcert and then

```sh
mkcert -install localhost 127.0.0.1 ::1
```

Copy your cert.pem, key.pem and rootCA.pem into this crate's root.


## Thoughts, Feedback, Criticism, Comments?
Send me any of the above, I'm @sjud on leptos discord. I'm always looking to improve and make these projects more helpful for the community. So please let me know how I can do that. Thanks!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/ory-kratos/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/sitemap_axum/README.md
# Sitemaps with Axum

This project demonstrates how to serve a [sitemap](https://developers.google.com/search/docs/crawling-indexing/sitemaps/overview) file using Axum using dynamic data (like blog posts in this case). An example Postgres database is used data source for storing blog post data that can be used to generate a dynamic site map based on blog post slugs. There's lots of [sitemap crates](https://crates.io/search?q=sitemap), though this example uses the [xml](https://crates.io/crates/xml) for example purposes.

## Quick Start

We use Docker to provide a Postgres database for this sample, so make sure you have it installed.

```sh
$ docker -v
Docker version 25.0.3, build 4debf41
```

Once Docker has started on you local machine, run (make sure to have `cargo-make` installed):

```sh
$ cargo make run
```

This will handle spinning up a Postgres container, initializing the example database, and launching the local dev server.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/sitemap_axum/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/hexagonal-architecture/README.md
### Leptos Hexagonal Design

This Blog Post / Github Repository is about applying principles of hexagonal design
    - Isolating Business Logic from Sub Domains
    - Decoupling design to improve flexibility and testablity
    - Applying the principles hierachically so that sub domains which talk to external services also implement also implement hexagonal architecture


There are specific constraints that guide our design decisions

- Server Functions Can't be Generic
- Boxed Traits Objects Have overhead, so we only want to use as much generic code as possible avoid Trait Objects

The way this works is we define the functionality of our program in the main domain (i.e the business problem and processes our app is trying to solve / proceduralize). We then create sub domains and external services, although they are represented the same. External services are usually the end nodes of your app's architectural graph. Our main application builds it's service layout using configuration flags.

```rust
pub fn config() -> MainAppHandlerAlias {
    cfg_if::cfg_if! {
                if #[cfg(feature="open_ai_wrapper")] {
                    fn server_handler_config_1() -> MainAppHandler<
                        AuthService<PostgresDb, Redis>,
                        AiMessageGen<PostgresDb,OpenAiWrapper>,
                        > {
                        MainAppHandler::new_with_postgres_and_redis_open_ai()
                    }
                    server_handler_config_1()
                } else {
                    fn server_handler_config_2() -> MainAppHandler<
                        AuthService<MySql, MemCache>,
                        OtherAiMessageGen<MySql,HuggingFaceWrapper>,
                        > {
                        MainAppHandler::new_with_my_sql_memcache_hugging_face()
                    }           
                    server_handler_config_2()
                }
            }
}

```

And we pass in our handler which implements a trait

```rust
pub trait HandlerServerFn {
    pub fn server_fn_1_inner(&self);
}
impl<S,S2> HandlerServerFn for MainAppHandler<S:SubDomain1Trait,S2:SubDomain2Trait> {
    pub fn server_fn_1_inner(&self) {
        // do thing
    }
}
```

in our main fn we produce our applications service graph and pass it to our leptos router.

```rust
main () {
   let leptos_options = conf.leptos_options;
    let routes = generate_route_list(crate::app::App);
    // our feature flag based config function.
    let handler = config();
    let handler_c = handler.clone();
    // we implement FromRef<ServerState> for LeptosOptions
    let server_state = ServerState {
        handler,
        leptos_options: leptos_options.clone(),
    };
    let app = Router::new()
        .leptos_routes_with_context(
            &server_state,
            routes,
            // We pass in the MainAppHandler struct as context so we can fetch it anywhere context is available on the server.
            // This includes in middleware we define on server functions (see middleware.rs)
            move || provide_context(handler_c.clone()),
            {
                let leptos_options = leptos_options.clone();
                move || shell(leptos_options.clone())
            },
        )
        .fallback(leptos_axum::file_and_error_handler::<
            ServerState<HandlerStructAlias>,
            _,
        >(shell))
        .with_state(server_state);
}
```

and then in our server functions 

```rust
#[server]
pub async fn server_fn_1() -> Result<(),ServerFnError> {
    // we type alias every variation of our services we plan on configuring. The alternative is using Box<dyn Trait> which isn't bad - just slower.
    Ok(expect_context::<MainAppHandlerAlias>().server_fn_1_inner())
}
```

And then we can mock and service trait in any combination like so

```rust
    #[tokio::test]
    pub async fn test_subdomain_1_with_mocks() -> Result<(), Box<dyn Error>> {
        let mut mock_external_service_1 = MockExternalServiceTrait1::new();
        mock_external_service_1
            .expect_external_service_1_method()
            .returning(|| {
                println!("Mock external service 1");
                Ok(ExternalService1Data)
            });
        let mut mock_external_service_2 = MockExternalServiceTrait2::new();
        mock_external_service_2
            .expect_external_service_2_method()
            .returning(|| {
                println!("Mock external service 2");
                Ok(ExternalService2Data)
            });
        let real_subdomain_1_with_mock_externals = SubDomainStruct1 {
            external_service_1: mock_external_service_1,
            external_service_2: mock_external_service_2,
        };
        let data = real_subdomain_1_with_mock_externals
            .sub_domain_1_method()
            .await?;
        assert_eq!(data, SubDomain1Data);
        Ok(())
    }
```


Check out the code in the repository for a working example.

Run the tests with 

` cargo test --features ssr `
and otherwise run
` cargo leptos serve `
and navigate to `127.0.0.1:3000`

here's a picture


![alt text](leptos_hexagonal_architecture.png)
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/hexagonal-architecture/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/session_auth_axum/README.md
# Leptos Authenticated Todo App Sqlite with Axum

This example creates a basic todo app with an Axum backend that uses Leptos' server functions to call sqlx from the client and seamlessly run it on the server. It lets you login, signup, and submit todos as different users, or a guest.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/session_auth_axum/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/login_with_token_csr_only/README.md
# Leptos Login Example

This example demonstrates a scenario of a client-side rendered application
that uses an existing API that you cannot or do not want to change.
The authentications of this example are done using an API token.

The `api-boundary` crate contains data structures that are used by the server and the client.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

You will also need to run `cargo make stop` to end the server process.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/login_with_token_csr_only/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/nginx-mpmc/README.md
# Nginx Multiple Server Multiple Client Example
This example shows how multiple clients can communicate with multiple servers while being shared over a single domain i.e localhost:80 using nginx as a reverse proxy.

### How to run this example
```sh
./run.sh 
```
Or

```sh
./run_linux.sh
```

<br>
This will boot up nginx via it's docker image mapped to port 80, and the four servers. App-1, App-2, Shared-Server-1, Shared-Server-2.
<br>
App-1, And App-2 are SSR rendering leptos servers.
<br>
If you go to localhost (you'll get App-1), and localhost/app2 (you'll get app2).
<br>
The two shared servers can be communicated with via actions and local resources, or resources (if using CSR).
<br>
`create_resource` Won't work as expected, when trying to communicate to different servers. It will instead try to run the server function on the server you are serving your server side rendered content from. This will cause errors if your server function relies on state that is not present.
<br>
When you are done with this example, run

```sh
./kill.sh
```

Casting ctrl-c multiple times won't close all the open programs.

## Thoughts, Feedback, Criticism, Comments?
Send me any of the above, I'm @sjud on leptos discord. I'm always looking to improve and make these projects more helpful for the community. So please let me know how I can do that. Thanks!
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/nginx-mpmc/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/nginx-mpmc/shared-server-1/README.md
<picture>
    <source srcset="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_Solid_White.svg" media="(prefers-color-scheme: dark)">
    <img src="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_RGB.svg" alt="Leptos Logo">
</picture>

# Leptos Axum Starter Template

This is a template for use with the [Leptos](https://github.com/leptos-rs/leptos) web framework and the [cargo-leptos](https://github.com/akesson/cargo-leptos) tool using [Axum](https://github.com/tokio-rs/axum).

## Creating your template repo

If you don't have `cargo-leptos` installed you can install it with

```bash
cargo install cargo-leptos
```

Then run
```bash
cargo leptos new --git leptos-rs/start-axum
```

to generate a new project template.

```bash
cd shared-server
```

to go to your newly created project.  
Feel free to explore the project structure, but the best place to start with your application code is in `src/app.rs`.  
Addtionally, Cargo.toml may need updating as new versions of the dependencies are released, especially if things are not working after a `cargo update`.

## Running your project

```bash
cargo leptos watch
```

## Installing Additional Tools

By default, `cargo-leptos` uses `nightly` Rust, `cargo-generate`, and `sass`. If you run into any trouble, you may need to install one or more of these tools.

1. `rustup toolchain install nightly --allow-downgrade` - make sure you have Rust nightly
2. `rustup target add wasm32-unknown-unknown` - add the ability to compile Rust to WebAssembly
3. `cargo install cargo-generate` - install `cargo-generate` binary (should be installed automatically in future)
4. `npm install -g sass` - install `dart-sass` (should be optional in future

## Compiling for Release
```bash
cargo leptos build --release
```

Will generate your server binary in target/server/release and your site package in target/site

## Testing Your Project
```bash
cargo leptos end-to-end
```

```bash
cargo leptos end-to-end --release
```

Cargo-leptos uses Playwright as the end-to-end test tool.  
Tests are located in end2end/tests directory.

## Executing a Server on a Remote Machine Without the Toolchain
After running a `cargo leptos build --release` the minimum files needed are:

1. The server binary located in `target/server/release`
2. The `site` directory and all files within located in `target/site`

Copy these files to your remote server. The directory structure should be:
```text
shared-server
site/
```
Set the following environment variables (updating for your project as needed):
```text
LEPTOS_OUTPUT_NAME="shared-server"
LEPTOS_SITE_ROOT="site"
LEPTOS_SITE_PKG_DIR="pkg"
LEPTOS_SITE_ADDR="127.0.0.1:3000"
LEPTOS_RELOAD_PORT="3001"
```
Finally, run the server binary.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/nginx-mpmc/shared-server-1/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/nginx-mpmc/app-1/README.md
<picture>
    <source srcset="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_Solid_White.svg" media="(prefers-color-scheme: dark)">
    <img src="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_RGB.svg" alt="Leptos Logo">
</picture>

# Leptos Axum Starter Template

This is a template for use with the [Leptos](https://github.com/leptos-rs/leptos) web framework and the [cargo-leptos](https://github.com/akesson/cargo-leptos) tool using [Axum](https://github.com/tokio-rs/axum).

## Creating your template repo

If you don't have `cargo-leptos` installed you can install it with

```bash
cargo install cargo-leptos
```

Then run
```bash
cargo leptos new --git leptos-rs/start-axum
```

to generate a new project template.

```bash
cd app-1
```

to go to your newly created project.  
Feel free to explore the project structure, but the best place to start with your application code is in `src/app.rs`.  
Addtionally, Cargo.toml may need updating as new versions of the dependencies are released, especially if things are not working after a `cargo update`.

## Running your project

```bash
cargo leptos watch
```

## Installing Additional Tools

By default, `cargo-leptos` uses `nightly` Rust, `cargo-generate`, and `sass`. If you run into any trouble, you may need to install one or more of these tools.

1. `rustup toolchain install nightly --allow-downgrade` - make sure you have Rust nightly
2. `rustup target add wasm32-unknown-unknown` - add the ability to compile Rust to WebAssembly
3. `cargo install cargo-generate` - install `cargo-generate` binary (should be installed automatically in future)
4. `npm install -g sass` - install `dart-sass` (should be optional in future

## Compiling for Release
```bash
cargo leptos build --release
```

Will generate your server binary in target/server/release and your site package in target/site

## Testing Your Project
```bash
cargo leptos end-to-end
```

```bash
cargo leptos end-to-end --release
```

Cargo-leptos uses Playwright as the end-to-end test tool.  
Tests are located in end2end/tests directory.

## Executing a Server on a Remote Machine Without the Toolchain
After running a `cargo leptos build --release` the minimum files needed are:

1. The server binary located in `target/server/release`
2. The `site` directory and all files within located in `target/site`

Copy these files to your remote server. The directory structure should be:
```text
app-1
site/
```
Set the following environment variables (updating for your project as needed):
```text
LEPTOS_OUTPUT_NAME="app-1"
LEPTOS_SITE_ROOT="site"
LEPTOS_SITE_PKG_DIR="pkg"
LEPTOS_SITE_ADDR="127.0.0.1:3000"
LEPTOS_RELOAD_PORT="3001"
```
Finally, run the server binary.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/nginx-mpmc/app-1/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/nginx-mpmc/shared-server-2/README.md
<picture>
    <source srcset="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_Solid_White.svg" media="(prefers-color-scheme: dark)">
    <img src="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_RGB.svg" alt="Leptos Logo">
</picture>

# Leptos Axum Starter Template

This is a template for use with the [Leptos](https://github.com/leptos-rs/leptos) web framework and the [cargo-leptos](https://github.com/akesson/cargo-leptos) tool using [Axum](https://github.com/tokio-rs/axum).

## Creating your template repo

If you don't have `cargo-leptos` installed you can install it with

```bash
cargo install cargo-leptos
```

Then run
```bash
cargo leptos new --git leptos-rs/start-axum
```

to generate a new project template.

```bash
cd shared-server
```

to go to your newly created project.  
Feel free to explore the project structure, but the best place to start with your application code is in `src/app.rs`.  
Addtionally, Cargo.toml may need updating as new versions of the dependencies are released, especially if things are not working after a `cargo update`.

## Running your project

```bash
cargo leptos watch
```

## Installing Additional Tools

By default, `cargo-leptos` uses `nightly` Rust, `cargo-generate`, and `sass`. If you run into any trouble, you may need to install one or more of these tools.

1. `rustup toolchain install nightly --allow-downgrade` - make sure you have Rust nightly
2. `rustup target add wasm32-unknown-unknown` - add the ability to compile Rust to WebAssembly
3. `cargo install cargo-generate` - install `cargo-generate` binary (should be installed automatically in future)
4. `npm install -g sass` - install `dart-sass` (should be optional in future

## Compiling for Release
```bash
cargo leptos build --release
```

Will generate your server binary in target/server/release and your site package in target/site

## Testing Your Project
```bash
cargo leptos end-to-end
```

```bash
cargo leptos end-to-end --release
```

Cargo-leptos uses Playwright as the end-to-end test tool.  
Tests are located in end2end/tests directory.

## Executing a Server on a Remote Machine Without the Toolchain
After running a `cargo leptos build --release` the minimum files needed are:

1. The server binary located in `target/server/release`
2. The `site` directory and all files within located in `target/site`

Copy these files to your remote server. The directory structure should be:
```text
shared-server
site/
```
Set the following environment variables (updating for your project as needed):
```text
LEPTOS_OUTPUT_NAME="shared-server"
LEPTOS_SITE_ROOT="site"
LEPTOS_SITE_PKG_DIR="pkg"
LEPTOS_SITE_ADDR="127.0.0.1:3000"
LEPTOS_RELOAD_PORT="3001"
```
Finally, run the server binary.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/nginx-mpmc/shared-server-2/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/nginx-mpmc/app-2/README.md
<picture>
    <source srcset="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_Solid_White.svg" media="(prefers-color-scheme: dark)">
    <img src="https://raw.githubusercontent.com/leptos-rs/leptos/main/docs/logos/Leptos_logo_RGB.svg" alt="Leptos Logo">
</picture>

# Leptos Axum Starter Template

This is a template for use with the [Leptos](https://github.com/leptos-rs/leptos) web framework and the [cargo-leptos](https://github.com/akesson/cargo-leptos) tool using [Axum](https://github.com/tokio-rs/axum).

## Creating your template repo

If you don't have `cargo-leptos` installed you can install it with

```bash
cargo install cargo-leptos
```

Then run
```bash
cargo leptos new --git leptos-rs/start-axum
```

to generate a new project template.

```bash
cd app-2
```

to go to your newly created project.  
Feel free to explore the project structure, but the best place to start with your application code is in `src/app.rs`.  
Addtionally, Cargo.toml may need updating as new versions of the dependencies are released, especially if things are not working after a `cargo update`.

## Running your project

```bash
cargo leptos watch
```

## Installing Additional Tools

By default, `cargo-leptos` uses `nightly` Rust, `cargo-generate`, and `sass`. If you run into any trouble, you may need to install one or more of these tools.

1. `rustup toolchain install nightly --allow-downgrade` - make sure you have Rust nightly
2. `rustup target add wasm32-unknown-unknown` - add the ability to compile Rust to WebAssembly
3. `cargo install cargo-generate` - install `cargo-generate` binary (should be installed automatically in future)
4. `npm install -g sass` - install `dart-sass` (should be optional in future

## Compiling for Release
```bash
cargo leptos build --release
```

Will generate your server binary in target/server/release and your site package in target/site

## Testing Your Project
```bash
cargo leptos end-to-end
```

```bash
cargo leptos end-to-end --release
```

Cargo-leptos uses Playwright as the end-to-end test tool.  
Tests are located in end2end/tests directory.

## Executing a Server on a Remote Machine Without the Toolchain
After running a `cargo leptos build --release` the minimum files needed are:

1. The server binary located in `target/server/release`
2. The `site` directory and all files within located in `target/site`

Copy these files to your remote server. The directory structure should be:
```text
app-2
site/
```
Set the following environment variables (updating for your project as needed):
```text
LEPTOS_OUTPUT_NAME="app-2"
LEPTOS_SITE_ROOT="site"
LEPTOS_SITE_PKG_DIR="pkg"
LEPTOS_SITE_ADDR="127.0.0.1:3000"
LEPTOS_RELOAD_PORT="3001"
```
Finally, run the server binary.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/nginx-mpmc/app-2/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/sso_auth_axum/README.md
# Leptos SSO Authenticated Email Display App with Axum

## Overview
This project demonstrates various methods of implementing Single Sign-On (SSO) authorization using OAuth, specifically with the OAuth2 library. The primary focus is on the Authorization Code Grant flow.

### Process Flow
1. **Initiating Sign-In:** When a user clicks the 'Sign In With {THIRD PARTY SERVICE}' button, the request is sent to a server function. This function retrieves an authorization URL from the third-party service.

2. **CSRF Token Handling:** During the URL fetch, a CSRF_TOKEN is generated and confirmed by the service to mitigate Cross-Site Request Forgery attacks. Learn more about CSRF [here](https://en.wikipedia.org/wiki/Cross-site_request_forgery). This token is stored on our server.

3. **User Redirection:** Post-login, users are redirected to our server with a URL formatted as follows:  
`http://your-redirect-uri.com/callback?code=AUTHORIZATION_CODE&state=CSRF_TOKEN`
Note: Additional parameters like Scope and Client_ID may be included by the service.

4. **Token Acquisition:** The 'code' parameter in the URL is not the actual service token. Instead, it's used to fetch the token. We verify the CSRF_TOKEN in the URL against our server's stored token for security.

5. **Access Token Usage:** With a valid CSRF_TOKEN, we use the AUTHORIZATION_CODE in an HTTP Request to the third-party service. The response typically includes:
- An `access token`
- An `expires_in` value (time in seconds until token expiration)
- A `refresh token` (used to renew the access token)

6. **Email Retrieval and Display:** The access token allows us to retrieve the user's email. This email is then displayed in our Email Display App.

7. **Session Management:** The `expires_in` value is sent to the client. The client uses this to set a timeout, ensuring that if the session is still active (the window hasn't been closed), it automatically triggers a token refresh when required.



## Client Side Rendering
This example cannot be built as a trunk standalone CSR-only app. Only the server may directly connect to the database.

## Server Side Rendering with cargo-leptos
cargo-leptos is now the easiest and most featureful way to build server side rendered apps with hydration. It provides automatic recompilation of client and server code, wasm optimisation, CSS minification, and more! Check out more about it [here](https://github.com/akesson/cargo-leptos)

## Env Vars
Commands that run the program, cargo leptos watch, cargo leptos serve, cargo run etc... All need the following Environment variables
G_AUTH_CLIENT_ID : This is the client ID given to you by google.
G_AUTH_SECRET : This is the secret given to you by google.
NGROK : this is the ngrok endpoint you get when you run ngrok http 3000

## Ngrok Google Set Up
After running your app, run
```bash
ngrok http 3000
```
Then use google api's and services, go to credentials, create credentials, add your app name, and use the ngrok url as the origin
and use the ngrok url with /g_auth as the redirect url. That will look like this `https://362b-24-34-20-189.ngrok-free.app/g_auth`
Save you client ID and secret given to you by google. Use them as Envars when you run the program as below
```bash
REDIRECT_URL={ngrok_redirect_url} G_AUTH_CLIENT_ID={google_credential_client_id} G_AUTH_SECRET={google_credential_secret} {your command here...}
```

1. Install cargo-leptos
```bash
cargo install --locked cargo-leptos
``` 
2. Build the site in watch mode, recompiling on file changes
```bash
cargo leptos watch
```

Open browser on [http://localhost:3000/](http://localhost:3000/)

3. When ready to deploy, run
```bash
cargo leptos build --release
```

## Server Side Rendering without cargo-leptos
To run it as a server side app with hydration, you'll need to have wasm-pack installed.

0. Edit the `[package.metadata.leptos]` section and set `site-root` to `"."`. You'll also want to change the path of the `<StyleSheet / >` component in the root component to point towards the CSS file in the root. This tells leptos that the WASM/JS files generated by wasm-pack are available at `./pkg` and that the CSS files are no longer processed by cargo-leptos. Building to alternative folders is not supported at this time. You'll also want to edit the call to `get_configuration()` to pass in `Some(Cargo.toml)`, so that Leptos will read the settings instead of cargo-leptos. If you do so, your file/folder names cannot include dashes.
1. Install wasm-pack
```bash
cargo install wasm-pack
```
2. Build the Webassembly used to hydrate the HTML from the server
```bash
wasm-pack build --target=web --debug --no-default-features --features=hydrate
```
3. Run the server to serve the Webassembly, JS, and HTML 
```bash
cargo run --no-default-features --features=ssr
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/sso_auth_axum/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/meilisearch-searchbar/README.md
# Meilisearch Searchbar

This show how to integrate meilisearch with a leptos app, including a search bar and showing the results to the user.
<br><br>
We'll run meilisearch locally, as opposed to using their cloud service.
<br><br>
To get started install meilisearch into this example's root.

```sh
curl -L https://install.meilisearch.com | sh
```

Run it.

```sh
./meilisearch
```

Then set the environment variable and serve the app. I've included the address of my own local meilisearch server.
I didn't provide a password to meilisearch during my setup, and I didn't provide one in my environment variables either.
```sh
MEILISEARCH_URL=http://localhost:7700 && cargo leptos serve
```

Navigate to 127.0.0.1:3000 and start typing in popular American company names. (Boeing, Pepsi, etc)

## Thoughts, Feedback, Criticism, Comments?
Send me any of the above, I'm @sjud on leptos discord. I'm always looking to improve and make these projects more helpful for the community. So please let me know how I can do that. Thanks!
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/meilisearch-searchbar/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/openapi-openai-api-swagger-ui/README.md
#OpenAPI Swagger-Ui OpenAI GPT

This example shows how to document server functions via OpenAPI schema generated using Utoipa and serve the swagger ui via /swagger-ui endpoint. More than that, this example shows how to take said OpenAPI spec and turn it into a function list to feed to OpenAI's chat completion endpoint to generate the JSON values to feed back into our server functions.

The example shows an input and if you tell it to do something that is covered, say hello, or generate a list of names it will do that. 

To use the AI part of this project provide your openAPI key in an environment variable when running cargo leptos.

```sh
OPENAI_API_KEY=my_secret_key cargo leptos serve
```


## Thoughts, Feedback, Criticism, Comments?
Send me any of the above, I'm @sjud on leptos discord. I'm always looking to improve and make these projects more helpful for the community. So please let me know how I can do that. Thanks!
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/openapi-openai-api-swagger-ui/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/tauri-from-scratch/README.md
# Tauri from scratch

This is a guide on how to build a leptos tauri project from scratch without using a template.

First

```sh
cargo new leptos_tauri_from_scratch
```

Then, make our two separate project folders. We need one for our actual app, _src-orig/_ and the other is required when using `cargo tauri`

```sh
mkdir src-orig && mkdir src-tauri
```

Delete the original src folder.

```sh
rm -r src
```

Rewrite the `Cargo.toml` file in our crate root to the following.

```toml
[workspace]
resolver = "2"
members = ["src-tauri", "src-orig"]

[profile.release]
codegen-units = 1
lto = true
```

We'll list our workspace members. `codegen-units = 1` and `lto = true` are good things to have for our eventual release, they make the wasm file smaller.

What we're going to do is use `cargo leptos` for building our SSR server and we'll call trunk from `cargo tauri` for building our CSR client that we bundle into our different apps.

Let's add a `Trunk.toml` file.

```toml
[build]
target = "./src-orig/index.html"

[watch]
ignore = ["./src-tauri"]
```

The target of `index.html` is what trunk uses to build the wasm and js files that we'll need for the bundling process when we call `cargo tauri build`. We'll get the resulting files in a `src-orig/dist` folder.

Create the `index.html` file

```sh
touch src-orig/index.html
```

Let's fill it with

```html
<!DOCTYPE html>
<html>
  <head>
    <link
      data-trunk
      rel="rust"
      data-wasm-opt="z"
      data-bin="leptos_tauri_from_scratch_bin"
    />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body></body>
</html>
```

This line

```html
<link
  data-trunk
  rel="rust"
  data-wasm-opt="z"
  data-bin="leptos_tauri_from_scratch_bin"
/>
```

Tells trunk we want to compile our wasm to be small with `opt="z"` and that our binary will be named `"leptos_tauri_from_scratch_bin"`.

We need to specify that our binary will be a different name than our project name because we are also going to get a wasm file from our library and if we don't use different names then `cargo tauri` will get confused.

More specifically two wasm artifacts will be generated, one for the lib and the other for the binary and it won't know which to use.

Create a favicon that we referenced.

```sh
mkdir public
curl https://raw.githubusercontent.com/leptos-rs/leptos/main/examples/counter/public/favicon.ico > public/favicon.ico
```

Let's create a tauri configuration file.

```sh
touch src-tauri/taur.conf.json
```

And drop this in there

```json
{
  "identifier": "leptos.chat.app",
  "productName": "leptos_tauri_from_scratch",
  "version": "0.1.0",
  "build": {
    "beforeDevCommand": "",
    "beforeBuildCommand": "trunk build --no-default-features -v --features \"csr\"",
    "devUrl": "http://127.0.0.1:3000",
    "frontendDist": "../dist"
  },
  "bundle": {
    "active": true,
    "category": "DeveloperTool",
    "copyright": "",
    "externalBin": [],
    "icon": ["icons/icon.png"],
    "longDescription": "",
    "macOS": {
      "entitlements": null,
      "exceptionDomain": "",
      "frameworks": [],
      "providerShortName": null,
      "signingIdentity": null
    },
    "resources": [],
    "shortDescription": "",
    "targets": "all",
    "windows": {
      "certificateThumbprint": null,
      "digestAlgorithm": "sha256",
      "timestampUrl": ""
    }
  },
  "app": {
    "security": {
      "csp": null
    },
    "windows": [
      {
        "fullscreen": false,
        "height": 800,
        "resizable": true,
        "title": "LeptosChatApp",
        "width": 1200
      }
    ]
  }
}
```

You can basically ignore all of this except for

```json
  "build": {
    "beforeDevCommand": "",
    "beforeBuildCommand": "trunk build --no-default-features -v --features \"csr\"",
    "devUrl": "http://127.0.0.1:3000",
    "frontendDist": "../dist"
  },
```

Let's look at

```json
    "beforeBuildCommand": "trunk build --no-default-features -v --features \"csr\"",
```

When we `cargo tauri build` this will run before hand. Trunk will run it's build process, using the index.html file in the src-orig that we specified in `Trunk.toml`.

We'll build a binary using only the CSR feature. This is important.

We are going to build an SSR app, and serve it over the internet but we are also going to build a tauri client for desktop and mobile using CSR.

It's going to make network requests to our server that is servering our app to browsers using SSR.

This is the best of both worlds, we get the SEO of SSR and other advantages while being able to use CSR to build our app for other platforms.

```json
    "devUrl": "http://127.0.0.1:3000",
    "frontendDist": "../dist"
```

Check <https://tauri.app/v1/api/config/#buildconfig> for what these do, but our before build command `trunk build` will build into a folder `src-orig/dist` which we reference here.

Let's add a `Cargo.toml`` to both of our packages.

```sh
touch src-tauri/Cargo.toml && touch src-orig/Cargo.toml
```

Let's change `src-tauri/Cargo.toml` to this.

```toml
[package]
name = "src_tauri"
version = "0.0.1"
edition = "2021"

[lib]
name = "app_lib"
path = "src/lib.rs"

[build-dependencies]
tauri-build = { version = "2.2.0", features = [] }

[dependencies]
log = "0.4.22"
serde = { version = "1.0", features = ["derive"] }
tauri = { version = "2.5.1", features = ["devtools"] }
tauri-plugin-http = "2.4.4"

[features]
#default = ["custom-protocol"]
custom-protocol = ["tauri/custom-protocol"]
```

To make use of `cargo tauri build` we need `tauri-build` and we also need a `build.rs`.

```sh
touch src-tauri/build.rs
```

And let's change that to

```rust
fn main() {
    tauri_build::build();
}
```

In our `src-orig/Cargo.toml` let's add.

```toml
[package]
name = "leptos_tauri_from_scratch"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["staticlib", "cdylib", "rlib"]

[[bin]]
name = "leptos_tauri_from_scratch_bin"
path = "./src/main.rs"

[dependencies]
axum = { version = "0.8.4", optional = true }
axum-macros = { version = "0.5.0", optional = true }
console_error_panic_hook = { version = "0.1.7", optional = true }
leptos = { git = "https://github.com/leptos-rs/leptos.git", rev = "v0.8.2" }
leptos_axum = { git = "https://github.com/leptos-rs/leptos.git", rev = "v0.8.2", optional = true }
leptos_meta = { git = "https://github.com/leptos-rs/leptos.git", rev = "v0.8.2", optional = true }
server_fn = { git = "https://github.com/leptos-rs/leptos.git", rev = "v0.8.2", optional = true }
tokio = { version = "1.45.1", features = ["rt-multi-thread"], optional = true }
tower = { version = "0.5.2", optional = true }
tower-http = { version = "0.5.2", features = ["fs", "cors"], optional = true }
wasm-bindgen = { version = "=0.2.100", optional = true }

[features]
csr = ["leptos/csr", "dep:server_fn"]
hydrate = [
  "leptos/hydrate",
  "dep:leptos_meta",
  "dep:console_error_panic_hook",
  "dep:wasm-bindgen"
]
ssr = [
  "dep:axum",
  "dep:axum-macros",
  "leptos/ssr",
  "dep:leptos_axum",
  "dep:leptos_meta",
  "leptos_meta/ssr",
  "dep:tower-http",
  "dep:tower",
  "dep:tokio",
]

[package.metadata.leptos]
bin-exe-name = "leptos_tauri_from_scratch_bin"
output-name = "leptos_tauri_from_scratch"
assets-dir = "../public"
site-pkg-dir = "pkg"
site-root = "target/site"
site-addr = "0.0.0.0:3000"
reload-port = 3001
browserquery = "defaults"
watch = false
env = "DEV"
bin-features = ["ssr"]
bin-default-features = false
lib-features = ["hydrate"]
lib-default-features = false
```

So this looks like a normal SSR leptos, except for our CSR, Hydrate, and SSR versions.

```toml
csr = ["leptos/csr", "dep:server_fn"]
hydrate = [
  "leptos/hydrate",
  "dep:leptos_meta",
  "dep:console_error_panic_hook",
  "dep:wasm-bindgen"
]
ssr = [
```

also our binary is specified and named

```toml
[[bin]]
name="leptos_tauri_from_scratch_bin"
path="./src/main.rs"
```

our lib is specified, but unnamed (it will default to the project name in cargo leptos and in cargo tauri). We need the different crate types for `cargo leptos serve` and `cargo tauri build`

```toml
[lib]
crate-type = ["staticlib", "cdylib", "rlib"]
```

We've added the override to our cargo leptos metadata.

```toml
[package.metadata.leptos]
bin-exe-name="leptos_tauri_from_scratch_bin"
```

Our tauri app is going to send server function calls to this address, this is where we'll serve our hydratable SSR client from.

```toml
site-addr = "0.0.0.0:3000"
```

Now let's create the `main.rs` that we reference in the `src-orig/Cargo.toml`

```sh
mkdir src-orig/src && touch src-orig/src/main.rs
```

and drop this in there...

```rust
#[cfg(feature = "ssr")]
#[tokio::main]
async fn main() {
    use axum::{
        body::Body,
        extract::{Request, State},
        response::IntoResponse,
        routing::get,
        Router,
    };
    use leptos::logging::log;
    use leptos::prelude::*;
    use leptos_axum::{generate_route_list, LeptosRoutes};
    use leptos_tauri_from_scratch::{
        app::{shell, App},
        fallback::file_and_error_handler,
    };
    use tower_http::cors::CorsLayer;

    let conf = get_configuration(None).unwrap();
    let addr = conf.leptos_options.site_addr;
    let leptos_options = conf.leptos_options;
    // Generate the list of routes in your Leptos App
    let routes = generate_route_list(App);

    #[derive(Clone, Debug, axum_macros::FromRef)]
    pub struct ServerState {
        pub options: LeptosOptions,
        pub routes: Vec<leptos_axum::AxumRouteListing>,
    }

    let state = ServerState {
        options: leptos_options,
        routes: routes.clone(),
    };

    pub async fn server_fn_handler(
        State(state): State<ServerState>,
        request: Request<Body>,
    ) -> impl IntoResponse {
        leptos_axum::handle_server_fns_with_context(
            move || {
                provide_context(state.clone());
            },
            request,
        )
        .await
        .into_response()
    }

    let cors = CorsLayer::new()
        .allow_methods([axum::http::Method::GET, axum::http::Method::POST])
        .allow_origin(
            // Allow requests from the Tauri app
            "tauri://localhost"
                .parse::<axum::http::HeaderValue>()
                .unwrap(),
        )
        .allow_headers(vec![
            axum::http::header::CONTENT_TYPE,
            axum::http::header::ACCEPT,
        ]);

    pub async fn leptos_routes_handler(
        State(state): State<ServerState>,
        req: Request<Body>,
    ) -> axum::response::Response {
        let leptos_options = state.options.clone();
        let handler = leptos_axum::render_route_with_context(
            state.routes.clone(),
            move || {
                provide_context("...");
            },
            move || shell(leptos_options.clone()),
        );
        handler(axum::extract::State(state), req)
            .await
            .into_response()
    }

    let app = Router::new()
        .route(
            "/api/{*fn_name}",
            get(server_fn_handler).post(server_fn_handler),
        )
        .layer(cors)
        .leptos_routes_with_handler(routes, get(leptos_routes_handler))
        .fallback(file_and_error_handler)
        .with_state(state);

    // run our app with hyper
    // `axum::Server` is a re-export of `hyper::Server`
    log!("listening on http://{}", &addr);
    let listener = tokio::net::TcpListener::bind(&addr).await.unwrap();
    axum::serve(listener, app.into_make_service())
        .await
        .unwrap();
}

#[cfg(feature = "csr")]
pub fn main() {
    server_fn::client::set_server_url("http://127.0.0.1:3000");
    leptos::mount::mount_to_body(leptos_tauri_from_scratch::app::App);
}
```

and the hydration at `src-orig/src/lib.rs`

```rust
pub mod app;
#[cfg(feature = "ssr")]
pub mod fallback;

#[cfg(feature = "hydrate")]
#[wasm_bindgen::prelude::wasm_bindgen]
pub fn hydrate() {
    console_error_panic_hook::set_once();
    leptos::mount::hydrate_body(app::App);
}
```

This is our three pronged binary.

When we run cargo leptos server, we're going to get a server that is what's under `#[cfg(feature="ssr")]`.

And our csr feature

```rust
#[cfg(feature = "csr")]
pub fn main() {
    server_fn::client::set_server_url("http://127.0.0.1:3000");
    leptos::mount::mount_to_body(leptos_tauri_from_scratch::app::App);
}
```

Here we're setting the server functions to use the url base that we access in our browser. I.e local host, on the port we specified in the leptos metadata.
Otherwise our tauri app will try to route server function network requests using it's own idea of what it's url is. Which is `tauri://localhost` on macOS, and something else on windows.

Since we are going to be getting API requests from different locations beside our server's domain let's set up CORS, if you don't do this your tauri apps won't be able to make server function calls because it will run into CORS erros.

```rust
        let cors = CorsLayer::new()
            .allow_methods([axum::http::Method::GET, axum::http::Method::POST])
            .allow_origin(
                "tauri://localhost"
                    .parse::<axum::http::HeaderValue>()
                    .unwrap(),
            )
            .allow_headers(vec![axum::http::header::CONTENT_TYPE]);
```

If you are on windows the origin of your app will be different than `tauri://localhost` and you'll need to figure that out, as well as if you deploy it to places that aren't your localhost!

Everything else is standard leptos, so let's fill in the fallback and the lib really quick.

```sh
touch src-orig/src/lib.rs && touch src-orig/src/fallback.rs
```

Let's dump this bog standard leptos code in the `src-orig/src/app.rs`

```rust
use leptos::prelude::*;

#[cfg(feature = "ssr")]
pub fn shell(options: LeptosOptions) -> impl IntoView {
    use leptos_meta::MetaTags;
    view! {
        <!DOCTYPE html>
        <html lang="en">
            <head>
                <meta charset="utf-8"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <AutoReload options=options.clone() />
                <HydrationScripts options/>
                <MetaTags/>
            </head>
            <body>
                <App/>
            </body>
        </html>
    }
}

#[server(endpoint = "hello_world")]
pub async fn hello_world_server() -> Result<String, ServerFnError> {
    Ok("Hey.".to_string())
}

#[component]
pub fn App() -> impl IntoView {
    let action = ServerAction::<HelloWorldServer>::new();
    let vals = RwSignal::new(String::new());
    Effect::new(move |_| {
        if let Some(resp) = action.value().get() {
            match resp {
                Ok(val) => vals.set(val),
                Err(err) => vals.set(format!("{err:?}")),
            }
        }
    });

    view! {
        <button
            on:click=move |_| {
                action.dispatch(HelloWorldServer{});
            }
        >"Hello world."</button>
        <br/><br/>
        <span>"Server says: "</span>
        {move || vals.get()}
    }
}
```

and add this to `src-org/src/fallback.rs`

```rust
use axum::{
    body::Body,
    extract::State,
    http::{Request, Response, StatusCode, Uri},
    response::{IntoResponse, Response as AxumResponse},
};
use leptos::{view, prelude::LeptosOptions};
use tower::ServiceExt;
use tower_http::services::ServeDir;

pub async fn file_and_error_handler(
    uri: Uri,
    State(options): State<LeptosOptions>,
    req: Request<Body>,
) -> AxumResponse {
    let root = options.site_root.clone();
    let res = get_static_file(uri.clone(), &root).await.unwrap();

    if res.status() == StatusCode::OK {
        res.into_response()
    } else {
        let handler = leptos_axum::render_app_to_stream(
            move || view! {404},
        );
        handler(req).await.into_response()
    }
}

async fn get_static_file(
    uri: Uri,
    root: &str,
) -> Result<Response<Body>, (StatusCode, String)> {
    let req = Request::builder()
        .uri(uri.clone())
        .body(Body::empty())
        .unwrap();
    match ServeDir::new(root).oneshot(req).await {
        Ok(res) => Ok(res.into_response()),
        Err(err) => Err((
            StatusCode::INTERNAL_SERVER_ERROR,
            format!("Something went wrong: {err}"),
        )),
    }
}
```

Let's fill in our `src-tauri/src/` folder.

```sh
mkdir src-tauri/src && touch src-tauri/src/main.rs && touch src-tauri/src/lib.rs
```

and drop this in `src-tauri/src/main.rs` This is standard tauri boilerplate.

```rust
// Prevents additional console window on Windows in release, DO NOT REMOVE!!
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

fn main() {
    app_lib::run();
}
```

and in `src-tauri/src/lib.rs`

```rust
use tauri::Manager;

#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
    tauri::Builder::default()
        .plugin(tauri_plugin_http::init())
        .setup(|app| {
            {
                let window = app.get_webview_window("main").unwrap();
                window.open_devtools();
            }
            Ok(())
        })
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
```

We're gonna open devtools right away to see what is going on in our app. We need the tauri_http_plugin to make http calls, and generate_context reads our `tauri.conf.json` in the package in which its run.

We need an icon folder and an icon to build.

```sh
mkdir src-tauri/icons
curl https://raw.githubusercontent.com/tauri-apps/tauri/dev/examples/.icons/128x128.png > src-tauri/icons/icon.png
```

set nightly

```sh
rustup override set nightly
```

Then run

```sh
cargo leptos serve
```

You should get something like

```sh
➜  lepto_tauri_from_scratch git:(main) ✗ cargo leptos serve
    Finished dev [unoptimized + debuginfo] target(s) in 0.60s
       Cargo finished cargo build --package=leptos_tauri_from_scratch --lib --target-dir=/Users/sam/Projects/lepto_tauri_from_scratch/target/front --target=wasm32-unknown-unknown --no-default-features --features=hydrate
       Front compiling WASM
    Finished dev [unoptimized + debuginfo] target(s) in 0.93s
       Cargo finished cargo build --package=leptos_tauri_from_scratch --bin=leptos_tauri_from_scratch_bin --no-default-features --features=ssr
     Serving at http://0.0.0.0:3000
listening on http://0.0.0.0:3000
```

Now open a new terminal and

```sh
cargo tauri build
```

> Install `tauri-cli` if you haven't already.

It'll build with csr before

```sh
Running beforeBuildCommand `trunk build --no-default-features -v --features "csr"`
```

and then you should have your app, I'm on macOS so here's what I get. It's for desktop.

```sh
 Compiling src_tauri v0.0.1 (/Users/sam/Projects/lepto_tauri_from_scratch/src-tauri)
    Finished release [optimized] target(s) in 2m 26s
    Bundling leptos_tauri_from_scratch.app (/Users/sam/Projects/lepto_tauri_from_scratch/target/release/bundle/macos/leptos_tauri_from_scratch.app)
    Bundling leptos_tauri_from_scratch_0.1.0_x64.dmg (/Users/sam/Projects/lepto_tauri_from_scratch/target/release/bundle/dmg/leptos_tauri_from_scratch_0.1.0_x64.dmg)
    Running bundle_dmg.sh
```

Open run it and voilá. Click hello world button and read "Hey" from the server.

## Thoughts, Feedback, Criticism, Comments?

Send me any of the above, I'm @sjud on leptos discord. I'm always looking to improve and make these projects more helpful for the community. So please let me know how I can do that. Thanks!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/tauri-from-scratch/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/counter_dwarf_debug/README.md
# Debugging Leptos Counter Example in Browser and VSCode

This example builds on the simple counter by adding breakpoints and single stepping the source code for debugging.  
Both within the browser and VSCode.  
This uses a new feature of wasm called Dwarf which is a form of source code mapping.

Note variable inspection during the breakpoints doesn't seem to work at this stage.

## Quick Start

  * Install the requirements below
  * Open this directory within visual studio code
  * Add a breakpoint to the code
  * Launch the example using the visual studio code debug launcher

## How This Works

### Html Changes

First we need to make a change to the index.html file

From this
```html
<link data-trunk rel="rust" data-wasm-opt="z"/>
```

To this
```html
<link data-trunk rel="rust" data-keep-debug="true" data-wasm-opt="z"/>
```

This instructs the rust `trunk` utility to pass a long an option to `wasm-bindgen` called `--keep-debug`  
This option bundles in a type of sourcemap into the built wasm file.  
Be aware that this will make the wasm file much larger.

### Browser Changes

Next we need to allow the browser to read the DWARF data from the wasm file.
For Chrome / Opera there's an extension here that needs to be installed.

  * https://chromewebstore.google.com/detail/cc++-devtools-support-dwa/pdcpmagijalfljmkmjngeonclgbbannb?pli=1

## Debugging within the Browser

Within the browser's dev console it should now be possible to view the rust source code and add breakpoints.

![Chrome Debug Image](./img/breakpoint1.png)

## Debugging within VSCode

Note this is still experimental, although I have managed to get breakpoints working under VSCode.  
So far I've only tried this within a windows environment.

In order to have the breakpoints land at the correct position.  
We need to install the following VSCode extension.

  * [WebAssembly DWARF Debugging](https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging)

Within the browser launch section under `launch.json` we need to set userDataDir to false in order for the DWARF browser extension to be loaded.
```json
  {
    "name": "Launch Browser Chrome",
    "request": "launch",
    "type": "chrome",
    "url": "http://localhost:8080",
    "webRoot": "${workspaceFolder}/dist",
    // Needed to keep the dwarf extension in the browser
    "userDataDir": false,
  },
```

Now we should be able to add breakpoints within visual studio code while debugging the rust wasm.

![Chrome Debug Image](./img/breakpoint2.png)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/counter_dwarf_debug/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/bevy3d_ui/README.md
# Bevy 3D UI Example

This example combines a leptos UI with a bevy 3D view.  
Bevy is a 3D game engine written in rust that can be compiled to web assembly by using the wgpu library.  
The wgpu library in turn can target the newer webgpu standard or the older webgl for web browsers.

In the case of a desktop application, if you wanted to use a styled ui via leptos and a 3d view via bevy
you could also combine this with tauri.  

## Quick Start

  * Run `trunk serve to run the example.
  * Browse to http://127.0.0.1:8080/

It's best to use a web browser with webgpu capability for best results such as Chrome or Opera.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/projects/bevy3d_ui/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/COMMON_BUGS.md
# Leptos Gotchas: Common Bugs

This document is intended as a running list of common issues, with example code and solutions.

## Reactivity

### Avoid writing to a signal from an effect

**Issue**: Sometimes you want to update a reactive signal in a way that depends on another signal.

```rust
let (a, set_a) = create_signal(0);
let (b, set_b) = create_signal(false);

create_effect(move |_| {
	if a() > 5 {
		set_b(true);
	}
});
```

This creates an inefficient chain of updates, and can easily lead to infinite loops in more complex applications.

**Solution**: Follow the rule, _What can be derived, should be derived._ In this case, this has the benefit of massively reducing the code size, too!

```rust
let (a, set_a) = create_signal(0);
let b = move || a () > 5;
```

### Nested signal updates/reads triggering panic

Sometimes you have nested signals: for example, hash-map that can change over time, each of whose values can also change over time:

```rust
#[component]
pub fn App() -> impl IntoView {
    let resources = create_rw_signal(HashMap::new());

    let update = move |id: usize| {
        resources.update(|resources| {
            resources
                .entry(id)
                .or_insert_with(|| create_rw_signal(0))
                .update(|amount| *amount += 1)
        })
    };

    view! {
        <div>
            <pre>{move || format!("{:#?}", resources.get().into_iter().map(|(id, resource)| (id, resource.get())).collect::<Vec<_>>())}</pre>
            <button on:click=move |_| update(1)>"+"</button>
        </div>
    }
}
```

Clicking the button twice will cause a panic, because of the nested signal _read_. Calling the `update` function on `resources` immediately takes out a mutable borrow on `resources`, then updates the `resource` signal—which re-runs the effect that reads from the signals, which tries to immutably access `resources` and panics. It's the nested update here which causes a problem, because the inner update triggers and effect that tries to read both signals while the outer is still updating.

You can fix this fairly easily by using the [`batch()`](https://docs.rs/leptos/latest/leptos/fn.batch.html) method:

```rust
    let update = move |id: usize| {
        batch(move || {
            resources.update(|resources| {
                resources
                    .entry(id)
                    .or_insert_with(|| create_rw_signal(0))
                    .update(|amount| *amount += 1)
            })
        });
    };
```

This delays running any effects until after both updates are made, preventing the conflict entirely without requiring any other restructuring.

## Templates and the DOM

### `<input value=...>` doesn't update or stops updating

Many DOM attributes can be updated either by setting an attribute on the DOM node, or by setting an object property directly on it. In general, `setAttribute()` stops working once the property has been set.

This means that in practice, attributes like `value` or `checked` on an `<input/>` element only update the _default_ value for the `<input/>`. If you want to reactively update the value, you should use `prop:value` instead to set the `value` property.

```rust
let (a, set_a) = create_signal("Starting value".to_string());
let on_input = move |ev| set_a(event_target_value(&ev));

view! {

	// ❌ reactivity doesn't work as expected: typing only updates the default
	//    of each input, so if you start typing in the second input, it won't
	//    update the first one
	<input value=a on:input=on_input />
	<input value=a on:input=on_input />
}
```

```rust
let (a, set_a) = create_signal("Starting value".to_string());
let on_input = move |ev| set_a(event_target_value(&ev));

view! {

	// ✅ works as intended by setting the value *property*
	<input prop:value=a on:input=on_input />
	<input prop:value=a on:input=on_input />
}
```

## Build configuration

### Cargo feature resolution in workspaces

A new [version](https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions) of Cargo's feature resolver was introduced for the 2021 edition of Rust.
For single crate projects it will select a resolver version based on the Rust edition in `Cargo.toml`. As there is no Rust edition present for `Cargo.toml` in a workspace, Cargo will default to the pre 2021 edition resolver.
This can cause issues resulting in non WASM compatible code being built for a WASM target. Seeing `mio` failing to build is often a sign that none WASM compatible code is being included in the build.

The resolver version can be set in the workspace `Cargo.toml` to remedy this issue.

```toml
[workspace]
members = ["member1", "member2"]
resolver = "2"
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/COMMON_BUGS.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/README.md
Перевод в процессе, книга скоро будет доступна
> Translation underway, book will be available soon
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/SUMMARY.md
# Оглавление

- [Вступление](./01_introduction.md)
- [Начало работы](./getting_started/README.md)
  - [Leptos DX](./getting_started/leptos_dx.md)
  - [Сообщество Leptos и leptos-* Крейты](./getting_started/community_crates.md)
- [Часть 1: Построение UI](./view/README.md)
  - [Простой компонент](./view/01_basic_component.md)
  - [Динамические атрибуты](./view/02_dynamic_attributes.md)
  - [Компоненты и свойства](./view/03_components.md)
  - [Итерирование](./view/04_iteration.md)
  - [Итерирование более сложных структур через `<For>`](./view/04b_iteration.md)
  - [Формы и поля ввода](./view/05_forms.md)
  - [Порядок выполнения](./view/06_control_flow.md)
  - [Обработка ошибок](./view/07_errors.md)
  - [Общение Родитель-Ребёнок в дереве компонентов](./view/08_parent_child.md)
  - [Передача Детей другим компонентам](./view/09_component_children.md)
  - [Без макросов: синтаксис билдера View](./view/builder.md)
- [Реактивность](./reactivity/README.md)
  - [Работа с сигналами](./reactivity/working_with_signals.md)
  - [Реагирование на изменения с помощью `create_effect`](./reactivity/14_create_effect.md)
  - [Примечание: Реактивность и функции](./reactivity/interlude_functions.md)
- [Тестирование](./testing.md)
- [Асинхронность](./async/README.md)
  - [Подгрузка данных с помощью ресурсов (Resource)](./async/10_resources.md)
  - [Ожидания (Suspense)](./async/11_suspense.md)
  - [Переходы (Transition)](./async/12_transition.md)
  - [Действия (Action)](./async/13_actions.md)
- [Примечание: Пробрасывание дочерних элементов](./interlude_projecting_children.md)
- [Управление глобальным состоянием](./15_global_state.md)
- [Маршрутизатор URL](./router/README.md)
  - [Определение `<Routes/>`](./router/16_routes.md)
  - [Вложенная маршрутизация](./router/17_nested_routing.md)
  - [Параметры в пути и в строке запроса](./router/18_params_and_queries.md)
  - [`<A/>`](./router/19_a.md)
  - [`<Form/>`](./router/20_form.md)
- [Примечание: Стили](./interlude_styling.md)
- [Метаданные](./metadata.md)
- [Рендеринг на стороне клиента (CSR): Заключение](./csr_wrapping_up.md)
- [Часть 2: Рендеринг на стороне сервера (SSR)](./ssr/README.md)
  - [`cargo-leptos`](./ssr/21_cargo_leptos.md)
  - [Жизненный цикл загрузки страницы](./ssr/22_life_cycle.md)
  - [Асинхронный рендеринг и режимы SSR](./ssr/23_ssr_modes.md)
  - [Баги возникающие при гидратации](./ssr/24_hydration_bugs.md)
- [Работа с сервером](./server/README.md)
  - [Серверные функции](./server/25_server_functions.md)
  - [Экстракторы](./server/26_extractors.md)
  - [Ответы и перенаправления](./server/27_response.md)
- [Постепенное улучшение и Изящная деградация](./progressive_enhancement/README.md)
  - [`<ActionForm/>`](./progressive_enhancement/action_form.md)
- [Развёртывание](./deployment/README.md)
  - [Оптимизация размера бинарника WASM](./deployment/binary_size.md)
- [Руководство: Острова](./islands.md)

- [Приложение: Как работает реактивная система?](./appendix_reactive_graph.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/SUMMARY.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/interlude_projecting_children.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/interlude_projecting_children.html">
<link rel="canonical" href="https://book.leptos.dev/interlude_projecting_children.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/interlude_projecting_children.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/01_introduction.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/">
<link rel="canonical" href="https://book.leptos.dev/">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/01_introduction.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/csr_wrapping_up.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/csr_wrapping_up.html">
<link rel="canonical" href="https://book.leptos.dev/csr_wrapping_up.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/csr_wrapping_up.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/testing.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/testing.html">
<link rel="canonical" href="https://book.leptos.dev/testing.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/testing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/interlude_styling.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/interlude_styling.html">
<link rel="canonical" href="https://book.leptos.dev/interlude_styling.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/interlude_styling.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/metadata.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/metadata.html">
<link rel="canonical" href="https://book.leptos.dev/metadata.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/metadata.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/islands.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/islands.html">
<link rel="canonical" href="https://book.leptos.dev/islands.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/islands.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/15_global_state.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/15_global_state.html">
<link rel="canonical" href="https://book.leptos.dev/15_global_state.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/15_global_state.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/appendix_reactive_graph.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/appendix_reactive_graph.html">
<link rel="canonical" href="https://book.leptos.dev/appendix_reactive_graph.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/appendix_reactive_graph.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/async/10_resources.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/async/10_resources.html">
<link rel="canonical" href="https://book.leptos.dev/async/10_resources.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/async/10_resources.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/async/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/async/index.html">
<link rel="canonical" href="https://book.leptos.dev/async/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/async/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/async/12_transition.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/async/12_transition.html">
<link rel="canonical" href="https://book.leptos.dev/async/12_transition.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/async/12_transition.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/async/13_actions.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/async/13_action.html">
<link rel="canonical" href="https://book.leptos.dev/async/13_action.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/async/13_actions.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/async/11_suspense.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/async/11_suspense.html">
<link rel="canonical" href="https://book.leptos.dev/async/11_suspense.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/async/11_suspense.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/server/27_response.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/server/27_response.html">
<link rel="canonical" href="https://book.leptos.dev/server/27_response.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/server/27_response.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/server/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/server/index.html">
<link rel="canonical" href="https://book.leptos.dev/server/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/server/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/server/26_extractors.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/server/26_extractors.html">
<link rel="canonical" href="https://book.leptos.dev/server/26_extractors.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/server/26_extractors.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/server/25_server_functions.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/server/25_server_functions.html">
<link rel="canonical" href="https://book.leptos.dev/server/25_server_functions.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/server/25_server_functions.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/ssr/21_cargo_leptos.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/ssr/21_cargo_leptos.html">
<link rel="canonical" href="https://book.leptos.dev/ssr/21_cargo_leptos.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/ssr/21_cargo_leptos.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/ssr/24_hydration_bugs.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/ssr/24_hydration_bugs.html">
<link rel="canonical" href="https://book.leptos.dev/ssr/24_hydration_bugs.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/ssr/24_hydration_bugs.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/ssr/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/ssr/index.html">
<link rel="canonical" href="https://book.leptos.dev/ssr/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/ssr/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/ssr/22_life_cycle.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/ssr/22_life_cycle.html">
<link rel="canonical" href="https://book.leptos.dev/ssr/22_life_cycle.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/ssr/22_life_cycle.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/ssr/23_ssr_modes.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/ssr/23_ssr_modes.html">
<link rel="canonical" href="https://book.leptos.dev/ssr/23_ssr_modes.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/ssr/23_ssr_modes.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/progressive_enhancement/action_form.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/progressive_enhancement/action_form.html">
<link rel="canonical" href="https://book.leptos.dev/progressive_enhancement/action_form.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/progressive_enhancement/action_form.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/progressive_enhancement/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/progressive_enhancement/index.html">
<link rel="canonical" href="https://book.leptos.dev/progressive_enhancement/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/progressive_enhancement/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/deployment/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/deployment/index.html">
<link rel="canonical" href="https://book.leptos.dev/deployment/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/deployment/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/deployment/binary_size.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/deployment/binary_size.html">
<link rel="canonical" href="https://book.leptos.dev/deployment/binary_size.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/deployment/binary_size.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/reactivity/14_create_effect.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/reactivity/14_create_effect.html">
<link rel="canonical" href="https://book.leptos.dev/reactivity/14_create_effect.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/reactivity/14_create_effect.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/reactivity/interlude_functions.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/reactivity/interlude_functions.html">
<link rel="canonical" href="https://book.leptos.dev/reactivity/interlude_functions.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/reactivity/interlude_functions.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/reactivity/working_with_signals.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/reactivity/working_with_signals.html">
<link rel="canonical" href="https://book.leptos.dev/reactivity/working_with_signals.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/reactivity/working_with_signals.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/reactivity/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/reactivity/index.html">
<link rel="canonical" href="https://book.leptos.dev/reactivity/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/reactivity/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/04b_iteration.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/04b_iteration.html">
<link rel="canonical" href="https://book.leptos.dev/view/04b_iteration.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/04b_iteration.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/05_forms.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/05_forms.html">
<link rel="canonical" href="https://book.leptos.dev/view/05_forms.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/05_forms.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/builder.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/builder.html">
<link rel="canonical" href="https://book.leptos.dev/view/builder.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/builder.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/07_errors.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/07_errors.html">
<link rel="canonical" href="https://book.leptos.dev/view/07_errors.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/07_errors.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/index.html">
<link rel="canonical" href="https://book.leptos.dev/view/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/02_dynamic_attributes.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/02_dynamic_attributes.html">
<link rel="canonical" href="https://book.leptos.dev/view/02_dynamic_attributes.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/02_dynamic_attributes.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/04_iteration.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/04_iteration.html">
<link rel="canonical" href="https://book.leptos.dev/view/04_iteration.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/04_iteration.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/06_control_flow.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/06_control_flow.html">
<link rel="canonical" href="https://book.leptos.dev/view/06_control_flow.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/06_control_flow.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/08_parent_child.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/08_parent_child.html">
<link rel="canonical" href="https://book.leptos.dev/view/08_parent_child.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/08_parent_child.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/01_basic_component.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/01_basic_component.html">
<link rel="canonical" href="https://book.leptos.dev/view/01_basic_component.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/01_basic_component.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/03_components.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/03_components.html">
<link rel="canonical" href="https://book.leptos.dev/view/03_components.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/03_components.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/09_component_children.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/09_component_children.html">
<link rel="canonical" href="https://book.leptos.dev/view/09_component_children.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/view/09_component_children.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/getting_started/leptos_dx.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/getting_started/leptos_dx.html">
<link rel="canonical" href="https://book.leptos.dev/getting_started/leptos_dx.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/getting_started/leptos_dx.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/getting_started/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/getting_started/index.html">
<link rel="canonical" href="https://book.leptos.dev/getting_started/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/getting_started/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/getting_started/community_crates.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/getting_started/community_crates.html">
<link rel="canonical" href="https://book.leptos.dev/getting_started/community_crates.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/getting_started/community_crates.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/18_params_and_queries.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/18_params_and_queries.html">
<link rel="canonical" href="https://book.leptos.dev/router/18_params_and_queries.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/18_params_and_queries.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/index.html">
<link rel="canonical" href="https://book.leptos.dev/router/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/20_form.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/20_form.html">
<link rel="canonical" href="https://book.leptos.dev/router/20_form.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/20_form.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/19_a.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/19_a.html">
<link rel="canonical" href="https://book.leptos.dev/router/19_a.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/19_a.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/16_routes.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/16_routes.html">
<link rel="canonical" href="https://book.leptos.dev/router/16_routes.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/16_routes.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/17_nested_routing.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/17_nested_routing.html">
<link rel="canonical" href="https://book.leptos.dev/router/17_nested_routing.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book_ru/src/router/17_nested_routing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/README.md
The Leptos book is now available at [https://book.leptos.dev](https://book.leptos.dev).

The source code for the book has moved to [https://github.com/leptos-rs/book](https://github.com/leptos-rs/book). Please open issues or make PRs in that repository.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/SUMMARY.md
# Summary

- [Introduction](./01_introduction.md)
- [Getting Started](./getting_started/README.md)
  - [Leptos DX](./getting_started/leptos_dx.md)
  - [The Leptos Community and leptos-* Crates](./getting_started/community_crates.md)
- [Part 1: Building User Interfaces](./view/README.md)
  - [A Basic Component](./view/01_basic_component.md)
  - [Dynamic Attributes](./view/02_dynamic_attributes.md)
  - [Components and Props](./view/03_components.md)
  - [Iteration](./view/04_iteration.md)
  - [Iterating over More Complex Data](./view/04b_iteration.md)
  - [Forms and Inputs](./view/05_forms.md)
  - [Control Flow](./view/06_control_flow.md)
  - [Error Handling](./view/07_errors.md)
  - [Parent-Child Communication](./view/08_parent_child.md)
  - [Passing Children to Components](./view/09_component_children.md)
  - [No Macros: The View Builder Syntax](./view/builder.md)
- [Reactivity](./reactivity/README.md)
  - [Working with Signals](./reactivity/working_with_signals.md)
  - [Responding to Changes with `create_effect`](./reactivity/14_create_effect.md)
  - [Interlude: Reactivity and Functions](./reactivity/interlude_functions.md)
- [Testing](./testing.md)
- [Async](./async/README.md)
  - [Loading Data with Resources](./async/10_resources.md)
  - [Suspense](./async/11_suspense.md)
  - [Transition](./async/12_transition.md)
  - [Actions](./async/13_actions.md)
- [Interlude: Projecting Children](./interlude_projecting_children.md)
- [Global State Management](./15_global_state.md)
- [Router](./router/README.md)
  - [Defining `<Routes/>`](./router/16_routes.md)
  - [Nested Routing](./router/17_nested_routing.md)
  - [Params and Queries](./router/18_params_and_queries.md)
  - [`<A/>`](./router/19_a.md)
  - [`<Form/>`](./router/20_form.md)
- [Interlude: Styling](./interlude_styling.md)
- [Metadata](./metadata.md)
- [Client-Side Rendering: Wrapping Up](./csr_wrapping_up.md)
- [Part 2: Server Side Rendering](./ssr/README.md)
  - [`cargo-leptos`](./ssr/21_cargo_leptos.md)
  - [The Life of a Page Load](./ssr/22_life_cycle.md)
  - [Async Rendering and SSR “Modes”](./ssr/23_ssr_modes.md)
  - [Hydration Bugs](./ssr/24_hydration_bugs.md)
- [Working with the Server](./server/README.md)
  - [Server Functions](./server/25_server_functions.md)
  - [Extractors](./server/26_extractors.md)
  - [Responses and Redirects](./server/27_response.md)
- [Progressive Enhancement and Graceful Degradation](./progressive_enhancement/README.md)
  - [`<ActionForm/>`s](./progressive_enhancement/action_form.md)
- [Deployment](./deployment/README.md)
  - [Optimizing WASM Binary Size](./deployment/binary_size.md)
- [Guide: Islands](./islands.md)

- [Appendix: How Does the Reactive System Work?](./appendix_reactive_graph.md)


-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/SUMMARY.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/interlude_projecting_children.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/interlude_projecting_children.html">
<link rel="canonical" href="https://book.leptos.dev/interlude_projecting_children.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/interlude_projecting_children.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/01_introduction.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/">
<link rel="canonical" href="https://book.leptos.dev/">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/01_introduction.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/csr_wrapping_up.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/csr_wrapping_up.html">
<link rel="canonical" href="https://book.leptos.dev/csr_wrapping_up.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/csr_wrapping_up.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/testing.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/testing.html">
<link rel="canonical" href="https://book.leptos.dev/testing.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/testing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/interlude_styling.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/interlude_styling.html">
<link rel="canonical" href="https://book.leptos.dev/interlude_styling.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/interlude_styling.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/metadata.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/metadata.html">
<link rel="canonical" href="https://book.leptos.dev/metadata.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/metadata.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/islands.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/islands.html">
<link rel="canonical" href="https://book.leptos.dev/islands.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/islands.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/15_global_state.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/15_global_state.html">
<link rel="canonical" href="https://book.leptos.dev/15_global_state.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/15_global_state.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/appendix_reactive_graph.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/appendix_reactive_graph.html">
<link rel="canonical" href="https://book.leptos.dev/appendix_reactive_graph.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/appendix_reactive_graph.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/async/10_resources.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/async/10_resources.html">
<link rel="canonical" href="https://book.leptos.dev/async/10_resources.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/async/10_resources.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/async/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/async/index.html">
<link rel="canonical" href="https://book.leptos.dev/async/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/async/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/async/12_transition.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/async/12_transition.html">
<link rel="canonical" href="https://book.leptos.dev/async/12_transition.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/async/12_transition.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/async/13_actions.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/async/13_action.html">
<link rel="canonical" href="https://book.leptos.dev/async/13_action.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/async/13_actions.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/async/11_suspense.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/async/11_suspense.html">
<link rel="canonical" href="https://book.leptos.dev/async/11_suspense.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/async/11_suspense.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/server/27_response.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/server/27_response.html">
<link rel="canonical" href="https://book.leptos.dev/server/27_response.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/server/27_response.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/server/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/server/index.html">
<link rel="canonical" href="https://book.leptos.dev/server/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/server/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/server/26_extractors.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/server/26_extractors.html">
<link rel="canonical" href="https://book.leptos.dev/server/26_extractors.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/server/26_extractors.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/server/25_server_functions.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/server/25_server_functions.html">
<link rel="canonical" href="https://book.leptos.dev/server/25_server_functions.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/server/25_server_functions.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/ssr/21_cargo_leptos.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/ssr/21_cargo_leptos.html">
<link rel="canonical" href="https://book.leptos.dev/ssr/21_cargo_leptos.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/ssr/21_cargo_leptos.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/ssr/24_hydration_bugs.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/ssr/24_hydration_bugs.html">
<link rel="canonical" href="https://book.leptos.dev/ssr/24_hydration_bugs.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/ssr/24_hydration_bugs.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/ssr/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/ssr/index.html">
<link rel="canonical" href="https://book.leptos.dev/ssr/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/ssr/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/ssr/22_life_cycle.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/ssr/22_life_cycle.html">
<link rel="canonical" href="https://book.leptos.dev/ssr/22_life_cycle.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/ssr/22_life_cycle.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/ssr/23_ssr_modes.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/ssr/23_ssr_modes.html">
<link rel="canonical" href="https://book.leptos.dev/ssr/23_ssr_modes.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/ssr/23_ssr_modes.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/progressive_enhancement/action_form.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/progressive_enhancement/action_form.html">
<link rel="canonical" href="https://book.leptos.dev/progressive_enhancement/action_form.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/progressive_enhancement/action_form.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/progressive_enhancement/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/progressive_enhancement/index.html">
<link rel="canonical" href="https://book.leptos.dev/progressive_enhancement/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/progressive_enhancement/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/deployment/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/deployment/index.html">
<link rel="canonical" href="https://book.leptos.dev/deployment/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/deployment/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/deployment/binary_size.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/deployment/binary_size.html">
<link rel="canonical" href="https://book.leptos.dev/deployment/binary_size.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/deployment/binary_size.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/reactivity/14_create_effect.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/reactivity/14_create_effect.html">
<link rel="canonical" href="https://book.leptos.dev/reactivity/14_create_effect.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/reactivity/14_create_effect.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/reactivity/interlude_functions.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/reactivity/interlude_functions.html">
<link rel="canonical" href="https://book.leptos.dev/reactivity/interlude_functions.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/reactivity/interlude_functions.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/reactivity/working_with_signals.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/reactivity/working_with_signals.html">
<link rel="canonical" href="https://book.leptos.dev/reactivity/working_with_signals.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/reactivity/working_with_signals.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/reactivity/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/reactivity/index.html">
<link rel="canonical" href="https://book.leptos.dev/reactivity/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/reactivity/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/04b_iteration.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/04b_iteration.html">
<link rel="canonical" href="https://book.leptos.dev/view/04b_iteration.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/04b_iteration.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/05_forms.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/05_forms.html">
<link rel="canonical" href="https://book.leptos.dev/view/05_forms.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/05_forms.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/builder.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/builder.html">
<link rel="canonical" href="https://book.leptos.dev/view/builder.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/builder.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/07_errors.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/07_errors.html">
<link rel="canonical" href="https://book.leptos.dev/view/07_errors.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/07_errors.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/index.html">
<link rel="canonical" href="https://book.leptos.dev/view/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/02_dynamic_attributes.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/02_dynamic_attributes.html">
<link rel="canonical" href="https://book.leptos.dev/view/02_dynamic_attributes.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/02_dynamic_attributes.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/04_iteration.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/04_iteration.html">
<link rel="canonical" href="https://book.leptos.dev/view/04_iteration.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/04_iteration.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/06_control_flow.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/06_control_flow.html">
<link rel="canonical" href="https://book.leptos.dev/view/06_control_flow.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/06_control_flow.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/08_parent_child.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/08_parent_child.html">
<link rel="canonical" href="https://book.leptos.dev/view/08_parent_child.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/08_parent_child.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/01_basic_component.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/01_basic_component.html">
<link rel="canonical" href="https://book.leptos.dev/view/01_basic_component.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/01_basic_component.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/03_components.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/03_components.html">
<link rel="canonical" href="https://book.leptos.dev/view/03_components.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/03_components.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/09_component_children.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/view/09_component_children.html">
<link rel="canonical" href="https://book.leptos.dev/view/09_component_children.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/view/09_component_children.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/getting_started/leptos_dx.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/getting_started/leptos_dx.html">
<link rel="canonical" href="https://book.leptos.dev/getting_started/leptos_dx.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/getting_started/leptos_dx.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/getting_started/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/getting_started/index.html">
<link rel="canonical" href="https://book.leptos.dev/getting_started/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/getting_started/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/getting_started/community_crates.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/getting_started/community_crates.html">
<link rel="canonical" href="https://book.leptos.dev/getting_started/community_crates.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/getting_started/community_crates.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/18_params_and_queries.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/18_params_and_queries.html">
<link rel="canonical" href="https://book.leptos.dev/router/18_params_and_queries.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/18_params_and_queries.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/README.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/index.html">
<link rel="canonical" href="https://book.leptos.dev/router/index.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/20_form.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/20_form.html">
<link rel="canonical" href="https://book.leptos.dev/router/20_form.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/20_form.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/19_a.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/19_a.html">
<link rel="canonical" href="https://book.leptos.dev/router/19_a.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/19_a.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/16_routes.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/16_routes.html">
<link rel="canonical" href="https://book.leptos.dev/router/16_routes.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/16_routes.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/17_nested_routing.md
<meta http-equiv="refresh" content="0; URL=https://book.leptos.dev/router/17_nested_routing.html">
<link rel="canonical" href="https://book.leptos.dev/router/17_nested_routing.html">

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/docs/book/src/router/17_nested_routing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/either_of/README.md
Utilities for working with enumerated types that contain one of `2..n` other types.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/either_of/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/oco/README.md
This module contains the `Oco` (Owned Clones Once) smart pointer,
which is used to store immutable references to values.
This is useful for storing, for example, strings.

Imagine this as an alternative to [`Cow`] with an additional, reference-counted
branch.

```rust
use oco_ref::Oco;
use std::sync::Arc;

let static_str = "foo";
let arc_str: Arc<str> = "bar".into();
let owned_str: String = "baz".into();

fn uses_oco(value: impl Into<Oco<'static, str>>) {
    let mut value = value.into();

    // ensures that the value is either a reference, or reference-counted
    // O(n) at worst
    let clone1 = value.clone_inplace();

    // these subsequent clones are O(1)
    let clone2 = value.clone();
    let clone3 = value.clone();
}

uses_oco(static_str);
uses_oco(arc_str);
uses_oco(owned_str);
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/oco/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/hydration_context/README.md
Isomorphic web applications that run on the server to render HTML, then add interactivity in
the client, need to accomplish two tasks:

1. Send HTML from the server, so that the client can "hydrate" it in the browser by adding
   event listeners and setting up other interactivity.
2. Send data that was loaded on the server to the client, so that the client "hydrates" with
   the same data with which the server rendered HTML.

This crate helps with the second part of this process. It provides a [`SharedContext`] type
that allows you to store data on the server, and then extract the same data in the client.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/hydration_context/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/reactive_stores/README.md
# Stores

Stores are a data structure for nested reactivity.

The [`reactive_graph`](https://crates.io/crates/reactive_graph) crate provides primitives for fine-grained reactivity
via signals, memos, and effects.

This crate extends that reactivity to support reactive access to nested structs, without the need to create nested signals.

Using the `#[derive(Store)]` macro on a struct creates a series of getters that allow accessing each field. Individual fields 
can then be read as if they were signals. Changes to parents will notify their children, but changing one sibling field will  
not notify any of the others, nor will it require diffing those sibling fields (unlike earlier solutions using memoized “slices”).

This is published for use with the Leptos framework but can be used in any scenario where `reactive_graph` is being used 
for reactivity.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/reactive_stores/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/SSR_NOTES.md
# Server Side Rendering

## Cargo Leptos

cargo-leptos is now the easiest and most featureful way to build server side rendered apps with hydration. It provides automatic recompilation of client and server code, wasm optimisation, CSS minification, and more! Check out more about it [here](https://github.com/akesson/cargo-leptos)

1. Install cargo-leptos

```bash
cargo install --locked cargo-leptos
```

2. Build the site in watch mode, recompiling on file changes

```bash
cargo leptos watch
```

Open browser on [http://localhost:3000/](http://localhost:3000/)

3. When ready to deploy, run

```bash
cargo leptos build --release
```

## WASM Pack

To run it as a server side app with hydration, you'll need to have wasm-pack installed.

0. Edit the `[package.metadata.leptos]` section and set `site-root` to `"."`. For examples with CSS you also want to change the path of the `<StyleSheet / >` component in the root component to point towards the CSS file in the root. This tells leptos that the WASM/JS files generated by wasm-pack are available at `./pkg` and that the CSS files are no longer processed by cargo-leptos. Building to alternative folders is not supported at this time. You'll also want to edit the call to `get_configuration()` to pass in `Some(Cargo.toml)`, so that Leptos will read the settings instead of cargo-leptos. If you do so, your file/folder names cannot include dashes.

1. Install wasm-pack

```bash
cargo install wasm-pack
```

2. Build the Webassembly used to hydrate the HTML from the server

```bash
wasm-pack build --target=web --debug --no-default-features --features=hydrate
```

3. Run the server to serve the Webassembly, JS, and HTML

```bash
cargo run --no-default-features --features=ssr
```

### Server Side Rendering With Hydration

To run it as a server side app with hydration, first you should run

```bash
wasm-pack build --target=web --debug --no-default-features --features=hydrate
```

to generate the WebAssembly to hydrate the HTML delivered from the server.

Then run the server with `cargo run` to serve the server side rendered HTML and the WASM bundle for hydration.

```bash
cargo run --no-default-features --features=ssr
```

> Note that if your hydration code changes, you will have to rerun the wasm-pack command above before running
> `cargo run`
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/SSR_NOTES.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/README.md
# Examples README

## Main Branch

The examples in this directory are all built and tested against the current `main` branch.

To the extent that new features have been released or breaking changes have been made since the previous release, the examples are compatible with the `main` branch and not the current release.

## Getting Started

The simplest way to get started with any example is to use the “quick start” command found in the README for each example. Most of the examples use either [`trunk`](https://trunkrs.dev/) (a simple build system and dev server for client-side-rendered apps) or [`cargo-leptos`](https://github.com/leptos-rs/cargo-leptos) (a build system for server-rendered and client-hydrated apps).

## Using Cargo Make

You can also run any of the examples using [`cargo-make`](https://github.com/sagiegurari/cargo-make). Note that this is completely optional. We use it for CI, and it can be convenient for running the examples, but is not required.

Follow these steps to get any example up and running.

1. `cd` to the example you want to run
2. Make sure `cargo-make` is installed (for example by running `cargo install cargo-make`)
3. Make sure `rustup target add wasm32-unknown-unknown` was executed for the currently selected toolchain.
4. Run `cargo make ci` to setup and test the example
5. Run `cargo make start` to run the example
6. Open the client URL in the console output (<http://127.0.0.1:8080> or <http://127.0.0.1:3000> by default)
7. Run `cargo make stop` to end any processes started by `cargo make start`.

Here are a few additional notes:

- Extendable custom task files are located in the [cargo-make](./cargo-make/) directory
- Running a task will automatically install `cargo` dependencies
- Each `Makefile.toml` file must extend the [cargo-make/main.toml](./cargo-make/main.toml) file
- [cargo-make](./cargo-make/) files that end in `*-test.toml` configure web testing strategies
- Run `cargo make test-report` to learn which examples have web tests

## Prerequisites

Example projects depend on the following tools. Please install them as needed.

- [Rust](https://www.rust-lang.org/)
- Nightly Rust
  - Run `rustup toolchain install nightly`
  - Run `rustup target add wasm32-unknown-unknown`
- [Cargo Make](https://sagiegurari.github.io/cargo-make/)
  - Run `cargo install --force cargo-make`
  - Setup a command alias like `alias cm='cargo make'` to reduce typing (**_Optional_**)
- [Trunk](https://github.com/thedodd/trunk)
  - Run `cargo install trunk`
- [Node Version Manager](https://github.com/nvm-sh/nvm/) (**_Optional_**)
- [Node.js](https://nodejs.org/)
- [pnpm](https://pnpm.io/) (**_Optional_**)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/directives/README.md
# Leptos Directives Example

This example showcases a basic leptos app that shows how to write and use directives.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/directives/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/hackernews_js_fetch/README.md
# Leptos Hacker News Example with Axum

This example uses the basic Hacker News example as its basis, but shows how to run the server side as WASM running in a JS environment. In this example, Deno is used as the runtime.

## Server Side Rendering with Deno

To run the Deno version, run

```bash
deno task build
deno task start
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/hackernews_js_fetch/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/counter_without_macros/README.md
# Leptos Counter Example

This example is the same like the `counter` but it's written without using macros and can be build with stable Rust.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/counter_without_macros/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite_csr/README.md
# Leptos Todo App Sqlite with CSR

This example shows how to combine client-side rendering with server functions, i.e., using server functions as a convenient way to create an ad hoc API, but without using server-side rendering and hydration.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## E2E Testing

See the [E2E README](./e2e/README.md) for more information about the testing strategy.

## Rendering

See the [SSR Notes](../SSR_NOTES.md) for more information about Server Side Rendering.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite_csr/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite_csr/e2e/README.md
# E2E Testing

This example demonstrates e2e testing with Rust using executable requirements.

## Testing Stack

|    |      Role      |  Description |
|---|---|---|
| [Cucumber](https://github.com/cucumber-rs/cucumber/tree/main) | Test Runner | Run [Gherkin](https://cucumber.io/docs/gherkin/reference/) specifications as Rust tests |
| [Fantoccini](https://github.com/jonhoo/fantoccini/tree/main) | Browser Client | Interact with web pages through WebDriver |
| [Cargo Leptos ](https://github.com/leptos-rs/cargo-leptos) | Build Tool |  Compile example and start the server and end-2-end tests |
| [chromedriver](https://chromedriver.chromium.org/downloads) | WebDriver | Provide WebDriver for Chrome

## Testing Organization

Testing is organized around what a user can do and see/not see. Test scenarios are grouped by the **user action** and the **object** of that action. This makes it easier to locate and reason about requirements.

Here is a brief overview of how things fit together.

```bash
features
└── {action}_{object}.feature   # Specify test scenarios
tests
├── fixtures
│   ├── action.rs               # Perform a user action (click, type, etc.)
│   ├── check.rs                # Assert what a user can see/not see
│   ├── find.rs                 # Query page elements
│   ├── mod.rs
│   └── world
│       ├── action_steps.rs     # Map Gherkin steps to user actions
│       ├── check_steps.rs      # Map Gherkin steps to user expectations
│       └── mod.rs
└── app_suite.rs                # Test main 
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite_csr/e2e/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/websocket/README.md
# Leptos WebSocket

This example creates a basic WebSocket echo app.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## E2E Testing

See the [E2E README](./e2e/README.md) for more information about the testing strategy.

## Rendering

See the [SSR Notes](../SSR_NOTES.md) for more information about Server Side Rendering.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/websocket/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/websocket/e2e/README.md
# E2E Testing

This example demonstrates e2e testing with Rust using executable requirements.

## Testing Stack

|    |      Role      |  Description |
|---|---|---|
| [Cucumber](https://github.com/cucumber-rs/cucumber/tree/main) | Test Runner | Run [Gherkin](https://cucumber.io/docs/gherkin/reference/) specifications as Rust tests |
| [Fantoccini](https://github.com/jonhoo/fantoccini/tree/main) | Browser Client | Interact with web pages through WebDriver |
| [Cargo Leptos ](https://github.com/leptos-rs/cargo-leptos) | Build Tool |  Compile example and start the server and end-2-end tests |
| [chromedriver](https://chromedriver.chromium.org/downloads) | WebDriver | Provide WebDriver for Chrome

## Testing Organization

Testing is organized around what a user can do and see/not see. Test scenarios are grouped by the **user action** and the **object** of that action. This makes it easier to locate and reason about requirements.

Here is a brief overview of how things fit together.

```bash
features
└── {action}_{object}.feature   # Specify test scenarios
tests
├── fixtures
│   ├── action.rs               # Perform a user action (click, type, etc.)
│   ├── check.rs                # Assert what a user can see/not see
│   ├── find.rs                 # Query page elements
│   ├── mod.rs
│   └── world
│       ├── action_steps.rs     # Map Gherkin steps to user actions
│       ├── check_steps.rs      # Map Gherkin steps to user expectations
│       └── mod.rs
└── app_suite.rs                # Test main 
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/websocket/e2e/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/hackernews/README.md
# Leptos Hacker News Example

This example creates a basic clone of the Hacker News site. It showcases Leptos' ability to create both a client-side rendered app, and a server side rendered app with hydration, in a single repository

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` or `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/hackernews/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/action-form-error-handling/README.md
# Action Form Error Handling Example

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Execute `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/action-form-error-handling/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/portal/README.md
# Leptos Portal Example

This example showcases a basic leptos app with a portal.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/portal/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/cf-worker/README.md
# How to Run

```bash
npx wrangler dev
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/cf-worker/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/counter_isomorphic/README.md
# Leptos Counter Isomorphic Example

This example demonstrates how to use a function isomorphically, to run a server side function from the browser and receive a result.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/counter_isomorphic/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/timer/README.md
# Leptos Timer Example

This example creates a simple timer based on `setInterval` in a client side rendered app with Rust and WASM.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/timer/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite_axum/README.md
# Leptos Todo App Sqlite with Axum

This example creates a basic todo app with an Axum backend that uses Leptos' server functions to call sqlx from the client and seamlessly run it on the server.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## E2E Testing

See the [E2E README](./e2e/README.md) for more information about the testing strategy.

## Rendering

See the [SSR Notes](../SSR_NOTES.md) for more information about Server Side Rendering.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite_axum/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite_axum/e2e/README.md
# E2E Testing

This example demonstrates e2e testing with Rust using executable requirements.

## Testing Stack

|    |      Role      |  Description |
|---|---|---|
| [Cucumber](https://github.com/cucumber-rs/cucumber/tree/main) | Test Runner | Run [Gherkin](https://cucumber.io/docs/gherkin/reference/) specifications as Rust tests |
| [Fantoccini](https://github.com/jonhoo/fantoccini/tree/main) | Browser Client | Interact with web pages through WebDriver |
| [Cargo Leptos ](https://github.com/leptos-rs/cargo-leptos) | Build Tool |  Compile example and start the server and end-2-end tests |
| [chromedriver](https://chromedriver.chromium.org/downloads) | WebDriver | Provide WebDriver for Chrome

## Testing Organization

Testing is organized around what a user can do and see/not see. Test scenarios are grouped by the **user action** and the **object** of that action. This makes it easier to locate and reason about requirements.

Here is a brief overview of how things fit together.

```bash
features
└── {action}_{object}.feature   # Specify test scenarios
tests
├── fixtures
│   ├── action.rs               # Perform a user action (click, type, etc.)
│   ├── check.rs                # Assert what a user can see/not see
│   ├── find.rs                 # Query page elements
│   ├── mod.rs
│   └── world
│       ├── action_steps.rs     # Map Gherkin steps to user actions
│       ├── check_steps.rs      # Map Gherkin steps to user expectations
│       └── mod.rs
└── app_suite.rs                # Test main 
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite_axum/e2e/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/js-framework-benchmark/README.md
# Leptos benchmark example

This example is adoptation of code from [js-framework-benchmark](https://github.com/krausest/js-framework-benchmark/tree/master/frameworks/keyed/leptos).
This example creates a large table with randomized entries, it also shows usage of `template` macro and `For` component.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/js-framework-benchmark/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/islands/README.md
# Leptos Todo App Sqlite with Axum

This example creates a basic todo app with an Axum backend that uses Leptos' server functions to call sqlx from the client and seamlessly run it on the server.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## E2E Testing

See the [E2E README](./e2e/README.md) for more information about the testing strategy.

## Rendering

See the [SSR Notes](../SSR_NOTES.md) for more information about Server Side Rendering.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/islands/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/stores/README.md
# Stores Example

This example shows how to use reactive stores, by building a client-side rendered TODO application.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/stores/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/spread/README.md
# Leptos Attribute and EventHandler spreading Example

This example creates a simple element in a client side rendered app with Rust and WASM!

Dynamic sets of attributes and event handler are spread onto the element with little effort.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/spread/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todomvc/README.md
# Leptos TodoMVC

This is a Leptos implementation of the TodoMVC example common to many frameworks. This is a relatively-simple application but shows off features like interaction between components and state management.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todomvc/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todomvc/node_modules/todomvc-common/readme.md
# todomvc-common

> Common TodoMVC utilities used by our apps


## Install

```
$ npm install todomvc-common
```


## License

MIT © [TasteJS](http://tastejs.com)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todomvc/node_modules/todomvc-common/readme.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todomvc/node_modules/todomvc-app-css/readme.md
# todomvc-app-css

> CSS for TodoMVC apps

![](screenshot.png)


## Install


```
$ npm install todomvc-app-css
```


## Getting started

```html
<link rel="stylesheet" href="node_modules/todomvc-app-css/index.css">
```

See the [TodoMVC app template](https://github.com/tastejs/todomvc-app-template).


## License

CC-BY-4.0 © [Sindre Sorhus](https://sindresorhus.com)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todomvc/node_modules/todomvc-app-css/readme.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/fetch/README.md
# Client Side Fetch

This example shows how to fetch data from the client in WebAssembly.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/fetch/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/tailwind_actix/README.md
# Leptos Starter Template

This is a template demonstrating how to integrate [TailwindCSS](https://tailwindcss.com/) with the [Leptos](https://github.com/leptos-rs/leptos) web framework and the [cargo-leptos](https://github.com/akesson/cargo-leptos) tool.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Tailwind

You can install Tailwind using `npm`:

```bash
npm install -D tailwindcss
```

If you'd rather not use `npm`, you can install the Tailwind binary [here](https://github.com/tailwindlabs/tailwindcss/releases).

## Setting up with VS Code and Additional Tools

If you're using VS Code, add the following to your `settings.json`

```json
  "emmet.includeLanguages": {
    "rust": "html",
    "*.rs": "html"
  },
  "tailwindCSS.includeLanguages": {
      "rust": "html",
      "*.rs": "html"
  },
  "files.associations": {
      "*.rs": "rust"
  },
  "editor.quickSuggestions": {
    "other": "on",
    "comments": "on",
    "strings": true
  },
  "css.validate": false,
```

Install [Tailwind CSS Intellisense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss).

Install [VS Browser](https://marketplace.visualstudio.com/items?itemName=Phu1237.vs-browser) extension (allows you to open a browser at the right window).

Allow vscode Ports forward: 3000, 3001.

### Attribution

Many thanks to GreatGreg for putting together this guide. You can find the original, with added details, [here](https://github.com/leptos-rs/leptos/discussions/125).

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/tailwind_actix/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/axum_js_ssr/README.md
# Leptos Axum JS SSR Example

This example shows the various ways that JavaScript may be included into
a Leptos application.  The intent is to demonstrate how this may be done
and how it may cause the application to fail in an unexpected manner if
done incorrectly.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/axum_js_ssr/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/axum_js_ssr/node_modules/@highlightjs/cdn-assets/README.md
# Highlight.js CDN Assets

**Note: this contains only a subset of files from the full package from NPM.**

[![install size](https://packagephobia.now.sh/badge?p=highlight.js)](https://packagephobia.now.sh/result?p=highlight.js)

**This package contains only the CDN build assets of highlight.js.**

This may be what you want if you'd like to install the pre-built distributable highlight.js client-side assets via NPM. If you're wanting to use highlight.js mainly on the server-side you likely want the [highlight.js][1] package instead.

To access these files via CDN:<br>
https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@latest/build/

**If you just want a single .js file with the common languages built-in:
<https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@latest/build/highlight.min.js>**

---

## Highlight.js

Highlight.js is a syntax highlighter written in JavaScript. It works in
the browser as well as on the server. It works with pretty much any
markup, doesn’t depend on any framework, and has automatic language
detection.

If you'd like to read the full README:<br>
<https://github.com/highlightjs/highlight.js/blob/main/README.md>

## License

Highlight.js is released under the BSD License. See [LICENSE][7] file
for details.

## Links

The official site for the library is at <https://highlightjs.org/>.

The Github project may be found at: <https://github.com/highlightjs/highlight.js>

Further in-depth documentation for the API and other topics is at
<http://highlightjs.readthedocs.io/>.

A list of the Core Team and contributors can be found in the [CONTRIBUTORS.md][8] file.

[1]: https://www.npmjs.com/package/highlight.js
[7]: https://github.com/highlightjs/highlight.js/blob/main/LICENSE
[8]: https://github.com/highlightjs/highlight.js/blob/main/CONTRIBUTORS.md

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/axum_js_ssr/node_modules/@highlightjs/cdn-assets/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/tailwind_axum/README.md
# Leptos with Axum + TailwindCSS Template

This is a template demonstrating how to integrate [TailwindCSS](https://tailwindcss.com/) with the [Leptos](https://github.com/leptos-rs/leptos) web framework, Axum server, and the [cargo-leptos](https://github.com/akesson/cargo-leptos) tool.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `cargo leptos watch` to run this example.

# Tailwind Migration

If you're updating from Tailwind 3 to Tailwind 4, it would be informative to view the [tailwind migration document](https://tailwindcss.com/docs/installation/tailwind-cli) as things have changed.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/tailwind_axum/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/parent_child/README.md
# Parent Child Example

This example highlights four different ways that child components can communicate with their parent:

1. `<ButtonA/>`: passing a WriteSignal as one of the child component props,
   for the child component to write into and the parent to read
2. `<ButtonB/>`: passing a closure as one of the child component props, for
   the child component to call
3. `<ButtonC/>`: adding a simple event listener on the child component itself
4. `<ButtonD/>`: providing a context that is used in the component (rather than prop drilling)

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/parent_child/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/tailwind_csr/README.md
# Leptos Starter Template

This is a template demonstrating how to integrate [TailwindCSS](https://tailwindcss.com/) with the [Leptos](https://github.com/leptos-rs/leptos) web framework and the [trunk](https://github.com/thedodd/trunk) tool.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Tailwind

`Trunk.toml` is configured to build the CSS automatically.

You can install Tailwind using `npm`:

```bash
npm install -D tailwindcss
```

If you'd rather not use `npm`, you can install the Tailwind binary [here](https://github.com/tailwindlabs/tailwindcss/releases).

## Setting up with VS Code and Additional Tools

If you're using VS Code, add the following to your `settings.json`

```json
  "emmet.includeLanguages": {
    "rust": "html",
    "*.rs": "html"
  },
  "tailwindCSS.includeLanguages": {
      "rust": "html",
      "*.rs": "html"
  },
  "files.associations": {
      "*.rs": "rust"
  },
  "editor.quickSuggestions": {
    "other": "on",
    "comments": "on",
    "strings": true
  },
  "css.validate": false,
```

Install [Tailwind CSS Intellisense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss).

Install [VS Browser](https://marketplace.visualstudio.com/items?itemName=Phu1237.vs-browser) extension (allows you to open a browser at the right window).

Allow vscode Ports forward: 3000, 3001.

### Attribution

Many thanks to GreatGreg for putting together this guide. You can find the original, with added details, [here](https://github.com/leptos-rs/leptos/discussions/125).

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/tailwind_csr/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/errors_axum/README.md
# Leptos Errors Demonstration with Axum

This example demonstrates how Leptos Errors can work with an Axum backend on a server.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/errors_axum/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/suspense_tests/README.md
# Suspense Test Example

This example demonstrates the `<Suspense/>` behavior.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Test Strategy

See the [E2E README](./e2e/README.md) to learn about the web testing strategy for this project.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/suspense_tests/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/suspense_tests/e2e/README.md
# E2E Testing

This example demonstrates e2e testing with Rust using executable requirements.

## Testing Stack

|    |      Role      |  Description |
|---|---|---|
| [Cucumber](https://github.com/cucumber-rs/cucumber/tree/main) | Test Runner | Run [Gherkin](https://cucumber.io/docs/gherkin/reference/) specifications as Rust tests |
| [Fantoccini](https://github.com/jonhoo/fantoccini/tree/main) | Browser Client | Interact with web pages through WebDriver |
| [Cargo Leptos](https://github.com/leptos-rs/cargo-leptos) | Build Tool |  Compile example and start the server and end-2-end tests |
| [chromedriver](https://chromedriver.chromium.org/downloads) | WebDriver | Provide WebDriver for Chrome |

## Testing Organization

Testing is organized around what a user can do and see/not see. Test scenarios are grouped by the **user action** and the **object** of that action. This makes it easier to locate and reason about requirements.

Here is a brief overview of how things fit together.

```bash
features
└── {action}_{object}.feature   # Specify test scenarios
tests
├── fixtures
│   ├── action.rs               # Perform a user action (click, type, etc.)
│   ├── check.rs                # Assert what a user can see/not see
│   ├── find.rs                 # Query page elements
│   ├── mod.rs
│   └── world
│       ├── action_steps.rs     # Map Gherkin steps to user actions
│       ├── check_steps.rs      # Map Gherkin steps to user expectations
│       └── mod.rs
└── app_suite.rs                # Test main 
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/suspense_tests/e2e/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/static_routing/README.md
# Static Routing Example

This example shows the static routing features, which can be used to generate the HTML content for some routes before a request.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/static_routing/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/static_routing/posts/post4.md
# My fourth post

Here is some content. It should regenerate the static page.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/static_routing/posts/post4.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/static_routing/posts/post1.md
# My first blog post

Having a blog is *fun*.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/static_routing/posts/post1.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/static_routing/posts/post2.md
# My second blog post

Coming up with content is hard.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/static_routing/posts/post2.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/static_routing/posts/post3.md
# My third blog post

Could I just have AI write this for me instead?

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/static_routing/posts/post3.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/counters/README.md
# Leptos Counters Example

This example showcases a basic leptos app with many counters. It is a good example of how to setup a basic reactive app with signals and effects, and how to interact with browser events.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/counters/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/islands_router/README.md
# Work in Progress

This example is something I wrote on a long layover in the Orlando airport in July. (It was really hot!)

It is the culmination of a couple years of thinking and working toward being able to do this, which you can see 
described pretty well in the pinned roadmap issue (#1830) and its discussion of different modes of client-side
routing when you use islands.

This uses *only* server rendering, with no actual islands, but still maintains client-side state across page navigations.
It does this by building on the fact that we now have a statically-typed view tree to do pretty smart updates with 
new HTML from the client, with extremely minimal diffing.

The demo itself works, but the feature that supports it is incomplete. A couple people have accidentally
used it and broken their applications in ways they don't understand, so I've renamed the feature to `dont-use-islands-router`.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/islands_router/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/counter/README.md
# Leptos Counter Example

This example creates a simple counter in a client side rendered app with Rust and WASM!

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/counter/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/hackernews_axum/README.md
# Leptos Hacker News Example with Axum

This example creates a basic clone of the Hacker News site. It showcases Leptos' ability to create both a client-side rendered app, and a server side rendered app with hydration, in a single repository. This repo differs from the main Hacker News example by using Axum as it's server.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` or `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/hackernews_axum/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/ssr_modes/README.md
# SSR Modes Example

This example shows the different "rendering modes" that can be used while server-side rendering an application.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Server-Side Rendering Modes

1. **Synchronous**: Serve an HTML shell that includes `fallback` for any `Suspense`. Load data on the client, replacing `fallback` once they're loaded.

   - _Pros_: App shell appears very quickly: great TTFB (time to first byte).
   - _Cons_: Resources load relatively slowly; you need to wait for JS + Wasm to load before even making a request.

2. **Out-of-order streaming**: Serve an HTML shell that includes `fallback` for any `Suspense`. Load data on the **server**, streaming it down to the client as it resolves, and streaming down HTML for `Suspense` nodes.

   - _Pros_: Combines the best of **synchronous** and **`async`**, with a very fast shell and resources that begin loading on the server.
   - _Cons_: Requires JS for suspended fragments to appear in correct order. Weaker meta tag support when it depends on data that's under suspense (has already streamed down `<head>`)

3. **In-order streaming**: Walk through the tree, returning HTML synchronously as in synchronous rendering and out-of-order streaming until you hit a `Suspense`. At that point, wait for all its data to load, then render it, then the rest of the tree.

   - _Pros_: Does not require JS for HTML to appear in correct order.
   - _Cons_: Loads the shell more slowly than out-of-order streaming or synchronous rendering because it needs to pause at every `Suspense`. Cannot begin hydration until the entire page has loaded, so earlier pieces
     of the page will not be interactive until the suspended chunks have loaded.

4. **`async`**: Load all resources on the server. Wait until all data are loaded, and render HTML in one sweep.
   - _Pros_: Better handling for meta tags (because you know async data even before you render the `<head>`). Faster complete load than **synchronous** because async resources begin loading on server.
   - _Cons_: Slower load time/TTFB: you need to wait for all async resources to load before displaying anything on the client.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/ssr_modes/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/regression/README.md
# Regression Tests

This example functions as a catch-all for all current and future regression
test cases that typically happens at integration.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/regression/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/regression/e2e/README.md
# E2E Testing

This example demonstrates e2e testing with Rust using executable requirements.

## Testing Stack

|    |      Role      |  Description |
|---|---|---|
| [Cucumber](https://github.com/cucumber-rs/cucumber/tree/main) | Test Runner | Run [Gherkin](https://cucumber.io/docs/gherkin/reference/) specifications as Rust tests |
| [Fantoccini](https://github.com/jonhoo/fantoccini/tree/main) | Browser Client | Interact with web pages through WebDriver |
| [Cargo Leptos](https://github.com/leptos-rs/cargo-leptos) | Build Tool |  Compile example and start the server and end-2-end tests |
| [chromedriver](https://chromedriver.chromium.org/downloads) | WebDriver | Provide WebDriver for Chrome |

## Testing Organization

Testing is organized around what a user can do and see/not see. Test scenarios are grouped by the **user action** and the **object** of that action. This makes it easier to locate and reason about requirements.

Here is a brief overview of how things fit together.

```bash
features
└── {action}_{object}.feature   # Specify test scenarios
tests
├── fixtures
│   ├── action.rs               # Perform a user action (click, type, etc.)
│   ├── check.rs                # Assert what a user can see/not see
│   ├── find.rs                 # Query page elements
│   ├── mod.rs
│   └── world
│       ├── action_steps.rs     # Map Gherkin steps to user actions
│       ├── check_steps.rs      # Map Gherkin steps to user expectations
│       └── mod.rs
└── app_suite.rs                # Test main
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/regression/e2e/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/hackernews_islands_axum/README.md
# Leptos Hacker News Example with Axum

This example creates a basic clone of the Hacker News site. It showcases Leptos' ability to:
- Create a client-side rendered app
- Create a server side rendered app with hydration
- Precompress static assets and bundle those in with the server binary

This repo differs from the main Hacker News example by using Axum as it's server, precompressing and embedding static assets into the binary, and dynamically compressing the generated HTML.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `cargo leptos watch --release -P` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/hackernews_islands_axum/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/slots/README.md
# Leptos `<Component slot/>` Example

This example shows how to use Slots in Leptos.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/slots/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite/README.md
# Leptos Todo App Sqlite

This example creates a basic todo app with an Actix backend that uses Leptos' server functions to call sqlx from the client and seamlessly run it on the server.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## E2E Testing

See the [E2E README](./e2e/README.md) for more information about the testing strategy.

## Rendering

See the [SSR Notes](../SSR_NOTES.md) for more information about Server Side Rendering.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite/e2e/README.md
# E2E Testing

This example demonstrates e2e testing with Rust using executable requirements.

## Testing Stack

|    |      Role      |  Description |
|---|---|---|
| [Cucumber](https://github.com/cucumber-rs/cucumber/tree/main) | Test Runner | Run [Gherkin](https://cucumber.io/docs/gherkin/reference/) specifications as Rust tests |
| [Fantoccini](https://github.com/jonhoo/fantoccini/tree/main) | Browser Client | Interact with web pages through WebDriver |
| [Cargo Leptos ](https://github.com/leptos-rs/cargo-leptos) | Build Tool |  Compile example and start the server and end-2-end tests |
| [chromedriver](https://chromedriver.chromium.org/downloads) | WebDriver | Provide WebDriver for Chrome

## Testing Organization

Testing is organized around what a user can do and see/not see. Test scenarios are grouped by the **user action** and the **object** of that action. This makes it easier to locate and reason about requirements.

Here is a brief overview of how things fit together.

```bash
features
└── {action}_{object}.feature   # Specify test scenarios
tests
├── fixtures
│   ├── action.rs               # Perform a user action (click, type, etc.)
│   ├── check.rs                # Assert what a user can see/not see
│   ├── find.rs                 # Query page elements
│   ├── mod.rs
│   └── world
│       ├── action_steps.rs     # Map Gherkin steps to user actions
│       ├── check_steps.rs      # Map Gherkin steps to user expectations
│       └── mod.rs
└── app_suite.rs                # Test main 
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/todo_app_sqlite/e2e/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/error_boundary/README.md
# Leptos `<ErrorBoundary/>` Example

This example shows how to handle basic errors using Leptos.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Testing

This project is configured to run start and stop of processes for integration tests without the use of Cargo Leptos or Node.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/error_boundary/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/ssr_modes_axum/README.md
# SSR Mode Axum Example

This example shows the different "rendering modes" that can be used while server-side rendering an application.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Server-Side Rendering Modes

1. **Synchronous**: Serve an HTML shell that includes `fallback` for any `Suspense`. Load data on the client, replacing `fallback` once they're loaded.

   - _Pros_: App shell appears very quickly: great TTFB (time to first byte).
   - _Cons_: Resources load relatively slowly; you need to wait for JS + Wasm to load before even making a request.

2. **Out-of-order streaming**: Serve an HTML shell that includes `fallback` for any `Suspense`. Load data on the **server**, streaming it down to the client as it resolves, and streaming down HTML for `Suspense` nodes.

   - _Pros_: Combines the best of **synchronous** and **`async`**, with a very fast shell and resources that begin loading on the server.
   - _Cons_: Requires JS for suspended fragments to appear in correct order. Weaker meta tag support when it depends on data that's under suspense (has already streamed down `<head>`)

3. **In-order streaming**: Walk through the tree, returning HTML synchronously as in synchronous rendering and out-of-order streaming until you hit a `Suspense`. At that point, wait for all its data to load, then render it, then the rest of the tree.

   - _Pros_: Does not require JS for HTML to appear in correct order.
   - _Cons_: Loads the shell more slowly than out-of-order streaming or synchronous rendering because it needs to pause at every `Suspense`. Cannot begin hydration until the entire page has loaded, so earlier pieces
     of the page will not be interactive until the suspended chunks have loaded.

4. **`async`**: Load all resources on the server. Wait until all data are loaded, and render HTML in one sweep.
   - _Pros_: Better handling for meta tags (because you know async data even before you render the `<head>`). Faster complete load than **synchronous** because async resources begin loading on server.
   - _Cons_: Slower load time/TTFB: you need to wait for all async resources to load before displaying anything on the client.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/ssr_modes_axum/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/server_fns_axum/README.md
# Leptos Todo App Sqlite with Axum

This example creates a basic todo app with an Axum backend that uses Leptos' server functions to call sqlx from the client and seamlessly run it on the server.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## E2E Testing

See the [E2E README](./e2e/README.md) for more information about the testing strategy.

## Rendering

See the [SSR Notes](../SSR_NOTES.md) for more information about Server Side Rendering.

## Quick Start

Run `cargo leptos watch` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/server_fns_axum/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/counter_url_query/README.md
# Leptos Query Counter Example

This example creates a simple counter whose state is persisted and synced in the url with query params.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/counter_url_query/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/router/README.md
# Leptos Router Example

This example demonstrates how Leptos’s router works for client side routing.

## Getting Started

See the [Examples README](../README.md) for setup and run instructions.

## Quick Start

Run `trunk serve --open` to run this example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/examples/router/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/.github/ISSUE_TEMPLATE/feature_request.md
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/.github/ISSUE_TEMPLATE/feature_request.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/.github/ISSUE_TEMPLATE/bug_report.md
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**Leptos Dependencies**

Please copy and paste the Leptos dependencies and features from your `Cargo.toml`.

For example:
```toml
leptos = { version = "0.3", features = ["serde"] }
leptos_axum = { version = "0.3", optional = true }
leptos_meta = { version = "0.3"}
leptos_router = { version = "0.3"}
```

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Next Steps**

- [ ] I will make a PR
- [ ] I would like to make a PR, but need help getting started
- [ ] I want someone else to take the time to fix this
- [ ] This is a low priority for me and is just shared for your information

**Additional context**
Add any other context about the problem here.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/.github/ISSUE_TEMPLATE/bug_report.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/reactive_graph/README.md
An implementation of a fine-grained reactive system.

Fine-grained reactivity is an approach to modeling the flow of data through an interactive
application by composing together three categories of reactive primitives:

1. **Signals**: atomic units of state, which can be directly mutated.
2. **Computations**: derived values, which cannot be mutated directly but update whenever the signals
   they depend on change. These include both synchronous and asynchronous derived values.
3. **Effects**: side effects that synchronize the reactive system with the non-reactive world
   outside it.

Signals and computations are "source" nodes in the reactive graph, because an observer can
subscribe to them to respond to changes in their values. Effects and computations are "subscriber"
nodes, because they can listen to changes in other values.

```rust
use reactive_graph::{
    computed::ArcMemo,
    effect::Effect,
    prelude::{Read, Set},
    signal::ArcRwSignal,
};

let count = ArcRwSignal::new(1);
let double_count = ArcMemo::new({
    let count = count.clone();
    move |_| *count.read() * 2
});

// the effect will run once initially
Effect::new(move |_| {
    println!("double_count = {}", *double_count.read());
});

// updating `count` will propagate changes to the dependencies,
// causing the effect to run again
count.set(2);
```

This reactivity is called "fine grained" because updating the value of a signal only affects
the effects and computations that depend on its value, without requiring any diffing or update
calculations for other values.

This model is especially suitable for building user interfaces, i.e., long-lived systems in
which changes can begin from many different entry points. It is not particularly useful in
"run-once" programs like a CLI.

## Design Principles and Assumptions

- **Effects are expensive.** The library is built on the assumption that the side effects
  (making a network request, rendering something to the DOM, writing to disk) are orders of
  magnitude more expensive than propagating signal updates. As a result, the algorithm is
  designed to avoid re-running side effects unnecessarily, and is willing to sacrifice a small
  amount of raw update speed to that goal.
- **Automatic dependency tracking.** Dependencies are not specified as a compile-time list, but
  tracked at runtime. This in turn enables **dynamic dependency tracking**: subscribers
  unsubscribe from their sources between runs, which means that a subscriber that contains a
  condition branch will not re-run when dependencies update that are only used in the inactive
  branch.
- **Asynchronous effect scheduling.** Effects are spawned as asynchronous tasks. This means
  that while updating a signal will immediately update its value, effects that depend on it
  will not run until the next "tick" of the async runtime. (This in turn means that the
  reactive system is _async runtime agnostic_: it can be used in the browser with
  `wasm-bindgen-futures`, in a native binary with `tokio`, in a GTK application with `glib`,
  etc.)

The reactive-graph algorithm used in this crate is based on that of
[Reactively](https://github.com/modderme123/reactively), as described
[in this article](https://dev.to/modderme123/super-charging-fine-grained-reactive-performance-47ph).

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/reactive_graph/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/any_spawner/README.md
This crate makes it easier to write asynchronous code that is executor-agnostic, by providing a
utility that can be used to spawn tasks in a variety of executors.

It only supports single executor per program, but that executor can be set at runtime, anywhere
in your crate (or an application that depends on it).

This can be extended to support any executor or runtime that supports spawning [`Future`]s.

This is a least common denominator implementation in many ways. Limitations include:

- setting an executor is a one-time, global action
- no "join handle" or other result is returned from the spawn
- the `Future` must output `()`

```rust
use any_spawner::Executor;

Executor::init_futures_executor()
    .expect("executor should only be initialized once");

// spawn a thread-safe Future
Executor::spawn(async { /* ... */ });

// spawn a Future that is !Send
Executor::spawn_local(async { /* ... */ });
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/any_spawner/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/or_poisoned/README.md
Provides a simple trait that unwraps the locks provide by [`std::sync::RwLock`].

In every case, this is the same as calling `.expect("lock poisoned")`. However, it
does not use `.unwrap()` or `.expect()`, which makes it easier to distinguish from
other forms of unwrapping when reading code.

```rust
use or_poisoned::OrPoisoned;
use std::sync::RwLock;

let lock = RwLock::new(String::from("Hello!"));

let read = lock.read().or_poisoned();
// this is identical to
let read = lock.read().unwrap();
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/or_poisoned/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/any_error/README.md
A utility library for wrapping arbitrary errors, and for “throwing” errors in a way
that can be caught by user-defined error hooks.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos/any_error/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/CHANGELOG.md
# `wasm-bindgen` Change Log
--------------------------------------------------------------------------------

## Unreleased

### Changed

* Deprecate async constructors.
  [#4402](https://github.com/rustwasm/wasm-bindgen/pull/4402)

--------------------------------------------------------------------------------

## [0.2.100](https://github.com/rustwasm/wasm-bindgen/compare/0.2.99...0.2.100)

Released 2025-01-12

### Added

* Add attributes to overwrite return (``unchecked_return_type`) and parameter types (`unchecked_param_type`), descriptions (`return_description` and `param_description`) as well as parameter names (`js_name`) for exported functions and methods. See the guide for more details.
  [#4394](https://github.com/rustwasm/wasm-bindgen/pull/4394)

* Add a `copy_to_uninit()` method to all `TypedArray`s. It takes `&mut [MaybeUninit<T>]` and returns `&mut [T]`.
  [#4340](https://github.com/rustwasm/wasm-bindgen/pull/4340)

* Add test coverage support for Node.js.
  [#4348](https://github.com/rustwasm/wasm-bindgen/pull/4348)

* Support importing memory and using `wasm_bindgen::module()` in Node.js.
  [#4349](https://github.com/rustwasm/wasm-bindgen/pull/4349)

* Add `--list`, `--ignored`, `--exact` and `--nocapture` to `wasm-bindgen-test-runner`, analogous to `cargo test`.
  [#4356](https://github.com/rustwasm/wasm-bindgen/pull/4356)

* Add bindings to `Date.to_locale_time_string_with_options`.
  [#4384](https://github.com/rustwasm/wasm-bindgen/pull/4384)

* `#[wasm_bindgen]` now correctly applies `#[cfg(...)]`s in `struct`s.
  [#4351](https://github.com/rustwasm/wasm-bindgen/pull/4351)

### Changed

* Optional parameters are now typed as `T | undefined | null` to reflect the actual JS behavior.
  [#4188](https://github.com/rustwasm/wasm-bindgen/pull/4188)

* Adding `getter`, `setter`, and `constructor` methods to enums now results in a compiler error. This was previously erroneously allowed and resulted in invalid JS code gen.
  [#4278](https://github.com/rustwasm/wasm-bindgen/pull/4278)

* Handle stuck and failed WebDriver processes when re-trying to start them.
  [#4340](https://github.com/rustwasm/wasm-bindgen/pull/4340)

* Align test output closer to native `cargo test`.
  [#4358](https://github.com/rustwasm/wasm-bindgen/pull/4358)

* Error if URL in `<WEBDRIVER>_REMOTE` can't be parsed instead of just ignoring it.
  [#4362](https://github.com/rustwasm/wasm-bindgen/pull/4362)

* Remove `WASM_BINDGEN_THREADS_MAX_MEMORY` and `WASM_BINDGEN_THREADS_STACK_SIZE`. The maximum memory size can be set via `-Clink-arg=--max-memory=<size>`. The stack size of a thread can be set when initializing the thread via the `default` function.
  [#4363](https://github.com/rustwasm/wasm-bindgen/pull/4363)

* `console.*()` calls in tests are now always intercepted by default. To show them use `--nocapture`. When shown they are always printed in-place instead of after test results, analogous to `cargo test`.
  [#4356](https://github.com/rustwasm/wasm-bindgen/pull/4356)

### Fixed

- Fixed using [JavaScript keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords) as identifiers not being handled correctly.
  [#4329](https://github.com/rustwasm/wasm-bindgen/pull/4329)

  - Using JS keywords as `struct` and `enum` names will now error at compile time, instead of causing invalid JS code gen.
  - Using JS keywords that are not valid to call or access properties on will now error at compile time, instead of causing invalid JS code gen if used as:
    1. The first part of a `js_namespace` on imports.
    2. The name of an imported type or constant if the type or constant does not have a `js_namespace` or `module` attribute.
    3. The name of an imported function if the function is not a method and does not have a `js_namespace` or `module` attribute.
  - Using JS keywords on imports in places other than the above will no longer cause the keywords to be escaped as `_{keyword}`.

* Fixed passing large arrays into Rust failing because of internal memory allocations invalidating the memory buffer.
  [#4353](https://github.com/rustwasm/wasm-bindgen/pull/4353)

* Pass along an `ignore` attribute to `unsupported` tests.
  [#4360](https://github.com/rustwasm/wasm-bindgen/pull/4360)

* Use OS provided temporary directory for tests instead of Cargo's `target` directory.
  [#4361](https://github.com/rustwasm/wasm-bindgen/pull/4361)

* Error if URL in `<WEBDRIVER>_REMOTE` can't be parsed.
  [#4362](https://github.com/rustwasm/wasm-bindgen/pull/4362)

* Internal functions are now removed instead of invalidly imported if they are unused.
  [#4366](https://github.com/rustwasm/wasm-bindgen/pull/4366)

* Fixed `no_std` support for all APIs in `web-sys`.
  [#4378](https://github.com/rustwasm/wasm-bindgen/pull/4378)

* Prevent generating duplicate exports for closure conversions.
  [#4380](https://github.com/rustwasm/wasm-bindgen/pull/4380)

--------------------------------------------------------------------------------

## [0.2.99](https://github.com/rustwasm/wasm-bindgen/compare/0.2.98...0.2.99)

Released 2024-12-07

### Fixed

- Mark `wasm-bindgen` v0.2.98 only compatible with `wasm-bindgen-cli` of the same version.
  [#4331](https://github.com/rustwasm/wasm-bindgen/pull/4331)

--------------------------------------------------------------------------------

## [0.2.98](https://github.com/rustwasm/wasm-bindgen/compare/0.2.97...0.2.98)

Released 2024-12-07

### Added

* Add support for compiling with `atomics` for Node.js.
  [#4318](https://github.com/rustwasm/wasm-bindgen/pull/4318)

* Add `WASM_BINDGEN_TEST_DRIVER_TIMEOUT` environment variable to control the timeout to start and connect to the test driver.
  [#4320](https://github.com/rustwasm/wasm-bindgen/pull/4320)

* Add support for number slices of type `MaybeUninit<T>`.
  [#4316](https://github.com/rustwasm/wasm-bindgen/pull/4316)

### Changed

* Remove `once_cell/critical-section` requirement for `no_std` with atomics.
  [#4322](https://github.com/rustwasm/wasm-bindgen/pull/4322)

* `static FOO: Option<T>` now returns `None` if undeclared in JS instead of throwing an error in JS.
  [#4319](https://github.com/rustwasm/wasm-bindgen/pull/4319)

### Fixed

* Fix macro-hygiene for calls to `std::thread_local!`.
  [#4315](https://github.com/rustwasm/wasm-bindgen/pull/4315)

* Fix feature resolver version 1 compatibility.
  [#4327](https://github.com/rustwasm/wasm-bindgen/pull/4327)

--------------------------------------------------------------------------------

## [0.2.97](https://github.com/rustwasm/wasm-bindgen/compare/0.2.96...0.2.97)

Released 2024-11-30

### Fixed

* Fixed `js-sys` and `wasm-bindgen-futures` relying on internal paths of `wasm-bindgen` that are not crate feature additive.
  [#4305](https://github.com/rustwasm/wasm-bindgen/pull/4305)

--------------------------------------------------------------------------------

## [0.2.96](https://github.com/rustwasm/wasm-bindgen/compare/0.2.95...0.2.96)

Released 2024-11-29

### Added

* Added support for the [`HTMLOrSVGElement`](https://html.spec.whatwg.org/#htmlorsvgelement) `mixin`, which is used for all interfaces deriving from `Element`.
  [#4143](https://github.com/rustwasm/wasm-bindgen/pull/4143)

* Added bindings for [MathMLElement](https://www.w3.org/TR/MathML3).
  [#4143](https://github.com/rustwasm/wasm-bindgen/pull/4143)

* Added JSDoc type annotations to C-style enums.
  [#4192](https://github.com/rustwasm/wasm-bindgen/pull/4192)

* Added support for C-style enums with negative discriminants.
  [#4204](https://github.com/rustwasm/wasm-bindgen/pull/4204)

* Added bindings for `MediaStreamTrack.getCapabilities`.
  [#4236](https://github.com/rustwasm/wasm-bindgen/pull/4236)

* Added WASM ABI support for `u128` and `i128`
  [#4222](https://github.com/rustwasm/wasm-bindgen/pull/4222)

* Added support for the `wasm32v1-none` target.
  [#4277](https://github.com/rustwasm/wasm-bindgen/pull/4277)

* Added support for `no_std` to `js-sys`, `web-sys`, `wasm-bindgen-futures` and `wasm-bindgen-test`.
  [#4277](https://github.com/rustwasm/wasm-bindgen/pull/4277)

* Added support for `no_std` to `link_to!`, `static_string` (via `thread_local_v2`) and `throw`.
  [#4277](https://github.com/rustwasm/wasm-bindgen/pull/4277)

* Added environment variables to configure tests: `WASM_BINDGEN_USE_BROWSER`, `WASM_BINDGEN_USE_DEDICATED_WORKER`, `WASM_BINDGEN_USE_SHARED_WORKER` `WASM_BINDGEN_USE_SERVICE_WORKER`, `WASM_BINDGEN_USE_DENO` and `WASM_BINDGEN_USE_NODE_EXPERIMENTAL`. The use of `wasm_bindgen_test_configure!` will overwrite any environment variable.
  [#4295](https://github.com/rustwasm/wasm-bindgen/pull/4295)

### Changed

* String enums now generate private TypeScript types but only if used.
  [#4174](https://github.com/rustwasm/wasm-bindgen/pull/4174)

* Remove unnecessary JSDoc type annotations from generated `.d.ts` files
  [#4187](https://github.com/rustwasm/wasm-bindgen/pull/4187)

* Deprecate `autofocus`, `tabIndex`, `focus()` and `blur()` bindings in favor of bindings on the inherited `Element` class.
  [#4143](https://github.com/rustwasm/wasm-bindgen/pull/4143)

* Optimized ABI performance for `Option<{i32,u32,isize,usize,f32,*const T,*mut T}>`.
  [#4183](https://github.com/rustwasm/wasm-bindgen/pull/4183)

* Deprecate `--reference-types` in favor of automatic target feature detection.
  [#4237](https://github.com/rustwasm/wasm-bindgen/pull/4237)

* `wasm-bindgen-test-runner` now tries to restart the WebDriver on failure, instead of spending its timeout period trying to connect to a non-existing WebDriver.
  [#4267](https://github.com/rustwasm/wasm-bindgen/pull/4267)

* Deprecated `#[wasm_bindgen(thread_local)]` in favor of `#[wasm_bindgen(thread_local_v2)]`, which creates a `wasm_bindgen::JsThreadLocal`. It is similar to `std::thread::LocalKey` but supports `no_std`.
  [#4277](https://github.com/rustwasm/wasm-bindgen/pull/4277)

* Updated the WebGPU API to the current draft as of 2024-11-22.
  [#4290](https://github.com/rustwasm/wasm-bindgen/pull/4290)

* Improved error messages for `self` arguments in invalid positions.
  [#4276](https://github.com/rustwasm/wasm-bindgen/pull/4276)

### Fixed

* Fixed methods with `self: &Self` consuming the object.
  [#4178](https://github.com/rustwasm/wasm-bindgen/pull/4178)

* Fixed unused string enums generating JS values.
  [#4193](https://github.com/rustwasm/wasm-bindgen/pull/4193)

* Fixed triggering lints in testing facilities.
  [#4195](https://github.com/rustwasm/wasm-bindgen/pull/4195)

* Fixed `#[should_panic]` not working with `#[wasm_bindgen_test(unsupported = ...)]`.
  [#4196](https://github.com/rustwasm/wasm-bindgen/pull/4196)

* Fixed potential `null` error when using `JsValue::as_debug_string()`.
  [#4192](https://github.com/rustwasm/wasm-bindgen/pull/4192)

* Fixed generated types when the getter and setter of a property have different types.
  [#4202](https://github.com/rustwasm/wasm-bindgen/pull/4202)

* Fixed generated types when a static getter/setter has the same name as an instance getter/setter.
  [#4202](https://github.com/rustwasm/wasm-bindgen/pull/4202)

* Fixed invalid TypeScript return types for multivalue signatures.
  [#4210](https://github.com/rustwasm/wasm-bindgen/pull/4210)

* Only emit `table.fill` instructions if the bulk-memory proposal is enabled.
  [#4237](https://github.com/rustwasm/wasm-bindgen/pull/4237)

* Fixed calls to `JsCast::instanceof()` not respecting JavaScript namespaces.
  [#4241](https://github.com/rustwasm/wasm-bindgen/pull/4241)

* Fixed imports for functions using `this` and late binding.
  [#4225](https://github.com/rustwasm/wasm-bindgen/pull/4225)

* Don't expose non-functioning implicit constructors to classes when none are provided.
  [#4282](https://github.com/rustwasm/wasm-bindgen/pull/4282)

--------------------------------------------------------------------------------

## [0.2.95](https://github.com/rustwasm/wasm-bindgen/compare/0.2.94...0.2.95)

Released 2024-10-10

### Added

* Added support for implicit discriminants in enums.
  [#4152](https://github.com/rustwasm/wasm-bindgen/pull/4152)

* Added support for `Self` in complex type expressions in methods.
  [#4155](https://github.com/rustwasm/wasm-bindgen/pull/4155)

### Changed

* String enums are no longer generate TypeScript types.
  [#4174](https://github.com/rustwasm/wasm-bindgen/pull/4174)

### Fixed

* Fixed generated setters from WebIDL interface attributes binding to wrong JS method names.
  [#4170](https://github.com/rustwasm/wasm-bindgen/pull/4170)

* Fix string enums showing up in JS documentation and TypeScript bindings without corresponding types.
  [#4175](https://github.com/rustwasm/wasm-bindgen/pull/4175)

--------------------------------------------------------------------------------

## [0.2.94](https://github.com/rustwasm/wasm-bindgen/compare/0.2.93...0.2.94) (YANKED)

Released 2024-10-09

### Added

* Added support for the WebAssembly `Tail Call` proposal.
  [#4111](https://github.com/rustwasm/wasm-bindgen/pull/4111)

* Add bindings for `RTCPeerConnection.setConfiguration(RTCConfiguration)` method.
  [#4105](https://github.com/rustwasm/wasm-bindgen/pull/4105)

* Add bindings to `RTCRtpTransceiverDirection.stopped`.
  [#4102](https://github.com/rustwasm/wasm-bindgen/pull/4102)

* Added experimental support for `Symbol.dispose` via `WASM_BINDGEN_EXPERIMENTAL_SYMBOL_DISPOSE`.
  [#4118](https://github.com/rustwasm/wasm-bindgen/pull/4118)

* Added bindings for the draft [WebRTC Encoded Transform](https://www.w3.org/TR/webrtc-encoded-transform) spec.
  [#4125](https://github.com/rustwasm/wasm-bindgen/pull/4125)

* Added `Debug` implementation to `JsError`.
  [#4136](https://github.com/rustwasm/wasm-bindgen/pull/4136)

* Added support for `js_name` and `skip_typescript` attributes for string enums.
  [#4147](https://github.com/rustwasm/wasm-bindgen/pull/4147)

* Added `unsupported` crate to `wasm_bindgen_test(unsupported = test)` as a way of running tests on non-Wasm targets as well.
  [#4150](https://github.com/rustwasm/wasm-bindgen/pull/4150)

* Added additional bindings for methods taking buffer view types (e.g. `&[u8]`) with corresponding JS types (e.g. `Uint8Array`).
  [#4156](https://github.com/rustwasm/wasm-bindgen/pull/4156)

* Added additional bindings for setters from WebIDL interface attributes with applicaple parameter types of just `JsValue`.
  [#4156](https://github.com/rustwasm/wasm-bindgen/pull/4156)

### Changed

* Implicitly enable reference type and multivalue transformations if the module already makes use of the corresponding target features.
  [#4133](https://github.com/rustwasm/wasm-bindgen/pull/4133)

* Updated Gamepad API.
  [#4134](https://github.com/rustwasm/wasm-bindgen/pull/4134)

* Deprecated `Gamepad::display_id` and `GamepadHapticActuator::type_`.
  [#4134](https://github.com/rustwasm/wasm-bindgen/pull/4134)

* Removed `GamepadAxisMoveEvent`, `GamepadAxisMoveEventInit`, `GamepadButtonEvent`, `GamepadButtonEventInit` and `GamepadServiceTest`, which were seemingly never implemented by any JS environment.
  [#4134](https://github.com/rustwasm/wasm-bindgen/pull/4134)

* Changed `TextDecoder.decode()` `input` parameter type from `&mut [u8]` to `&[u8]`.
  [#4141](https://github.com/rustwasm/wasm-bindgen/pull/4141)

* Updated the WebGPU API to the current draft as of 2024-10-07.
  [#4145](https://github.com/rustwasm/wasm-bindgen/pull/4145)

* Deprecated generated setters from WebIDL interface attribute taking `JsValue` in favor of newer bindings with specific parameter types.
  [#4156](https://github.com/rustwasm/wasm-bindgen/pull/4156)

### Fixed

* Fixed linked modules emitting snippet files when not using `--split-linked-modules`.
  [#4066](https://github.com/rustwasm/wasm-bindgen/pull/4066)

* Fixed incorrect deprecation warning when passing no parameter into `default()` (`init()`) or `initSync()`.
  [#4074](https://github.com/rustwasm/wasm-bindgen/pull/4074)

* Fixed many proc-macro generated `impl` blocks missing `#[automatically_derived]`, affecting test coverage.
  [#4078](https://github.com/rustwasm/wasm-bindgen/pull/4078)

* Fixed negative `BigInt` values being incorrectly formatted with two minus signs.
  [#4082](https://github.com/rustwasm/wasm-bindgen/pull/4082)
  [#4088](https://github.com/rustwasm/wasm-bindgen/pull/4088)

* Fixed emitted `package.json` structure to correctly specify its dependencies
  [#4091](https://github.com/rustwasm/wasm-bindgen/pull/4091)

* Fixed returning `Option<Enum>` now correctly has the `| undefined` type in TS bindings.
  [#4137](https://github.com/rustwasm/wasm-bindgen/pull/4137)

* Fixed enum variant name collisions with object prototype fields.
  [#4137](https://github.com/rustwasm/wasm-bindgen/pull/4137)

* Fixed multiline doc comment alignment and remove empty ones entirely.
  [#4135](https://github.com/rustwasm/wasm-bindgen/pull/4135)

* Fixed `experimental-nodejs-module` target when used with `#[wasm_bindgen(start)]`.
  [#4093](https://github.com/rustwasm/wasm-bindgen/pull/4093)

* Fixed error when importing very large JS files.
  [#4146](https://github.com/rustwasm/wasm-bindgen/pull/4146)

* Specify `"type": "module"` when deploying to nodejs-module
  [#4092](https://github.com/rustwasm/wasm-bindgen/pull/4092)

* Fixed string enums not generating TypeScript types.
  [#4147](https://github.com/rustwasm/wasm-bindgen/pull/4147)

* Bindings that take buffer view types (e.g. `&[u8]`) as parameters will now correctly return a `Result` when they might not support a backing `SharedArrayBuffer`. This only applies to new and unstable APIs, which won't cause a breaking in the API.
  [#4156](https://github.com/rustwasm/wasm-bindgen/pull/4156)

--------------------------------------------------------------------------------

## [0.2.93](https://github.com/rustwasm/wasm-bindgen/compare/0.2.92...0.2.93)

Released 2024-08-13

### Added

* Allow exporting functions named `default`. Throw error in wasm-bindgen-cli if --target web and
  an exported symbol is named `default`.
  [#3930](https://github.com/rustwasm/wasm-bindgen/pull/3930)

* Added support for arbitrary expressions when using `#[wasm_bindgen(typescript_custom_section)]`.
  [#3901](https://github.com/rustwasm/wasm-bindgen/pull/3901)

* Implement `From<NonNull<T>>` for `JsValue`.
  [#3877](https://github.com/rustwasm/wasm-bindgen/pull/3877)

* Add method `copy_within` for TypedArray, add methods `find_last`,`find_last_index` for Array.
  [#3888](https://github.com/rustwasm/wasm-bindgen/pull/3888)

* Added support for returning `Vec`s from async functions.
  [#3630](https://github.com/rustwasm/wasm-bindgen/pull/3630)

* Added bindings for `InputDeviceInfo` and `MediaTrackCapabilities`.
  [#3935](https://github.com/rustwasm/wasm-bindgen/pull/3935)

* Add bindings for `RTCRtpReceiver.getCapabilities(DOMString)` method.
  [#3941](https://github.com/rustwasm/wasm-bindgen/pull/3941)

* Add bindings for `VisualViewport`.
  [#3931](https://github.com/rustwasm/wasm-bindgen/pull/3931)

* Add bindings for `queueMicrotask`.
  [#3981](https://github.com/rustwasm/wasm-bindgen/pull/3981)

* Add experimental bindings for User Agent Client Hints API
  [#3989](https://github.com/rustwasm/wasm-bindgen/pull/3989)

* Add bindings for `FocusOptions`.
  [#3996](https://github.com/rustwasm/wasm-bindgen/pull/3996)

* Add bindings for `RTCRtpReceiver.jitterBufferTarget`.
  [#3968](https://github.com/rustwasm/wasm-bindgen/pull/3968)

* Generate getters for all WebIDL dictionary types.
  [#3993](https://github.com/rustwasm/wasm-bindgen/pull/3993)

* Support for iterable in WebIDL. Gives `entries`, `keys`, `values` methods for regular and asynchronous, as well as `for_each` for regular, iterables.
  [#3962](https://github.com/rustwasm/wasm-bindgen/pull/3962)

* Add bindings for `HTMLTableCellElement.abbr` and `scope` properties.
  [#3972](https://github.com/rustwasm/wasm-bindgen/pull/3972)

* Add WebIDL definitions relating to `Popover API`.
  [#3977](https://github.com/rustwasm/wasm-bindgen/pull/3977)

* Added the `thread_stack_size` property to the object parameter of `default()` (`init()`) and `initSync()`, making it possible to set the stack size of spawned threads. `__wbindgen_thread_destroy()` now has a third optional parameter for the stack size, the default stack size is assumed when not passing it. When calling from the thread to be destroyed, by passing no parameters, the correct stack size is determined internally.
  [#3995](https://github.com/rustwasm/wasm-bindgen/pull/3995)

* Added bindings to the Device Memory API.
  [#4011](https://github.com/rustwasm/wasm-bindgen/pull/4011)

* Added support for WebIDL records. This added new methods to various APIs, notably `ClipboardItem()`, `GPUDeviceDescriptor.requiredLimits` and `Header()`.
  [#4030](https://github.com/rustwasm/wasm-bindgen/pull/4030)

* Added an official MSRV policy. Library MSRV changes will be accompanied by a minor version bump. CLI tool MSRV can change with any version bump.
  [#4038](https://github.com/rustwasm/wasm-bindgen/pull/4038)

* Added bindings to `NavigatorOptions.vibrate`.
  [#4041](https://github.com/rustwasm/wasm-bindgen/pull/4041)

* Added an experimental Node.JS ES module target, in comparison the current `node` target uses CommonJS, with `--target experimental-nodejs-module` or when testing with `wasm_bindgen_test_configure!(run_in_node_experimental)`.
  [#4027](https://github.com/rustwasm/wasm-bindgen/pull/4027)

* Added importing strings as `JsString` through `#[wasm_bindgen(thread_local, static_string)] static STRING: JsString = "a string literal";`.
  [#4055](https://github.com/rustwasm/wasm-bindgen/pull/4055)

* Added experimental test coverage support for `wasm-bindgen-test-runner`, see the guide for more information.
  [#4060](https://github.com/rustwasm/wasm-bindgen/pull/4060)

### Changed

* Stabilize Web Share API.
  [#3882](https://github.com/rustwasm/wasm-bindgen/pull/3882)

* Generate JS bindings for WebIDL dictionary setters instead of using `Reflect`. This increases the size of the Web API bindings but should be more performant. Also, importing getters/setters from JS now supports specifying the JS attribute name as a string, e.g. `#[wasm_bindgen(method, setter = "x-cdm-codecs")]`.
  [#3898](https://github.com/rustwasm/wasm-bindgen/pull/3898)

* Greatly improve the performance of sending WebIDL 'string enums' across the JavaScript boundary by converting the enum variant string to/from an int.
  [#3915](https://github.com/rustwasm/wasm-bindgen/pull/3915)

* Use `table.fill` when appropriate.
  [#3446](https://github.com/rustwasm/wasm-bindgen/pull/3446)

* Annotated methods in WebCodecs that throw.
  [#3970](https://github.com/rustwasm/wasm-bindgen/pull/3970)

* Update and stabilize the Clipboard API.
  [#3992](https://github.com/rustwasm/wasm-bindgen/pull/3992)

* Deprecate builder-pattern type setters for WebIDL dictionary types and introduce non-mutable setters instead.
  [#3993](https://github.com/rustwasm/wasm-bindgen/pull/3993)

* Allow imported async functions to return any type that can be converted from a `JsValue`.
  [#3919](https://github.com/rustwasm/wasm-bindgen/pull/3919)

* Update Web Authentication API to level 3.
  [#4000](https://github.com/rustwasm/wasm-bindgen/pull/4000)

* Deprecate `AudioBufferSourceNode.onended` and `AudioBufferSourceNode.stop()`.
  [#4020](https://github.com/rustwasm/wasm-bindgen/pull/4020)

* Increase default stack size for spawned threads from 1 to 2 MB.
  [#3995](https://github.com/rustwasm/wasm-bindgen/pull/3995)

* Deprecated parameters to `default` (`init`) and `initSync` in favor of an object.
  [#3995](https://github.com/rustwasm/wasm-bindgen/pull/3995)

* Update `AbortSignal` and `AbortController` according to the WHATWG specification.
  [#4026](https://github.com/rustwasm/wasm-bindgen/pull/4026)

* Update the Indexed DB API.
  [#4027](https://github.com/rustwasm/wasm-bindgen/pull/4027)

* `UnwrapThrowExt for Result` now makes use of the required `Debug` bound to display the error as well.
  [#4035](https://github.com/rustwasm/wasm-bindgen/pull/4035)
  [#4049](https://github.com/rustwasm/wasm-bindgen/pull/4049)

* MSRV of CLI tools bumped to v1.76. This does not affect libraries like `wasm-bindgen`, `js-sys` and `web-sys`!
  [#4037](https://github.com/rustwasm/wasm-bindgen/pull/4037)

* Filtered files in published crates, significantly reducing the package size and notably excluding any bash files.
  [#4046](https://github.com/rustwasm/wasm-bindgen/pull/4046)

* Deprecated `JsStatic` in favor of `#[wasm_bindgen(thread_local)]`, which creates a `std::thread::LocalKey`. The syntax is otherwise the same.
  [#4057](https://github.com/rustwasm/wasm-bindgen/pull/4057)

* Removed `impl Deref for JsStatic` when compiling with `cfg(target_feature = "atomics")`, which was unsound.
  [#4057](https://github.com/rustwasm/wasm-bindgen/pull/4057)

* Updated the WebGPU WebIDL to the current draft as of 2024-08-05.
  [#4062](https://github.com/rustwasm/wasm-bindgen/pull/4062)

* Use object URLs for linked modules without `--split-linked-modules`.
  [#4067](https://github.com/rustwasm/wasm-bindgen/pull/4067)

### Fixed

* Copy port from headless test server when using `WASM_BINDGEN_TEST_ADDRESS`.
  [#3873](https://github.com/rustwasm/wasm-bindgen/pull/3873)

* Fix `catch` not being thread-safe.
  [#3879](https://github.com/rustwasm/wasm-bindgen/pull/3879)

* Fix MSRV compilation.
  [#3927](https://github.com/rustwasm/wasm-bindgen/pull/3927)

* Fix `clippy::empty_docs` lint.
  [#3946](https://github.com/rustwasm/wasm-bindgen/pull/3946)

* Fix missing target features in module when enabling reference types or multi-value transformation.
  [#3967](https://github.com/rustwasm/wasm-bindgen/pull/3967)

* Fixed Rust values getting GC'd while still borrowed.
  [#3940](https://github.com/rustwasm/wasm-bindgen/pull/3940)

* Fixed Rust values not getting GC'd if they were created via. a constructor.
  [#3940](https://github.com/rustwasm/wasm-bindgen/pull/3940)

* Fix triggering `clippy::mem_forget` lint in exported structs.
  [#3985](https://github.com/rustwasm/wasm-bindgen/pull/3985)

* Fix MDN links to static interface methods.
  [#4010](https://github.com/rustwasm/wasm-bindgen/pull/4010)

* Fixed Deno support.
  [#3990](https://github.com/rustwasm/wasm-bindgen/pull/3990)

* Fix `__wbindgen_thread_destroy()` ignoring parameters.
  [#3995](https://github.com/rustwasm/wasm-bindgen/pull/3995)

* Fix `no_std` support and therefor compiling with `default-features = false`.
  [#4005](https://github.com/rustwasm/wasm-bindgen/pull/4005)

* Fix byte order for big-endian platforms.
  [#4015](https://github.com/rustwasm/wasm-bindgen/pull/4015)

* Allow ex/importing structs, functions and parameters named with raw identifiers.
  [#4025](https://github.com/rustwasm/wasm-bindgen/pull/4025)

* Implement a more reliable way to detect the stack pointer.
  [#4036](https://github.com/rustwasm/wasm-bindgen/pull/4036)

* `#[track_caller]` is now always applied on `UnwrapThrowExt` methods when not targeting `wasm32-unknown-unknown`.
  [#4042](https://github.com/rustwasm/wasm-bindgen/pull/4042)

* Fixed linked modules emitting snippet files when not using `--split-linked-modules`.
  [#4066](https://github.com/rustwasm/wasm-bindgen/pull/4066)

--------------------------------------------------------------------------------

## [0.2.92](https://github.com/rustwasm/wasm-bindgen/compare/0.2.91...0.2.92)

Released 2024-03-04

### Added

* Add bindings for `RTCPeerConnectionIceErrorEvent`.
  [#3835](https://github.com/rustwasm/wasm-bindgen/pull/3835)

* Add bindings for `CanvasState.reset()`, affecting `CanvasRenderingContext2D` and `OffscreenCanvasRenderingContext2D`.
  [#3844](https://github.com/rustwasm/wasm-bindgen/pull/3844)

* Add `TryFrom` implementations for `Number`, that allow losslessly converting from 64- and 128-bits numbers.
  [#3847](https://github.com/rustwasm/wasm-bindgen/pull/3847)

* Add support for `Option<*const T>`, `Option<*mut T>` and `NonNull<T>`.
  [#3852](https://github.com/rustwasm/wasm-bindgen/pull/3852)
  [#3857](https://github.com/rustwasm/wasm-bindgen/pull/3857)

* Allow overriding the URL used for headless tests by setting `WASM_BINDGEN_TEST_ADDRESS`.
  [#3861](https://github.com/rustwasm/wasm-bindgen/pull/3861)

### Fixed

* Make .wasm output deterministic when using `--reference-types`.
  [#3851](https://github.com/rustwasm/wasm-bindgen/pull/3851)

* Don't allow invalid Unicode scalar values in `char`.
  [#3866](https://github.com/rustwasm/wasm-bindgen/pull/3866)

--------------------------------------------------------------------------------

## [0.2.91](https://github.com/rustwasm/wasm-bindgen/compare/0.2.90...0.2.91)

Released 2024-02-06

### Added

* Added bindings for the `RTCRtpTransceiver.setCodecPreferences()` and unstable bindings for the `RTCRtpEncodingParameters.scalabilityMode`.
  [#3828](https://github.com/rustwasm/wasm-bindgen/pull/3828)

* Add unstable bindings for the FileSystemAccess API
  [#3810](https://github.com/rustwasm/wasm-bindgen/pull/3810)

* Added support for running tests in shared and service workers with `wasm_bindgen_test_configure!` `run_in_shared_worker` and `run_in_service_worker`.
  [#3804](https://github.com/rustwasm/wasm-bindgen/pull/3804)

* Accept the `--skip` flag with `wasm-bindgen-test-runner`.
  [#3803](https://github.com/rustwasm/wasm-bindgen/pull/3803)

* Introduce environment variable `WASM_BINDGEN_TEST_NO_ORIGIN_ISOLATION` to disable origin isolation for `wasm-bindgen-test-runner`.
  [#3807](https://github.com/rustwasm/wasm-bindgen/pull/3807)

* Add bindings for `USBDevice.forget()`.
  [#3821](https://github.com/rustwasm/wasm-bindgen/pull/3821)

### Changed

* Stabilize `ClipboardEvent`.
  [#3791](https://github.com/rustwasm/wasm-bindgen/pull/3791)

* Use immutable buffers in `SubtleCrypto` methods.
  [#3797](https://github.com/rustwasm/wasm-bindgen/pull/3797)

* Deprecate `wasm_bindgen_test_configure!`s `run_in_worker` in favor of `run_in_dedicated_worker`.
  [#3804](https://github.com/rustwasm/wasm-bindgen/pull/3804)

* Updated the WebGPU WebIDL to the current draft as of 2024-01-30. Note that this retains the previous update's workaround for `GPUPipelineError`, and holds back an update to the `buffer` argument of the `GPUQueue.{writeBuffer,writeTexture}` methods.
  [#3816](https://github.com/rustwasm/wasm-bindgen/pull/3816)

* Deprecate `--weak-refs` and `WASM_BINDGEN_WEAKREF` in favor of automatic run-time detection.
  [#3822](https://github.com/rustwasm/wasm-bindgen/pull/3822)

### Fixed

* Fixed UB when freeing strings received from JS if not using the default allocator.
  [#3808](https://github.com/rustwasm/wasm-bindgen/pull/3808)

* Fixed temporary folder detection by `wasm-bindgen-test-runner` on MacOS.
  [#3817](https://github.com/rustwasm/wasm-bindgen/pull/3817)

* Fixed using `#[wasm_bindgen(js_name = default)]` with `#[wasm_bindgen(module = ...)]`.
  [#3823](https://github.com/rustwasm/wasm-bindgen/pull/3823)

* Fixed nightly build of `wasm-bindgen-futures`.
  [#3827](https://github.com/rustwasm/wasm-bindgen/pull/3827)

--------------------------------------------------------------------------------

## [0.2.90](https://github.com/rustwasm/wasm-bindgen/compare/0.2.89...0.2.90)

Released 2024-01-06

### Fixed

* Fix JS shim default path detection for the no-modules target.
  [#3748](https://github.com/rustwasm/wasm-bindgen/pull/3748)

### Added

* Add bindings for `HTMLFormElement.requestSubmit()`.
  [#3747](https://github.com/rustwasm/wasm-bindgen/pull/3747)

* Add bindings for `RTCRtpSender.getCapabilities(DOMString)` method, `RTCRtpCapabilities`, `RTCRtpCodecCapability` and `RTCRtpHeaderExtensionCapability`.
  [#3737](https://github.com/rustwasm/wasm-bindgen/pull/3737)

* Add bindings for `UserActivation`.
  [#3719](https://github.com/rustwasm/wasm-bindgen/pull/3719)

* Add unstable bindings for the Compression Streams API.
  [#3752](https://github.com/rustwasm/wasm-bindgen/pull/3752)

### Changed

* Stabilize File System API.
  [#3745](https://github.com/rustwasm/wasm-bindgen/pull/3745)

* Stabilize `QueuingStrategy`.
  [#3753](https://github.com/rustwasm/wasm-bindgen/pull/3753)

### Fixed

* Fixed a compiler error when using `#[wasm_bindgen]` inside `macro_rules!`.
  [#3725](https://github.com/rustwasm/wasm-bindgen/pull/3725)

### Removed

* Removed Gecko-only `InstallTriggerData` and Gecko-internal `FlexLineGrowthState`, `GridDeclaration`, `GridTrackState`,
  `RtcLifecycleEvent` and `WebrtcGlobalStatisticsReport` features.
  [#3723](https://github.com/rustwasm/wasm-bindgen/pull/3723)

--------------------------------------------------------------------------------

## [0.2.89](https://github.com/rustwasm/wasm-bindgen/compare/0.2.88...0.2.89)

Released 2023-11-27.

### Added

* Add additional constructor to `DataView` for `SharedArrayBuffer`.
  [#3695](https://github.com/rustwasm/wasm-bindgen/pull/3695)

* Stabilize `wasm_bindgen::module()`.
  [#3690](https://github.com/rustwasm/wasm-bindgen/pull/3690)

### Fixed

* The DWARF section is now correctly modified instead of leaving it in a broken state.
  [#3483](https://github.com/rustwasm/wasm-bindgen/pull/3483)

* Fixed an issue where `#[wasm_bindgen]` automatically derived the `TryFrom` trait for any struct, preventing custom `TryFrom<JsValue>` implementations. It has been updated to utilize a new `TryFromJsValue` trait instead.
  [#3709](https://github.com/rustwasm/wasm-bindgen/pull/3709)

* Update the TypeScript signature of `__wbindgen_thread_destroy` to indicate that it's parameters are optional.
  [#3703](https://github.com/rustwasm/wasm-bindgen/pull/3703)

### Removed

* Removed Gecko-internal dictionary bindings `Csp`, `CspPolicies`, `CspReport` and `CspReportProperties`.
  [#3721](https://github.com/rustwasm/wasm-bindgen/pull/3721)

--------------------------------------------------------------------------------

## [0.2.88](https://github.com/rustwasm/wasm-bindgen/compare/0.2.87...0.2.88) (YANKED)

Released 2023-11-01

### Added

* Add bindings for `RTCRtpTransceiverInit.sendEncodings`.
  [#3642](https://github.com/rustwasm/wasm-bindgen/pull/3642)

* Add bindings for the Web Locks API to `web-sys`.
  [#3604](https://github.com/rustwasm/wasm-bindgen/pull/3604)

* Add bindings for `ViewTransition` to `web-sys`.
  [#3598](https://github.com/rustwasm/wasm-bindgen/pull/3598)

* Extend `AudioContext` with unstable features supporting audio sink configuration.
  [#3433](https://github.com/rustwasm/wasm-bindgen/pull/3433)

* Add bindings for `WebAssembly.Tag` and `WebAssembly.Exception`.
  [#3484](https://github.com/rustwasm/wasm-bindgen/pull/3484)

* Re-export `wasm-bindgen` from `js-sys`, `web-sys` and `wasm-bindgen-futures`.
  [#3466](https://github.com/rustwasm/wasm-bindgen/pull/3466)
  [#3601](https://github.com/rustwasm/wasm-bindgen/pull/3601)

* Re-export `js-sys` from `web-sys` and `wasm-bindgen-futures`.
  [#3466](https://github.com/rustwasm/wasm-bindgen/pull/3466)
  [#3601](https://github.com/rustwasm/wasm-bindgen/pull/3601)

* Add bindings for async variants of `Atomics.wait`.
  [#3504](https://github.com/rustwasm/wasm-bindgen/pull/3504)

* Add bindings for `WorkerGlobalScope.performance`.
  [#3506](https://github.com/rustwasm/wasm-bindgen/pull/3506)

* Add support for installing pre-built artifacts of `wasm-bindgen-cli`
  via `cargo binstall wasm-bindgen-cli`.
  [#3544](https://github.com/rustwasm/wasm-bindgen/pull/3544)

* Add bindings for `RTCDataChannel.id`.
  [#3547](https://github.com/rustwasm/wasm-bindgen/pull/3547)

* Add bindings for `HTMLElement.inert`.
  [#3557](https://github.com/rustwasm/wasm-bindgen/pull/3557)

* Add unstable bindings for the Prioritized Task Scheduling API.
  [#3566](https://github.com/rustwasm/wasm-bindgen/pull/3566)

* Add bindings for `CssStyleSheet` constructor and `replace(_sync)` methods.
  [#3573](https://github.com/rustwasm/wasm-bindgen/pull/3573)

* Add bindings for `CanvasTransform.setTransform(DOMMatrix2DInit)`.
  [#3580](https://github.com/rustwasm/wasm-bindgen/pull/3580)

* Add a `crate` attribute to the `wasm_bindgen_test` proc-macro to specify a
  non-default path to the `wasm-bindgen-test` crate.
  [#3593](https://github.com/rustwasm/wasm-bindgen/pull/3593)

* Add support for passing `Vec`s of exported Rust types and strings to/from JS.
  [#3554](https://github.com/rustwasm/wasm-bindgen/pull/3554)

* Implement `TryFrom<JsValue>` for exported Rust types and strings.
  [#3554](https://github.com/rustwasm/wasm-bindgen/pull/3554)

* Handle the `#[ignore = "reason"]` attribute with the `wasm_bindgen_test`
  proc-macro and accept the `--include-ignored` flag with `wasm-bindgen-test-runner`.
  [#3644](https://github.com/rustwasm/wasm-bindgen/pull/3644)

* Added missing additions to the Notification API.
  [#3667](https://github.com/rustwasm/wasm-bindgen/pull/3667)

### Changed

* Updated the WebGPU WebIDL.
  The optional `message` argument of [`GPUPipelineError`](https://www.w3.org/TR/webgpu/#gpupipelineerror)'s constructor has been manually specified as a required argument,
  because required arguments occurring after optional arguments are currently not supported by the generator.
  [#3480](https://github.com/rustwasm/wasm-bindgen/pull/3480)

* Replaced `curl` with `ureq`. By default we now use Rustls instead of OpenSSL.
  [#3511](https://github.com/rustwasm/wasm-bindgen/pull/3511)

* Changed mutability of the argument `buffer` in `write` functions to immutable for `FileSystemSyncAccessHandle` and `FileSystemWritableFileStream`.
  It was also automatically changed for `IdbFileHandle`, which is deprecated.
  [#3537](https://github.com/rustwasm/wasm-bindgen/pull/3537)

* Changed behavior when compiling to `wasm32-wasi` to match `wasm32-emscripten` and
  non-Wasm targets, generating a stub that panics when called rather than a wasm-
  bindgen placeholder.
  [#3233](https://github.com/rustwasm/wasm-bindgen/pull/3233)

* Changed constructor implementation in generated JS bindings, it is now
  possible to override methods from generated JS classes using inheritance.
  When exported constructors return `Self`.
  [#3562](https://github.com/rustwasm/wasm-bindgen/pull/3562)

* Made `wasm-bindgen` forwards-compatible with the standard C ABI.
  [#3595](https://github.com/rustwasm/wasm-bindgen/pull/3595)

* Changed the design of the internal `WasmAbi` trait. Rather than marking a type
  which can be passed directly as a parameter/result to/from JS, it now lets
  types specify how they can be split into / recreated from multiple primitive
  types which are then passed to/from JS.
  `WasmPrimitive` now serves the old function of `WasmAbi`, minus allowing
  `#[repr(C)]` types.
  [#3595](https://github.com/rustwasm/wasm-bindgen/pull/3595)

* Use `queueMicrotask` in `wasm-bindgen-futures` for scheduling tasks on the next tick.
  If that is not available, use the previous `Promise.then` mechanism as a fallback.
  This should avoid quirks, like exceptions thrown get now properly reported
  as normal exceptions rather than as rejected promises.
  [#3611](https://github.com/rustwasm/wasm-bindgen/pull/3611)

* Improved TypeScript bindings to accurately reference Rust enum types in function signatures,
  enhancing type safety and compatibility.
  [#3647](https://github.com/rustwasm/wasm-bindgen/pull/3647)

* Throw an error on enum name collisions, previously only one enum would be emitted.
  [#3669](https://github.com/rustwasm/wasm-bindgen/pull/3669)

### Fixed

* Fixed `wasm_bindgen` macro to handle raw identifiers in field names.
  [#3621](https://github.com/rustwasm/wasm-bindgen/pull/3621)

* Fixed bindings and comments for `Atomics.wait`.
  [#3509](https://github.com/rustwasm/wasm-bindgen/pull/3509)

* Fixed `wasm_bindgen_test` macro to handle raw identifiers in test names.
  [#3541](https://github.com/rustwasm/wasm-bindgen/pull/3541)

* Fixed Cargo license field to follow the SPDX 2.1 license expression standard.
  [#3529](https://github.com/rustwasm/wasm-bindgen/pull/3529)

* Use fully qualified paths in the `wasm_bindgen_test` macro.
  [#3549](https://github.com/rustwasm/wasm-bindgen/pull/3549)

* Fixed bug allowing JS primitives to be returned from exported constructors.
  [#3562](https://github.com/rustwasm/wasm-bindgen/pull/3562)

* Fixed optional parameters in JSDoc.
  [#3577](https://github.com/rustwasm/wasm-bindgen/pull/3577)

* Use re-exported `js-sys` from `wasm-bindgen-futures` to account for
  non-default path specified by the `crate` attribute in `wasm_bindgen_futures`
  proc-macro.
  [#3601](https://github.com/rustwasm/wasm-bindgen/pull/3601)

* Fix bug with function arguments coming from `macro_rules!`.
  [#3625](https://github.com/rustwasm/wasm-bindgen/pull/3625)

* Fix some calls to `free()` missing alignment.
  [#3639](https://github.com/rustwasm/wasm-bindgen/pull/3639)

* Fix wrong ABI for raw pointers.
  [#3655](https://github.com/rustwasm/wasm-bindgen/pull/3655)

### Removed

* Removed `ReadableStreamByobReader::read_with_u8_array()` because it doesn't work with Wasm.
  [#3582](https://github.com/rustwasm/wasm-bindgen/pull/3582)

* Removed `GetNotificationOptions`, `NotificationBehavior` and `Notification.get()` because
  they don't exist anymore.

--------------------------------------------------------------------------------

## [0.2.87](https://github.com/rustwasm/wasm-bindgen/compare/0.2.86...0.2.87)

Released 2023-06-12.

### Added

* Implemented `IntoIterator` for `Array`.
  [#3477](https://github.com/rustwasm/wasm-bindgen/pull/3477)

### Changed

* Deprecate `HtmlMenuItemElement` and parts of `HtmlMenuElement`.
  [#3448](https://github.com/rustwasm/wasm-bindgen/pull/3448)

* Stabilize `ResizeObserver`.
  [#3459](https://github.com/rustwasm/wasm-bindgen/pull/3459)

### Fixed

* Take alignment into consideration during (de/re)allocation.
  [#3463](https://github.com/rustwasm/wasm-bindgen/pull/3463)

--------------------------------------------------------------------------------

## 0.2.86

Released 2023-05-16.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.85...0.2.86)

--------------------------------------------------------------------------------

## 0.2.85

Released 2023-05-09.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.84...0.2.85)

--------------------------------------------------------------------------------

## 0.2.84

Released 2023-02-01.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.83...0.2.84)

--------------------------------------------------------------------------------

## 0.2.83

Released 2022-09-12.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.82...0.2.83)

--------------------------------------------------------------------------------

## 0.2.82

Released 2022-07-25.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.81...0.2.82)

--------------------------------------------------------------------------------

## 0.2.81

Released 2022-06-14.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.80...0.2.81)

--------------------------------------------------------------------------------

## 0.2.80

Released 2022-04-04.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.79...0.2.80)

--------------------------------------------------------------------------------

## 0.2.79

Released 2022-01-19.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.78...0.2.79)

--------------------------------------------------------------------------------

## 0.2.78

Released 2021-09-15.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.77...0.2.78)

--------------------------------------------------------------------------------

## 0.2.77

Released 2021-09-08.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.76...0.2.77)

--------------------------------------------------------------------------------

## 0.2.76

Released 2021-08-19.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.75...0.2.76)

--------------------------------------------------------------------------------

## 0.2.75

Released 2021-08-02.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.74...0.2.75)

--------------------------------------------------------------------------------

## 0.2.74

Released 2021-05-10.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.73...0.2.74)

--------------------------------------------------------------------------------

## 0.2.73

Released 2021-03-29.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.72...0.2.73)

--------------------------------------------------------------------------------

## 0.2.72

Released 2021-03-18.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.71...0.2.72)

--------------------------------------------------------------------------------

## 0.2.71

Released 2021-02-26.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.70...0.2.71)

--------------------------------------------------------------------------------

## 0.2.70

Released 2021-01-25.

[changes](https://github.com/rustwasm/wasm-bindgen/compare/0.2.69...0.2.70)

--------------------------------------------------------------------------------

## 0.2.69

Released 2020-11-30.

### Added

* Unstable bindings for WebBluetooth have been added.
  [#2311](https://github.com/rustwasm/wasm-bindgen/pull/2311)

* Unstable bindings for WebUSB have been added.
  [#2345](https://github.com/rustwasm/wasm-bindgen/pull/2345)

* Renaming a struct field with `js_name` is now supported.
  [#2360](https://github.com/rustwasm/wasm-bindgen/pull/2360)

* The WebGPU WebIDL has been updated.
  [#2353](https://github.com/rustwasm/wasm-bindgen/pull/2353)

### Fixed

* The ImageCapture APIs of web-sys have been moved to unstable and were fixed.
  [#2348](https://github.com/rustwasm/wasm-bindgen/pull/2348)

* Bindings for `waitAsync` have been updated.
  [#2362](https://github.com/rustwasm/wasm-bindgen/pull/2362)

--------------------------------------------------------------------------------

## 0.2.68

Released 2020-09-08.

### Added

* Add userVisibleOnly property to PushSubscriptionOptionsInit.
  [#2288](https://github.com/rustwasm/wasm-bindgen/pull/2288)

### Fixed

* TypeScript files now import `*.wasm` instead of bare files.
  [#2283](https://github.com/rustwasm/wasm-bindgen/pull/2283)

* Usage of `externref` now appropriately resizes the table by using 2x the
  previous capacity, fixing a performance issue with lots of externref objects.
  [#2294](https://github.com/rustwasm/wasm-bindgen/pull/2294)

* Compatibility with the latest Firefox WebDriver has been fixed.
  [#2301](https://github.com/rustwasm/wasm-bindgen/pull/2301)

* Non deterministic output with closures has been fixed.
  [#2304](https://github.com/rustwasm/wasm-bindgen/pull/2304)

### Updated

* The WebGPU WebIDL was updated.
  [#2267](https://github.com/rustwasm/wasm-bindgen/pull/2267)

--------------------------------------------------------------------------------

## 0.2.67

Released 2020-07-28.

### Added

* A `--reference-types` flag was added to the CLI.
  [#2257](https://github.com/rustwasm/wasm-bindgen/pull/2257)

### Fixed

* Breakage with `Closure::forget` in 0.2.66 was fixed.
  [#2258](https://github.com/rustwasm/wasm-bindgen/pull/2258)

--------------------------------------------------------------------------------

## 0.2.66

Released 2020-07-28.

### Added

* Reverse mappings from value to name are now available in JS bindings of enums.
  [#2240](https://github.com/rustwasm/wasm-bindgen/pull/2240)

### Fixed

* Functions using a return pointer in threaded programs now correctly load and
  store return values in a way that doesn't interfere with other threads.
  [#2249](https://github.com/rustwasm/wasm-bindgen/pull/2249)

* Support for weak references has been updated and a `--weak-refs` flag is now
  available in the CLI for enabling weak references.
  [#2248](https://github.com/rustwasm/wasm-bindgen/pull/2248)

--------------------------------------------------------------------------------

## 0.2.65

Released 2020-07-15.

### Added

* Functions from JS can now be natively imported as `async` and will use
  promises under the hood.
  [#2196](https://github.com/rustwasm/wasm-bindgen/pull/2196)

### Changed

* Encoding for the reference types proposal has been updated to the latest
  version of the spec.
  [#2234](https://github.com/rustwasm/wasm-bindgen/pull/2234)

--------------------------------------------------------------------------------

## 0.2.64

Released 2020-06-29.

### Added

* Nested namespaces for imports can now be specified.
  [#2105](https://github.com/rustwasm/wasm-bindgen/pull/2105)

* A `deno` target has been added.
  [#2176](https://github.com/rustwasm/wasm-bindgen/pull/2176)

### Fixed

* Getters/setters that consume the original object have been fixed to invalidate
  the object correctly.
  [#2172](https://github.com/rustwasm/wasm-bindgen/pull/2172)

* Compatibility with nightly threading in LLVM has been fixed.
  [#2183](https://github.com/rustwasm/wasm-bindgen/pull/2183)

* Trailing space in generated doc comments is now removed.
  [#2210](https://github.com/rustwasm/wasm-bindgen/pull/2210)

--------------------------------------------------------------------------------

## 0.2.63

Released 2020-05-27.

### Added

* A new example about using WebRTC has been added.
  [#2131](https://github.com/rustwasm/wasm-bindgen/pull/2131)

* The `Blob.stream()` method has been added.
  [#2140](https://github.com/rustwasm/wasm-bindgen/pull/2140)
  [#2142](https://github.com/rustwasm/wasm-bindgen/pull/2142)

### Changed

* The encoding and implementation of WebAssembly reference types has been sync'd
  with the latest upstream specification.
  [#2125](https://github.com/rustwasm/wasm-bindgen/pull/2125)

### Fixed

* Test functions names will no longer collide with test intrinsic names.
  [#2123](https://github.com/rustwasm/wasm-bindgen/pull/2123)

* Fixed warnings with `#[must_use]` types in generated code.
  [#2144](https://github.com/rustwasm/wasm-bindgen/pull/2144)

* Fixed compatibility with latest Rust nightlies.
  [#2159](https://github.com/rustwasm/wasm-bindgen/pull/2159)

--------------------------------------------------------------------------------

## 0.2.62

Released 2020-05-01.

### Fixed

* Usage of `require` has been fixed with Webpack 5.
  [#2115](https://github.com/rustwasm/wasm-bindgen/pull/2115)

--------------------------------------------------------------------------------

## 0.2.61

Released 2020-04-29.

### Added

* Exported Rust `enum` types can now be renamed with `js_name`.
  [#2071](https://github.com/rustwasm/wasm-bindgen/pull/2071)

* More comments are copied to JS/TS files, and comments should no longer
  accidentally have escape sequences in them.
  [#2070](https://github.com/rustwasm/wasm-bindgen/pull/2070)

* Experimental bindings for the Clipboard browser APIs have been added.
  [#2100](https://github.com/rustwasm/wasm-bindgen/pull/2100)

### Changed

* WebGPU bindings have been updated.
  [#2080](https://github.com/rustwasm/wasm-bindgen/pull/2080)

* `setBindGroup` methods for WebIDL now take immutable slices instead of mutable
  slices.
  [#2087](https://github.com/rustwasm/wasm-bindgen/pull/2087)

* JS code generation for `catch` functions has been improved.
  [#2098](https://github.com/rustwasm/wasm-bindgen/pull/2098)

* Usage of NPM dependencies with the `web` target is no longer an error.
  [#2103](https://github.com/rustwasm/wasm-bindgen/pull/2103)

### Fixed

* Combining `js_name` with `getter` and `setter` has now been fixed.
  [#2074](https://github.com/rustwasm/wasm-bindgen/pull/2074)

* Importing global names which conflict with other namespaces should now work
  correctly.
  [#2057](https://github.com/rustwasm/wasm-bindgen/pull/2057)

* Acquiring the global JS object has been fixed for Firefox extension content
  scripts.
  [#2099](https://github.com/rustwasm/wasm-bindgen/pull/2099)

* The output of `wasm-bindgen` is now compatible with Webpack 5 and the updated
  version of the Wasm ESM integration specification.
  [#2110](https://github.com/rustwasm/wasm-bindgen/pull/2099)

--------------------------------------------------------------------------------

## 0.2.60

Released 2020-03-25.

### Added

* The `js_sys` types are now more accurately reflected in TypeScript.
  [#2028](https://github.com/rustwasm/wasm-bindgen/pull/2028)

* The timeout in `wasm-bindgen-test-runner`'s timeout can now be configured via
  `WASM_BINDGEN_TEST_TIMEOUT`.
  [#2036](https://github.com/rustwasm/wasm-bindgen/pull/2036)

* WebIDL for WebXR has been added.
  [#2000](https://github.com/rustwasm/wasm-bindgen/pull/2000)

### Changed

* The WebIDL for WebGPU has been updated.
  [#2037](https://github.com/rustwasm/wasm-bindgen/pull/2037)

--------------------------------------------------------------------------------

## 0.2.59

Released 2020-03-03.

### Added

* The `js_sys::Number` type now has a number of JS-number associated constants
  on it now.
  [#1965](https://github.com/rustwasm/wasm-bindgen/pull/1965)

* The `getTransform` method on `CanvasRenderingContext2D` has been added.
  [#1966](https://github.com/rustwasm/wasm-bindgen/pull/1966)

* Initial experimental support was added for electron targets with a new
  `--omit-imports` flag.
  [#1958](https://github.com/rustwasm/wasm-bindgen/pull/1958)

* Optional struct fields are now reflected idiomatically in TypeScript.
  [#1990](https://github.com/rustwasm/wasm-bindgen/pull/1990)

* Typed arrays in `js_sys` now have `get_index` and `set_index` methods.
  [#2001](https://github.com/rustwasm/wasm-bindgen/pull/2001)

* The `web_sys::Blob` type has been updated with `arrayBuffer` and `text`
  methods.
  [#2008](https://github.com/rustwasm/wasm-bindgen/pull/2008)

* Support for unstable browser interfaces has now been added. By compiling
  `web_sys` with `--cfg web_sys_unstable_apis` (typically via `RUSTFLAGS`)
  you'll be able to access all bound WebIDL functions, even those like GPU
  support on the web, which has now also had its WebIDL updated.
  [#1997](https://github.com/rustwasm/wasm-bindgen/pull/1997)

* The compile time for `web_sys` has been massively reduced by pre-generating
  Rust code from WebIDL. It is also readable now since it generates
  `#[wasm_bindgen]` annotations instead of expanded code.
  [#2012](https://github.com/rustwasm/wasm-bindgen/pull/2012)

* A new `typescript_type` attribute can be used to specify the TypeScript type
  for an `extern` type. [#2012](https://github.com/rustwasm/wasm-bindgen/pull/2012)

* It is now possible to use string values with `#[wasm_bindgen]` `enum`s.
  [#2012](https://github.com/rustwasm/wasm-bindgen/pull/2012)

* A new `skip_tyepscript` attribute is recognized to skip generating TypeScript
  bindings for a function or type.
  [#2016](https://github.com/rustwasm/wasm-bindgen/pull/2016)

### Changed

* More `uniformMatrix*` bindings now are whitelisted take shared slice instead
  of a mutable slice.
  [#1957](https://github.com/rustwasm/wasm-bindgen/pull/1957)

* Non-`dependency` keys in `package.json` are now ignored instead of error'd
  about.
  [#1969](https://github.com/rustwasm/wasm-bindgen/pull/1969)

* WebGPU has been removed from `web_sys` since it was outdated and didn't work
  anywhere anyway.
  [#1972](https://github.com/rustwasm/wasm-bindgen/pull/1972)

* The JS heap of objects managed by wasm-bindgen has had its definition
  tightended up a bit.
  [#1987](https://github.com/rustwasm/wasm-bindgen/pull/1987)

* The `self` identifier is no longer used on the `no-modules` target, making it a
  bit more flexible in more environments.
  [#1995](https://github.com/rustwasm/wasm-bindgen/pull/1995)

* The wasm-loading logic is now more flexible and can take promises as well.
  [#1996](https://github.com/rustwasm/wasm-bindgen/pull/1996)

* JS glue for closures is now deduplicated.
  [#2002](https://github.com/rustwasm/wasm-bindgen/pull/2002)

* The `web_sys` crate now emits more accurate TypeScript definitions using named
  types instead of `any` everywhere.
  [#1998](https://github.com/rustwasm/wasm-bindgen/pull/1998)

* The `send_with_u8_array` methods in `web_sys` are whitelisted to take shared
  slices instead of mutable slices.
  [#2015](https://github.com/rustwasm/wasm-bindgen/pull/2015)

--------------------------------------------------------------------------------

## 0.2.58

Released 2020-01-07.

### Added

* When using the `no-modules` output type the initialization path for the wasm
  file is now optional if it can be inferred from the current JS script.
  [#1938](https://github.com/rustwasm/wasm-bindgen/pull/1938)

### Fixed

* TypeScript for struct methods that have floats has been fixed.
  [#1945](https://github.com/rustwasm/wasm-bindgen/pull/1945)

--------------------------------------------------------------------------------

## 0.2.57

Released 2020-01-06.

### Fixed

* The `js_sys::Promise` type is now marked as `#[must_use]`
  [#1927](https://github.com/rustwasm/wasm-bindgen/pull/1927)

* Duplicate imports of the same name are now handled correctly again.
  [#1942](https://github.com/rustwasm/wasm-bindgen/pull/1942)

--------------------------------------------------------------------------------

## 0.2.56

Released 2019-12-20.

### Added

* Added a `#[wasm_bindgen(inspectable)]` attribute for exported objects to
  generate `toJSON` and `toString` implementations.
  [#1876](https://github.com/rustwasm/wasm-bindgen/pull/1876)

* Support for the most recent interface types proposal has been implemented.
  [#1882](https://github.com/rustwasm/wasm-bindgen/pull/1882)

* Initial support for async iterators has been added.
  [#1895](https://github.com/rustwasm/wasm-bindgen/pull/1895)

* Support for an `async` start function was added.
  [#1905](https://github.com/rustwasm/wasm-bindgen/pull/1905)

* `Array::iter` and `Array::to_vec` methods were added to js-sys.
  [#1909](https://github.com/rustwasm/wasm-bindgen/pull/1909)

### Fixed

* Another webkit-specific WebIDL construct was fixed in web-sys.
  [#1865](https://github.com/rustwasm/wasm-bindgen/pull/1865)

--------------------------------------------------------------------------------

## 0.2.55

Released 2019-11-19.

### Fixed

* Running `wasm-bindgen` over empty anyref modules now works again.
  [#1861](https://github.com/rustwasm/wasm-bindgen/pull/1861)

* Support for multi-value JS engines has been fixed as a Wasm interface types
  polyfill.
  [#1863](https://github.com/rustwasm/wasm-bindgen/pull/1863)

--------------------------------------------------------------------------------

## 0.2.54

Released 2019-11-07.

### Added

* A safe `to_vec` method has been added for typed arrays.
  [#1844](https://github.com/rustwasm/wasm-bindgen/pull/1844)

* A unsafe method `view_mut_raw` has been added to typed arrays.
  [#1850](https://github.com/rustwasm/wasm-bindgen/pull/1850)

* The `HTMLImageElement` WebIDL has been updated with recent features.
  [#1842](https://github.com/rustwasm/wasm-bindgen/pull/1842)

* Binary crates are now supported and `fn main` will be automatically executed
  like the `start` function.
  [#1843](https://github.com/rustwasm/wasm-bindgen/pull/1843)

### Changed

* Some JS glue generation has been tweaked to avoid TypeScript warnings.
  [#1852](https://github.com/rustwasm/wasm-bindgen/pull/1852)

--------------------------------------------------------------------------------

## 0.2.53

Released 2019-10-29.

### Fixed

* A bug with the experimental support for multi-value interface types has been
  fixed.
  [#1839](https://github.com/rustwasm/wasm-bindgen/pull/1839)

--------------------------------------------------------------------------------

## 0.2.52

Released 2019-10-24.

### Added

* The support for wasm-interface-types now uses multi-value by default.
  [#1805](https://github.com/rustwasm/wasm-bindgen/pull/1805)

* The Worklet IDL has been updated.
  [#1817](https://github.com/rustwasm/wasm-bindgen/pull/1817)

* The HTMLInputElement type has selectionStart and selectionEnd properties now.
  [#1811](https://github.com/rustwasm/wasm-bindgen/pull/1811)

* An `unintern` function has been added to remove an interned string from the
  cache.
  [#1828](https://github.com/rustwasm/wasm-bindgen/pull/1828)

### Changed

* Some WebIDL indexing getters have been corrected to reflect that they can
  throw and/or return `undefined`
  [#1789](https://github.com/rustwasm/wasm-bindgen/pull/1789)

### Fixed

* A bug with `TextDecoder` and Safari has been fxied
  [#1789](https://github.com/rustwasm/wasm-bindgen/pull/1789)

--------------------------------------------------------------------------------

## 0.2.51

Released 2019-09-26.

### Added

* The `wasm-bindgen-futures` and `wasm-bindgen-test` crates now require Nightly
  Rust and have a new major version published as a result. These crates now
  support `async`/`await` by default, and they will be supported in the stable
  Rust 1.39.0 release. The previous versions of crates will continue to work on
  stable today.
  [#1741](https://github.com/rustwasm/wasm-bindgen/pull/1741)

* Using `#[wasm_bindgen]` on an `async` function will now work and return a
  `Promise` on the JS side of things.
  [#1754](https://github.com/rustwasm/wasm-bindgen/pull/1754)

* More helper methods for `js_sys::Array` have been added.
  [#1749](https://github.com/rustwasm/wasm-bindgen/pull/1749)

* Initial support for the WebAssembly multi-value proposal has been added.
  [#1764](https://github.com/rustwasm/wasm-bindgen/pull/1764)

* Constructors for `js_sys::Date` with optional parameters has been added.
  [#1759](https://github.com/rustwasm/wasm-bindgen/pull/1759)

* Headless tests can now be run against a remote webdriver client
  [#1744](https://github.com/rustwasm/wasm-bindgen/pull/1744)

### Changed

* The `passStringToWasm` function has been optimized for size.
  [#1736](https://github.com/rustwasm/wasm-bindgen/pull/1736)

### Fixed

* BOM markers will not be preserved when passing strings to/from wasm.
  [#1730](https://github.com/rustwasm/wasm-bindgen/pull/1730)

* Importing a `static` value which isn't a `JsValue` has been fixed.
  [#1784](https://github.com/rustwasm/wasm-bindgen/pull/1784)

* Converting `undefined` to a Rust value via `into_serde` has been fixed.
  [#1783](https://github.com/rustwasm/wasm-bindgen/pull/1783)

* Routine errors are no longer erroneously logged in debug mode.
  [#1788](https://github.com/rustwasm/wasm-bindgen/pull/1788)

--------------------------------------------------------------------------------

## 0.2.50

Released 2019-08-19.

### Added

* Experimental support with a `WASM_INTERFACE_TYPES=1` environment variable has
  been added to emit a Wasm Interface Types custom section, making the output of
  `wasm-bindgen` a single standalone WebAssembly file.
  [#1725](https://github.com/rustwasm/wasm-bindgen/pull/1725)

### Fixed

* Unrelated errors are now no longer accidentally swallowed by the
  `instantiateStreaming` fallback.
  [#1723](https://github.com/rustwasm/wasm-bindgen/pull/1723)

--------------------------------------------------------------------------------

## 0.2.49

Released 2019-08-14.

### Added

* Add binding for `Element.getElementsByClassName`.
  [#1665](https://github.com/rustwasm/wasm-bindgen/pull/1665)

* `PartialEq` and `Eq` are now implemented for all `web-sys` types.
  [#1673](https://github.com/rustwasm/wasm-bindgen/pull/1673)

* The `wasm-bindgen-futures` crate now has support for futures when the
  experimental WebAssembly threading feature is enabled.
  [#1514](https://github.com/rustwasm/wasm-bindgen/pull/1514)

* A new `enable-interning` feature is available to intern strings and reduce the
  cost of transferring strings across the JS/Rust boundary.
  [#1612](https://github.com/rustwasm/wasm-bindgen/pull/1612)

* The `wasm-bindgen` CLI has experimental support for reading native
  `webidl-bindings` custom sections and generating JS glue. This support is in
  addition to Rust's own custom sections and allows using `wasm-bindgen` with
  binaries produced by other than rustc possibly.
  [#1690](https://github.com/rustwasm/wasm-bindgen/pull/1690)

* New environment variables have been added to configure webdriver startup
  arguments.
  [#1703](https://github.com/rustwasm/wasm-bindgen/pull/1703)

* New `JsValue::{is_truthy,is_falsy}` methods are now available.
  [#1638](https://github.com/rustwasm/wasm-bindgen/pull/1638)

### Changed

* JS import shims are now skipped again when they are unnecessary.
  [#1654](https://github.com/rustwasm/wasm-bindgen/pull/1654)

* WebAssembly output files now directly embed the module/name for imports if
  supported for the target and the import, reducing JS shims even further.
  [#1689](https://github.com/rustwasm/wasm-bindgen/pull/1689)

### Fixed

* Support for threads have been updated for LLVM 9 and nightly Rust.
  [#1675](https://github.com/rustwasm/wasm-bindgen/pull/1675)
  [#1688](https://github.com/rustwasm/wasm-bindgen/pull/1688)

* The `anyref` passes in `wasm-bindgen` have seen a number of fixes to improve
  their correctness and get the full test suite running.
  [#1692](https://github.com/rustwasm/wasm-bindgen/pull/1692)
  [#1704](https://github.com/rustwasm/wasm-bindgen/pull/1704)

* Support for `futures-preview 0.3.0-alpha.18` has been added to
  `wasm-bindgen-futures`.
  [#1716](https://github.com/rustwasm/wasm-bindgen/pull/1716)

--------------------------------------------------------------------------------

## 0.2.48

Released 2019-07-11.

### Added

* All typed arrays now implement `From` for the corresponding Rust slice type,
  providing a safe way to create an instance which copies the data.
  [#1620](https://github.com/rustwasm/wasm-bindgen/pull/1620)

* `Function::bind{2,3,4}` are now available in `js-sys`.
  [#1633](https://github.com/rustwasm/wasm-bindgen/pull/1633)

### Changed

* More WebGL methods have been updated to use shared slices instead of mutable
  slices.
  [#1639](https://github.com/rustwasm/wasm-bindgen/pull/1639)

* When using the `bundler` target the import of the Wasm file now uses the
  `.wasm` extension to ensure a Wasm file is loaded.
  [#1646](https://github.com/rustwasm/wasm-bindgen/pull/1646)

* The old internal `Stack` trait has been removed since it is no longer used.
  [#1624](https://github.com/rustwasm/wasm-bindgen/pull/1624)

### Fixed

* The `js_sys::global()` accessor now attempts other strategies before falling
  back to a `Function` constructor which can violate some strict CSP settings.
  [#1650](https://github.com/rustwasm/wasm-bindgen/pull/1649)

* Dropping a `JsFuture` no longer logs a benign error to the console.
  [#1649](https://github.com/rustwasm/wasm-bindgen/pull/1649)

* Fixed an assertion which could happen in some modules when generating
  bindings.
  [#1617](https://github.com/rustwasm/wasm-bindgen/pull/1617)

--------------------------------------------------------------------------------

## 0.2.47

Released 2019-06-19.

### Changed

* The `HtmlHyperlinkElement` should now include more native methods after a
  small edit to the WebIDL.
  [#1604](https://github.com/rustwasm/wasm-bindgen/pull/1604)

* Duplicate names for getters/setters now have a first-class `wasm-bindgen`
  error.
  [#1605](https://github.com/rustwasm/wasm-bindgen/pull/1605)

### Fixed

* TypeScript definition of `init` with `--target web` now reflects that the
  first argument is optional.
  [#1599](https://github.com/rustwasm/wasm-bindgen/pull/1599)

* A panic with the futures 0.3 support has been fixed.
  [#1598](https://github.com/rustwasm/wasm-bindgen/pull/1598)

* More slice types are recognized as becoming immutable in some WebIDL methods.
  [#1602](https://github.com/rustwasm/wasm-bindgen/pull/1602)

* The function table is now no longer too aggressively removed.
  [#1606](https://github.com/rustwasm/wasm-bindgen/pull/1606)

--------------------------------------------------------------------------------

## 0.2.46

Released 2019-06-14.

### Added

* Bindings for `Array#flat` and `Array#flatMap` have been added.
  [#1573](https://github.com/rustwasm/wasm-bindgen/pull/1573)

* All `#[wasm_bindgen]` types now `AsRef` to themselves.
  [#1583](https://github.com/rustwasm/wasm-bindgen/pull/1583)

* When using `--target web` the path passed to `init` is no longer required.
  [#1579](https://github.com/rustwasm/wasm-bindgen/pull/1579)

### Fixed

* Some diagnostics related to compiler errors in `#[wasm_bindgen]` have been
  improved.
  [#1550](https://github.com/rustwasm/wasm-bindgen/pull/1550)

* The support for weak references has been updated to the current JS proposal.
  [#1557](https://github.com/rustwasm/wasm-bindgen/pull/1557)

* Documentation and feature gating for web-sys dictionaries has improved.
  [#1572](https://github.com/rustwasm/wasm-bindgen/pull/1572)

* Getter and setter TypeScript has been fixed.
  [#1577](https://github.com/rustwasm/wasm-bindgen/pull/1577)

* The `env_logger` crate and its tree of dependencies is no longer required to
  build `web-sys`.
  [#1586](https://github.com/rustwasm/wasm-bindgen/pull/1586)

--------------------------------------------------------------------------------

## 0.2.45

Released 2019-05-20.

### Fixed

* Using `__wbindgen_cb_forget` on `--target web` has been fixed.
  [#1544](https://github.com/rustwasm/wasm-bindgen/pull/1544)

### Changed

* More whitelists have been added for `web-sys` to use shared slices instead of
  mutable slices.
  [#1539](https://github.com/rustwasm/wasm-bindgen/pull/1539)

--------------------------------------------------------------------------------

## 0.2.44

Released 2019-05-16.

### Added

* Support for exporting "fields" on JS objects wrapping Rust structs which are
  hooked up to getters/setters has been added. This is in addition to `pub`
  struct fields and allows performing more complicated computations in
  getters/setters.
  [#1440](https://github.com/rustwasm/wasm-bindgen/pull/1440)

* Support for futures 0.3 (and `async` / `await` syntax) has been added to the
  `wasm-bindgen-futures` crate.
  [#1507](https://github.com/rustwasm/wasm-bindgen/pull/1507)

* Stacks of imported JS functions that throw and aren't marked `catch` are now
  logged in debug mode.
  [#1466](https://github.com/rustwasm/wasm-bindgen/pull/1466)

* A utility for counting the size of the `anyref` heap has been added.
  [#1521](https://github.com/rustwasm/wasm-bindgen/pull/1521)

* Passing ASCII-only strings to Wasm should now be significantly faster.
  [#1470](https://github.com/rustwasm/wasm-bindgen/pull/1470)

* The `selectionStart` and `selectionEnd` APIs of text areas have been enabled.
  [#1533](https://github.com/rustwasm/wasm-bindgen/pull/1533)

### Changed

* Some more methods in `web-sys` now take immutable slices instead of mutable
  ones.
  [#1508](https://github.com/rustwasm/wasm-bindgen/pull/1508)

* TypeScript bindings for `Option<T>` arguments now use `foo?` where possible.
  [#1483](https://github.com/rustwasm/wasm-bindgen/pull/1483)

### Fixed

* Unnecessary bindings to `__wbindgen_object_drop_ref` have been fixed.
  [#1504](https://github.com/rustwasm/wasm-bindgen/pull/1504)

* Some direct imports have been fixed for `--target web`.
  [#1503](https://github.com/rustwasm/wasm-bindgen/pull/1503)

* Both importing and exporting the same name has been fixed.
  [#1506](https://github.com/rustwasm/wasm-bindgen/pull/1506)

* TypeScript typings for `init` in `--target web` have been fixed.
  [#1520](https://github.com/rustwasm/wasm-bindgen/pull/1520)

* Calling a dropped `Closure` should no longer "segfault" but produce a clear
  error.
  [#1530](https://github.com/rustwasm/wasm-bindgen/pull/1530)

--------------------------------------------------------------------------------

## 0.2.43

Released 2019-04-29.

### Added

* Support for `isize` and `usize` arrays has been added.
  [#1448](https://github.com/rustwasm/wasm-bindgen/pull/1448)

* Support customizing `dyn_ref` and friends via a new `is_type_of` attribute and
  apply it to some `js_sys` bindings.
  [#1405](https://github.com/rustwasm/wasm-bindgen/pull/1405)
  [#1450](https://github.com/rustwasm/wasm-bindgen/pull/1450)
  [#1490](https://github.com/rustwasm/wasm-bindgen/pull/1490)

* A new `skip` attribute to `#[wasm_bindgen]` has been added to skip fields and
  methods when generating bindings.
  [#1410](https://github.com/rustwasm/wasm-bindgen/pull/1410)

* More bindings have been added to `web-sys` for interfaces tagged with
  `[NoInterfaceObject]` in WebIDL. These types always fail `dyn_ref` and friends
  and must be manually casted into.
  [#1449](https://github.com/rustwasm/wasm-bindgen/pull/1449)

* Added `Debug for JsFuture`.
  [#1477](https://github.com/rustwasm/wasm-bindgen/pull/1477)

* Initial bindings for `Atomics` and `SharedArrayBuffer` have been added to
  `js_sys`.
  [#1463](https://github.com/rustwasm/wasm-bindgen/pull/1463)

* Bindings for `Object.fromEntries` has been added to `js_sys`.
  [#1456](https://github.com/rustwasm/wasm-bindgen/pull/1456)

* Tuple structs exported to JS now have indexed struct properties.
  [#1467](https://github.com/rustwasm/wasm-bindgen/pull/1467)

* Binding for `new Function(args, body)` has been added to `js_sys`.
  [#1492](https://github.com/rustwasm/wasm-bindgen/pull/1492)

* Bindings for some variadic functions have been added to `js_sys`.
  [#1491](https://github.com/rustwasm/wasm-bindgen/pull/1491)

### Changed

* Many `js-sys` types have received various tweaks and improvements to ensure
  they're consistent and work similarly to native Rust types.
  [#1447](https://github.com/rustwasm/wasm-bindgen/pull/1447)
  [#1444](https://github.com/rustwasm/wasm-bindgen/pull/1444)
  [#1473](https://github.com/rustwasm/wasm-bindgen/pull/1473)

* Dummy types in `js-sys` only used to namespace methods were removed and now
  modules are used for namespacing instead.
  [#1451](https://github.com/rustwasm/wasm-bindgen/pull/1451)

* Bindings in `web-sys` are formatted by default for ease of usage in IDEs.
  [#1461](https://github.com/rustwasm/wasm-bindgen/pull/1461)

### Fixed

* Documentation for Rust methods now show up in TypeScript as well.
  [#1472](https://github.com/rustwasm/wasm-bindgen/pull/1472)

--------------------------------------------------------------------------------

## 0.2.42

Released 2019-04-11.

### Fixed

* Fixed an issue in Firefox where using `encodeInto` accidentally caused empty
  strings to keep getting passed to Rust.
  [#1434](https://github.com/rustwasm/wasm-bindgen/pull/1434)

--------------------------------------------------------------------------------

## 0.2.41

Released 2019-04-10.

### Added

* Initial support for transitive NPM dependencies has been added.
  [#1305](https://github.com/rustwasm/wasm-bindgen/pull/1305)

* The `constructor` property of `Object` is now bound in `js-sys`.
  [#1403](https://github.com/rustwasm/wasm-bindgen/pull/1403)

* The `Closure` type now always implements `Debug`.
  [#1408](https://github.com/rustwasm/wasm-bindgen/pull/1408)

* Closures which take one `&T` argument are now supported. More implementations
  may be added in the future, but for now it's just one argument closures.
  [#1417](https://github.com/rustwasm/wasm-bindgen/pull/1417)

* The TypeScript bindings for `--web` now expose the `init` function.
  [#1412](https://github.com/rustwasm/wasm-bindgen/pull/1412)

* A `js_sys::JsString::is_valid_utf16` method has been added to handle unpaired
  surrogates in JS strings. Surrounding documentation has also been updated to
  document this potential pitfall.
  [#1416](https://github.com/rustwasm/wasm-bindgen/pull/1416)

* A `wasm_bindgen::function_table()` function has been added to expose the
  `WebAssembly.Table` and get access to it in Wasm code.
  [#1431](https://github.com/rustwasm/wasm-bindgen/pull/1431)

### Fixed

* Reexporting the `wasm_bindgen` macro in crates has been fixed.
  [#1359](https://github.com/rustwasm/wasm-bindgen/pull/1359)

* Returning `u32` to JS has been fixed where large `u32` values would show up in
  JS as large negative numbers.
  [#1401](https://github.com/rustwasm/wasm-bindgen/pull/1401)

* Manual instantiation with `WebAssembly.Module` has been fixed.
  [#1419](https://github.com/rustwasm/wasm-bindgen/pull/1419)

* Error message for non-`Copy` public struct fields has been improved.
  [#1430](https://github.com/rustwasm/wasm-bindgen/pull/1430)

### Changed

* Performance of passing strings to Rust in Node.js has been improved.
  [#1391](https://github.com/rustwasm/wasm-bindgen/pull/1391)

* Performance of `js_sys::try_iter` has been improved.
  [#1393](https://github.com/rustwasm/wasm-bindgen/pull/1393)

* Performance of using `TextEncoder#encodeInto` has been improved.
  [#1414](https://github.com/rustwasm/wasm-bindgen/pull/1414)

--------------------------------------------------------------------------------

## 0.2.40

Released 2019-03-21.

### Added

* TypeScript and JS generation will now attempt to preserve argument names in
  the generated JS where possible.
  [#1344](https://github.com/rustwasm/wasm-bindgen/pull/1344)

* Enable `Option<T>` support for enums defined in WebIDL.
  [#1350](https://github.com/rustwasm/wasm-bindgen/pull/1350)

* Add a `raw_module` attribute to `#[wasm_bindgen]` which is the same as
  `module` except doesn't attempt to recognize `./`, `../`, `or `/` prefixed
  paths.
  [#1353](https://github.com/rustwasm/wasm-bindgen/pull/1353)

* The `wasm-bindgen` CLI flags have now all been renamed under a `--target`
  flag. Instead of `--web` you'll now pass `--target web`, for example. This
  increases consistency between the `wasm-bindgen` and `wasm-pack` CLI.
  [#1369](https://github.com/rustwasm/wasm-bindgen/pull/1369)

### Fixed

* Definitions for `TypedArray` imports of `js-sys` have been unified with a
  macro to improve consistency and fix future bugs.
  [#1371](https://github.com/rustwasm/wasm-bindgen/pull/1371)

* Usage of `--no-modules` in CloudFlare workers should now work by default.
  [#1384](https://github.com/rustwasm/wasm-bindgen/pull/1384)

* A use-after-free when a closure is reinvoked after being destroyed on the Rust
  die has been fixed.
  [#1385](https://github.com/rustwasm/wasm-bindgen/pull/1385)

* A bug causing nondeterministic generation of JS bindings has been fixed.
  [#1383](https://github.com/rustwasm/wasm-bindgen/pull/1383)

--------------------------------------------------------------------------------

## 0.2.39

Released 2018-03-13.

### Added

* Crates can now import locally written JS snippets to get bundled into the
  final output. See [RFC 6] for more details as well as the PR.
  [#1295](https://github.com/rustwasm/wasm-bindgen/pull/1295)

[RFC 6]: https://github.com/rustwasm/rfcs/pull/6

### Changed

* A typo in the return value of `slice` methods on typed arrays in `js-sys` was
  corrected.
  [#1321](https://github.com/rustwasm/wasm-bindgen/pull/1321)

* The directory specified by `--out-dir` is now created if it doesn't exist
  already.
  [#1330](https://github.com/rustwasm/wasm-bindgen/pull/1330)

### Fixed

* A bug where if `nom` was in a crate graph and was compiled with the
  `verbose-errors` feature has been fixed. Previously the `wasm-bindgen-webidl`
  crate wouldn't compile, and now it will.
  [#1338](https://github.com/rustwasm/wasm-bindgen/pull/1338)

--------------------------------------------------------------------------------

## 0.2.38

Released 2019-03-04.

### Added

* Support for `Option<RustStruct>` in `#[wasm_bindgen]` functions has now been
  added.
  [#1275](https://github.com/rustwasm/wasm-bindgen/pull/1275)

* Experimental support for the `anyref` type proposal in WebAssembly has now
  landed and is enabled with `WASM_BINDGEN_ANYREF=1`.
  [#1002](https://github.com/rustwasm/wasm-bindgen/pull/1002)

* Support for the new browser `TextEncode#encodeInto` API has been added.
  [#1279](https://github.com/rustwasm/wasm-bindgen/pull/1279)

* JS doc comments are now added to TypeScript bindings in addition to the JS
  bindings generated.
  [#1302](https://github.com/rustwasm/wasm-bindgen/pull/1302)

* Initial support for `FnOnce` closures has been added to the `Closure` type.
  [#1281](https://github.com/rustwasm/wasm-bindgen/pull/1281)

### Fixed

* Fixed an internal assert tripping when some modules were compiled with LTO.
  [#1274](https://github.com/rustwasm/wasm-bindgen/pull/1274)

* The `Context` type in the `wasm-bindgen-test` crate had its JS name changed to
  avoid conflicts with other crates that have a `Context` type being exported.
  [#1280](https://github.com/rustwasm/wasm-bindgen/pull/1280)

* The headless test runner for Safari on macOS High Sierra has been fixed.
  [#1298](https://github.com/rustwasm/wasm-bindgen/pull/1298)

### Changed

* The `wasm-bindgen` CLI tool now emits the `producers` section again with
  relevant bugs having been fixed in the meantime. The
  `--remove-producers-section` flag can continue to be used to omit emission of
  this section.
  [#1263](https://github.com/rustwasm/wasm-bindgen/pull/1263)

--------------------------------------------------------------------------------

## 0.2.37

Released 2019-02-15.

### Added

* The `HtmlMediaElement` type now exposes a `src_object` getter.
  [#1248](https://github.com/rustwasm/wasm-bindgen/pull/1248).

* The `js_sys::Reflect` type now has specializes getter/setters for `u32` and
  `f64` indices.
  [#1225](https://github.com/rustwasm/wasm-bindgen/pull/1225).

* A `--remove-producers-section` flag has been added to the CLI tool to, well,
  remove the `producers` section from the final Wasm file.
  [#1256](https://github.com/rustwasm/wasm-bindgen/pull/1256).

### Fixed

* The `wasm-bindgen` CLI tool will correctly strip DWARF debug information
  unless `--keep-debug` is passed.
  [#1255](https://github.com/rustwasm/wasm-bindgen/pull/1255).

### Changed

* The `wasm-bindgen` CLI tool no longer emits the `producers` custom section by
  default to work around a [webpack bug]. See
  [#1260](https://github.com/rustwasm/wasm-bindgen/pull/1260).

[webpack bug]: https://github.com/webpack/webpack/pull/8786

--------------------------------------------------------------------------------

## 0.2.36

Released 2019-02-12.

### Fixed

* Fixed a bug where using closures and LTO together caused a panic inside the
  `wasm-bindgen` CLI tool. See
  [#1244](https://github.com/rustwasm/wasm-bindgen/issues/1244).

--------------------------------------------------------------------------------

## 0.2.35

Released 2019-02-12.

### Changed

* `wasm-bindgen` now internally uses the `walrus` crate to perform its
  transformations of the Wasm that rustc/LLVM emits. See
  [#1237](https://github.com/rustwasm/wasm-bindgen/pull/1237).

### Fixed

* When `WebAssembly.instantiateStreaming` fails due to incorrect MIME type,
  *actually* properly recover. See
  [#1243](https://github.com/rustwasm/wasm-bindgen/pull/1243).

--------------------------------------------------------------------------------

## 0.2.34

Released 2019-02-11.

### Added

* Added support for optional `enum`s. See
  [#1214](https://github.com/rustwasm/wasm-bindgen/pull/1214).
* Added the `UnwrapThrowExt<T>` trait, which can enable smaller code sizes for
  panics. See [#1219](https://github.com/rustwasm/wasm-bindgen/pull/1219).

### Fixed

* Some `WebGlRenderingContext` methods are now whitelisted to use shared slices
  instead of exclusive slices. See
  [#1199](https://github.com/rustwasm/wasm-bindgen/pull/1199).
* Fixed TypeScript definitions for optional types. See
  [#1201](https://github.com/rustwasm/wasm-bindgen/pull/1201).
* Quiet clippy warnings inside generated code. See
  [1207](https://github.com/rustwasm/wasm-bindgen/pull/1207).
* Fixed using `cfg_attr` and `wasm_bindgen` together like `#[cfg_attr(...,
  wasm_bindgen)]`. See
  [1208](https://github.com/rustwasm/wasm-bindgen/pull/1208).
* The WebAudio example program was fixed. See
  [#1215](https://github.com/rustwasm/wasm-bindgen/pull/1215).
* Fixed logging HTML in `wasm-bindgen-test`. See
  [#1233](https://github.com/rustwasm/wasm-bindgen/pull/1233).
* When `WebAssembly.instantiateStreaming` fails due to incorrect MIME type,
  properly recover. See
  [#1235](https://github.com/rustwasm/wasm-bindgen/pull/1235).

--------------------------------------------------------------------------------

## 0.2.33

Released 2019-01-18.

### Added

* Improved the `Debug` output of `JsValue`
  [#1161](https://github.com/rustwasm/wasm-bindgen/pull/1161)

* Bindings for `JSON.stringify` and its optional arguments have been added
  [#1190](https://github.com/rustwasm/wasm-bindgen/pull/1190)

### Fixed

* A bug with windows binaries being released has ben resolved.

--------------------------------------------------------------------------------

## 0.2.32

Released 2019-01-16.

### Added

* Added support for Web IDL sequences. This enabled bindings generation for a
  couple more Web APIs. We generate functions for Web APIs that take sequences
  to accept any iterable, and for Web APIs that return sequences, a
  `js_sys::Array` is returned. See
  [#1152](https://github.com/rustwasm/wasm-bindgen/pull/1152) and
  [#1038](https://github.com/rustwasm/wasm-bindgen/issues/1038).
* The `wasm-bindgen-test` test runner will capture `console.debug`,
  `console.info`, and `console.warn` log messages and print them to `stdout`
  now. It already supported `console.log` and `console.error` and continues to
  support them. See
  [#1183](https://github.com/rustwasm/wasm-bindgen/issues/1183) and
  [#1184](https://github.com/rustwasm/wasm-bindgen/pull/1184).
* Added additional `--debug`-only assertions in the emitted JS glue for cases
  where an imported JS function that is not annotated with
  `#[wasm_bindgen(catch)]` throws an exception. This should help catch some bugs
  earlier! See [#1179](https://github.com/rustwasm/wasm-bindgen/pull/1179).

### Fixed

* Fixed a bug where `#[wasm_bindgen_test]` tests would fail in non-headless Web
  browsers if they used `console.log`. See
  [#1167](https://github.com/rustwasm/wasm-bindgen/pull/1167).
* Fixed a bug where returning closures from exported functions sometimes
  resulted in a faulty error. See
  [#1174](https://github.com/rustwasm/wasm-bindgen/issues/1174) and
  [#1175](https://github.com/rustwasm/wasm-bindgen/pull/1175).
* Sometimes our generated TypeScript interface files had syntax errors in them
  (missing semicolons). This has been fixed. See
  [#1181](https://github.com/rustwasm/wasm-bindgen/pull/1181).

--------------------------------------------------------------------------------

## 0.2.31

Released 2019-01-09.

### Added

* A new `spawn_local` function has been added to the `wasm-bindgen-futures`
  crate.
  [#1148](https://github.com/rustwasm/wasm-bindgen/pull/1148)

* Built-in conversions are now available from typed arrays and Rust arrays.
  [#1147](https://github.com/rustwasm/wasm-bindgen/pull/1147)

### Fixed

* Some casing of dictionary properties in WebIDL has been fixed.
  [#1155](https://github.com/rustwasm/wasm-bindgen/pull/1155)

--------------------------------------------------------------------------------

## 0.2.30

Released 2019-01-07.

### Added

* The `wasm-bindgen` CLI now has an `--out-name` argument to name the output
  module.
  [#1084](https://github.com/rustwasm/wasm-bindgen/pull/1084)

* Support for importing the `default` export has been added.
  [#1106](https://github.com/rustwasm/wasm-bindgen/pull/1106)

### Changed

* All `web-sys` methods are now flagged as `structural`, fixing a few bindings.
  [#1117](https://github.com/rustwasm/wasm-bindgen/pull/1117)

### Fixed

* A small bug with LTO and closures has been fixed.
  [#1145](https://github.com/rustwasm/wasm-bindgen/pull/1145)

--------------------------------------------------------------------------------

## 0.2.29

Released 2018-12-04.

### Added

* Add a `#[wasm_bindgen(start)]` attribute to customize the `start` section of
  the Wasm module.
  [#1057](https://github.com/rustwasm/wasm-bindgen/pull/1057)

* Add support for producing the new "producers" section of Wasm binaries
  [#1041](https://github.com/rustwasm/wasm-bindgen/pull/1041)

* Add support a `typescript_custom_section` attribute for producing custom
  typescript abstractions
  [#1048](https://github.com/rustwasm/wasm-bindgen/pull/1048)

* Generate `*.d.ts` files for Wasm files in addition to the JS bindings
  [#1053](https://github.com/rustwasm/wasm-bindgen/pull/1053)

* Add a feature to assert that all attributes in `#[wasm_bindgen]` are used to
  help catch typos and mistakes
  [#1055](https://github.com/rustwasm/wasm-bindgen/pull/1055)

### Changed

* JS glue generation has received a few small optimizations such as removing
  shims and removing object allocations
  [#1033](https://github.com/rustwasm/wasm-bindgen/pull/1033)
  [#1030](https://github.com/rustwasm/wasm-bindgen/pull/1030)

* JS glue now just uses one array of JS objects instead of two
  [#1069](https://github.com/rustwasm/wasm-bindgen/pull/1069)

### Fixed

* Fix a typo in the `--no-modules` generated JS
  [#1045](https://github.com/rustwasm/wasm-bindgen/pull/1045)

--------------------------------------------------------------------------------

## 0.2.28

Released 2018-11-12.

### Added

* The `js_class` support is now supported on exported types to define a
  different class in JS than is named in Rust
  [#1012](https://github.com/rustwasm/wasm-bindgen/pull/1012)

* More WebIDL bindings are exposed with some internal restructuring to ignore
  unimplemented types at a different location
  [#1014](https://github.com/rustwasm/wasm-bindgen/pull/1014)

* All imported types now implement `Deref` to their first `extends` attribute
  (or `JsValue` if one isn't listed). This is intended to greatly improve the
  ergonomics of `web-sys` bindings by allowing easy access to parent class
  methods
  [#1019](https://github.com/rustwasm/wasm-bindgen/pull/1019)

* A new attribute, `final`, can be applied to JS imports. This attribute is
  relatively nuanced and [best explained in documentation][final-dox], but is
  added since `structural` is now the default
  [#1019](https://github.com/rustwasm/wasm-bindgen/pull/1019)

[final-dox]: https://rustwasm.github.io/wasm-bindgen/reference/attributes/on-js-imports/final.html

* A new CLI flag, `--remove-name-section`, can be passed to remove the wasm
  `name` section which contains the names of functions for debugging (typically
  not needed in release mode)
  [#1024](https://github.com/rustwasm/wasm-bindgen/pull/1024)

### Changed

* All imported functions are now `structural` by default. This shouldn't change
  the semantics of imported functions, only how they're invoked in the JS
  function shims that are generated by `wasm-bindgen`. More discussion can be
  founed on [RFC 5] and the PR
  [#1019](https://github.com/rustwasm/wasm-bindgen/pull/1019)

[RFC 5]: https://rustwasm.github.io/rfcs/005-structural-and-deref.html

* JS glue assertions for moved arguments are now only emitted in debug mode,
  which is still off by default
  [#1020](https://github.com/rustwasm/wasm-bindgen/pull/1020)

### Fixed

* Typescript generated bindings now correctly reflect `Option<T>` for more types
  [#1008](https://github.com/rustwasm/wasm-bindgen/pull/1008)

* The JS shim code generation has been optimized for `structural` bindings (now
  the default) to include fewer JS shims and more easily optimizable for JS
  engines
  [#1019](https://github.com/rustwasm/wasm-bindgen/pull/1019)

* Passing a `WebAssembly.Module` to the `--no-modules` constructor has been
  fixed
  [#1025](https://github.com/rustwasm/wasm-bindgen/pull/1025)

--------------------------------------------------------------------------------

## 0.2.27

Released 2018-10-29.

### Fixed

* Fixed an internal panic where the gc passes were being too aggressive
  [#995](https://github.com/rustwasm/wasm-bindgen/pull/995)

--------------------------------------------------------------------------------

## 0.2.26

Released 2018-10-29.

### Added

* The `TypedArray.slice` methods have now been bound in `js-sys`.
  [#956](https://github.com/rustwasm/wasm-bindgen/pull/956)

* The `Debug` and `Clone` traits are now implemented for `js_sys::Promise`.
  [#957](https://github.com/rustwasm/wasm-bindgen/pull/957)

* The `js_sys::DataView` type now exposes overloads to specify endianness.
  [#966](https://github.com/rustwasm/wasm-bindgen/pull/966)

* When using `--no-modules` a `WebAssembly.Module` can now be directly passed
  into the instantiation glue.
  [#969](https://github.com/rustwasm/wasm-bindgen/pull/969)

### Fixed

* The `JsValue` type is no longer considered `Send`.
  [#955](https://github.com/rustwasm/wasm-bindgen/pull/955)

* The generated JS glue is now more robust in the face of missing APIs.
  [#959](https://github.com/rustwasm/wasm-bindgen/pull/959)

* An issue with the latest version of `safaridriver` used to run headless tests
  has been resolved.
  [#991](https://github.com/rustwasm/wasm-bindgen/pull/991)

--------------------------------------------------------------------------------

## 0.2.25

Released 2018-10-10.

### Fixed

* Using `wasm-bindgen` will no longer unconditionally pull in Rust's default
  allocator for Wasm (dlmalloc) regardless if you configured a custom global
  allocator (eg wee_alloc).
  [#947](https://github.com/rustwasm/wasm-bindgen/pull/947)

* Fixed web-sys build on some Windows machines.
  [#943](https://github.com/rustwasm/wasm-bindgen/issues/943)

* Fixed generated ES class bindings to Rust structs that were only referenced
  through struct fields.
  [#948](https://github.com/rustwasm/wasm-bindgen/issues/948)

--------------------------------------------------------------------------------

## 0.2.24

Released 2018-10-05.

### Added

* Constructors for types in `web-sys` should now have better documentation.

* A new `vendor_prefix` attribute in `#[wasm_bindgen]` is supported to bind APIs
  on the web which may have a vendor prefix (like `webkitAudioContext`). This is
  then subsequently used to fix `AudioContext` usage in Safari.

* The `#[wasm_bindgen(extends = Foo)]` attribute now supports full paths, so you
  can also say `#[wasm_bindgen(extends = foo::Bar)]` and such.

### Changed

* The `Closure<T>` type is now optimized when the underlying closure is a ZST.
  The type now no longer allocates memory in this situation.

* The documentation now has a list of caveats for browser support, including how
  `TextEncoder` and `TextDecoder` are not implemented in Edge. If you're using
  webpack there's a listed strategy available, and improvements to the polyfill
  strategy are always welcome!

* The `BaseAudioContext` and `AudioScheduledSourceNode` types in `web-sys` have
  been deprecated as they don't exist in Safari or Edge.

### Fixed

* Fixed the `#[wasm_bindgen_test]`'s error messages in a browser to correctly
  escape HTML-looking output.

* WebIDL Attributes on `Window` are now correctly bound to not go through
  `Window.prototype` which doesn't exist but instead use a `structural`
  definition.

* Fixed a codegen error when the `BorrowMut` trait was in scope.

* Fixed TypeScript generation for constructors of classes, it was accidentally
  producing a syntactially invalid file!

--------------------------------------------------------------------------------

## 0.2.23

Released 2018-09-26.

### Added

* [This is the first release of the `web-sys`
  crate!](https://rustwasm.github.io/2018/09/26/announcing-web-sys.html)

* Added support for unions of interfaces and non-interfaces in the WebIDL
  frontend.

* Added a policy for inclusion of new ECMAScript features in `js-sys`: the
  feature must be in stage 4 or greater for us to support it.

* Added some documentation about size profiling and optimization with
  `wasm-bindgen` to the guide.

* Added the `Clamped<T>` type for generating JavaScript `Uint8ClampedArray`s.

* CI is now running on beta! Can't wait for the `rustc` release trains to roll
  over, so we can run CI on stable too!

* Added the `js_sys::try_iter` function, which checks arbitrary JS values for
  compliance with the JS iteration protocol, and if they are iterable, converts
  them into an iterator over the JS values that they yield.

### Changed

* We now only generate null checks on methods on the JS side when in debug
  mode. For safety we will always null check on the Rust side, however.

* Improved error messages when defining setters that don't start with `set_` and
  don't use `js_name = ...`.

* Improved generated code for classes in a way that avoids an unnecessary
  allocation with static methods that return `Self` but are not the "main"
  constructor.

* **BREAKING:** `js_sys::Reflect` APIs are all fallible now. This is because
  reflecting on `Proxy`s whose trap handlers throw an exception can cause any of
  the reflection APIs to throw. Accordingly, `js_sys` has been bumped from
  `0.2.X` to `0.3.X`.

### Fixed

* The method of ensuring that `__wbindgen_malloc` and `__wbindgen_free` are
  always emitted in the `.wasm` binary, regardless of seeming reachability is
  now zero-overhead.

--------------------------------------------------------------------------------

## 0.2.22

Released 2018-09-21

### Added

* The `IntoIterator` trait is now implemented for JS `Iterator` types
* A number of variadic methods in `js-sys` have had explicit arities added.
* The guide has been improved quite a bit as well as enhanced with more examples
* The `js-sys` crate is now complete! Thanks so much to everyone involved to
  help fill out all the APIs.
* Exported Rust functions with `#[wasm_bindgen]` can now return a `Result` where
  the `Err` payload is raised as an exception in JS.

### Fixed

* An issue with running `wasm-bindgen` on crates that have been compiled with
  LTO has been resolved.

--------------------------------------------------------------------------------

## 0.2.21

Released 2018-09-07

### Added

* Added many more bindings for `WebAssembly` in the `js-sys` crate.

### Fixed

* The "names" section of the Wasm binary is now correctly preserved by
  wasm-bindgen.

--------------------------------------------------------------------------------

## 0.2.20

Released 2018-09-06

### Added

* All of `wasm-bindgen` is configured to compile on stable Rust as of the
  upcoming 1.30.0 release, scheduled for October 25, 2018.
* The underlying `JsValue` of a `Closure<T>` type can now be extracted at any
  time.
* Initial and experimental support was added for modules that have shared memory
  (use atomic instructions).

### Removed

* The `--wasm2asm` flag of `wasm2es6js` was removed because the `wasm2asm` tool
  has been removed from upstream Binaryen. This is replaced with the new
  `wasm2js` tool from Binaryen.

### Fixed

* The "schema" version for wasm-bindgen now changes on all publishes, meaning we
  can't forget to update it. This means that the crate version and CLI version
  must exactly match.
* The `wasm-bindgen` crate now has a `links` key which forbids multiple versions
  of `wasm-bindgen` from being linked into a dependency graph, fixing obscure
  linking errors with a more first-class error message.
* Binary releases for Windows has been fixed.

--------------------------------------------------------------------------------

## 0.2.19 (and 0.2.18)

Released 2018-08-27.

### Added

* Added bindings to `js-sys` for some `WebAssembly` types.
* Added bindings to `js-sys` for some `Intl` types.
* Added bindings to `js-sys` for some `String` methods.
* Added an example of using the WebAudio APIs.
* Added an example of using the `fetch` API.
* Added more `extends` annotations for types in `js-sys`.
* Experimental support for `WeakRef` was added to automatically deallocate Rust
  objects when gc'd.
* Added support for executing `wasm-bindgen` over modules that import their
  memory.
* Added a global `memory()` function in the `wasm-bindgen` crate for accessing
  the JS object that represent wasm's own memory.

### Removed

* Removed `AsMut` implementations for imported objects.

### Fixed

* Fixed the `constructor` and `catch` attributes combined on imported types.
* Fixed importing the same-named static in two modules.

--------------------------------------------------------------------------------

## 0.2.17

Released 2018-08-16.

### Added

* Greatly expanded documentation in the wasm-bindgen guide.
* Added bindings to `js-sys` for `Intl.DateTimeFormat`
* Added a number of `extends` attributes for types in `js-sys`

### Fixed

* Fixed compile on latest nightly with latest `proc-macro2`
* Fixed compilation in some scenarios on Windows with paths in `module` paths

--------------------------------------------------------------------------------

## 0.2.16

Released 2018-08-13.

### Added

* Added the `wasm_bindgen::JsCast` trait, as described in [RFC #2][rfc-2].
* Added [the `#[wasm_bindgen(extends = ...)]` attribute][extends-attr] to
  describe inheritance relationships, as described in [RFC #2][rfc-2].
* Added support for receiving `Option<&T>` parameters from JavaScript in
  exported Rust functions and methods.
* Added support for receiving `Option<u32>` and other option-wrapped scalars.
* Added reference documentation to the guide for every `#[wasm_bindgen]`
  attribute and how it affects the generated bindings.
* Published the `wasm-bindgen-futures` crate for converting between JS
  `Promise`s and Rust `Future`s.

### Changed

* Overhauled the guide's documentation on passing JS closures to Rust, and Rust
  closures to JS.
* Overhauled the guide's documentation on using serde to serialize complex data
  to `JsValue` and deserialize `JsValue`s back into complex data.
* Static methods are now always bound to their JS class, as is required for
  `Promise`'s static methods.

### Removed

* Removed internal usage of `syn`'s `visit-mut` cargo feature, which should
  result in faster build times.

### Fixed

* Various usage errors for the `#[wasm_bindgen]` proc-macro are now properly
  reported with source span information, rather than `panic!()`s inside the
  proc-macro.
* Fixed a bug where taking a struct by reference and returning a slice resulted
  in lexical variable redeclaration errors in the generated JS glue. [#662][]
* The `#[wasm_bindgen(js_class = "....")]` attribute for binding methods to
  renamed imported JS classes now properly works with constructors.

[rfc-2]: https://rustwasm.github.io/rfcs/002-wasm-bindgen-inheritance-casting.html
[extends-attr]: https://rustwasm.github.io/wasm-bindgen/reference/attributes/on-js-imports/extends.html
[#662]: https://github.com/rustwasm/wasm-bindgen/pull/662

--------------------------------------------------------------------------------

## 0.2.15

Released 2018-07-26.

### Fixed

* Fixed `wasm-bindgen` CLI version mismatch checks that got broken in the last
  point release.

--------------------------------------------------------------------------------

## 0.2.14

Released 2018-07-25.

### Fixed

* Fixed compilation errors on targets that use
  Mach-O. [#545](https://github.com/rustwasm/wasm-bindgen/issues/545)

--------------------------------------------------------------------------------

## 0.2.13

Released 2018-07-22.

### Added

* Support the `#[wasm_bindgen(js_name = foo)]` attribute on exported functions
  and methods to allow renaming an export to JS. This allows JS to call it by
  one name and Rust to call it by another, for example using `camelCase` in JS
  and `snake_case` in Rust

### Fixed

* Compilation with the latest nightly compiler has been fixed (nightlies on and
  after 2018-07-21)

--------------------------------------------------------------------------------

## 0.2.12

Released 2018-07-19.

This release is mostly internal refactorings and minor improvements to the
existing crates and functionality, but the bigs news is an upcoming `js-sys` and
`web-sys` set of crates. The `js-sys` crate will expose [all global JS
bindings][js-all] and the `web-sys` crate will be generated from WebIDL to
expose all APIs browsers have. More info on this soon!

[js-all]: https://github.com/rustwasm/wasm-bindgen/issues/275

### Added

* Support for `Option<T>` was added where `T` can be a number of slices or
  imported types.
* Comments in Rust are now preserved in generated JS bindings, as well as
  comments being generated to indicate the types of arguments/return values.
* The online documentation has been reorganized [into a book][book].
* The generated JS is now formatted better by default for readability.
* A `--keep-debug` flag has been added to the CLI to retain debug sections by
  default. This happens by default when `--debug` is passed.

[book]: https://rustwasm.github.io/wasm-bindgen/

### Fixed

* Compilation with the latest nightly compiler has been fixed (nightlies on and
  after 2018-07-19)
* Declarations of an imported function in multiple crates have been fixed to not
  conflict.
* Compilation with `#![deny(missing_docs)]` has been fixed.

--------------------------------------------------------------------------------

## 0.2.11

Released 2018-05-24.

--------------------------------------------------------------------------------

## 0.2.10

Released 2018-05-17.

--------------------------------------------------------------------------------

## 0.2.9

Released 2018-05-11.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/CHANGELOG.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/README.md
<div align="center">

  <h1><code>wasm-bindgen</code></h1>

  <p>
    <strong>Facilitating high-level interactions between Wasm modules and JavaScript.</strong>
  </p>

  <p>
    <a href="https://github.com/rustwasm/wasm-bindgen/actions/workflows/main.yml?query=branch%3Amain"><img src="https://github.com/rustwasm/wasm-bindgen/actions/workflows/main.yml/badge.svg?branch=main" alt="Build Status" /></a>
    <a href="https://crates.io/crates/wasm-bindgen"><img src="https://img.shields.io/crates/v/wasm-bindgen.svg?style=flat-square" alt="Crates.io version" /></a>
    <a href="https://crates.io/crates/wasm-bindgen"><img src="https://img.shields.io/crates/d/wasm-bindgen.svg?style=flat-square" alt="Download" /></a>
    <a href="https://docs.rs/wasm-bindgen"><img src="https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square" alt="docs.rs docs" /></a>
  </p>

  <h3>
    <a href="https://rustwasm.github.io/wasm-bindgen/">Guide (main branch)</a>
    <span> | </span>
    <a href="https://docs.rs/wasm-bindgen">API Docs</a>
    <span> | </span>
    <a href="https://github.com/rustwasm/wasm-bindgen/blob/master/CONTRIBUTING.md">Contributing</a>
    <span> | </span>
    <a href="https://discord.gg/xMZ7CCY">Chat</a>
  </h3>

  <sub>Built with 🦀🕸 by <a href="https://rustwasm.github.io/">The Rust and WebAssembly Working Group</a></sub>
</div>

## Install `wasm-bindgen-cli`

You can install it using `cargo install`:

```
cargo install wasm-bindgen-cli
```

Or, you can download it from the
[release page](https://github.com/rustwasm/wasm-bindgen/releases).

If you have [`cargo-binstall`](https://crates.io/crates/cargo-binstall) installed,
then you can install the pre-built artifacts by running:

```
cargo binstall wasm-bindgen-cli
```

## Example

Import JavaScript things into Rust and export Rust things to JavaScript.

```rust
use wasm_bindgen::prelude::*;

// Import the `window.alert` function from the Web.
#[wasm_bindgen]
extern "C" {
    fn alert(s: &str);
}

// Export a `greet` function from Rust to JavaScript, that alerts a
// hello message.
#[wasm_bindgen]
pub fn greet(name: &str) {
    alert(&format!("Hello, {}!", name));
}
```

Use exported Rust things from JavaScript with ECMAScript modules!

```js
import { greet } from "./hello_world";

greet("World!");
```

## Features

* **Lightweight.** Only pay for what you use. `wasm-bindgen` only generates
  bindings and glue for the JavaScript imports you actually use and Rust
  functionality that you export. For example, importing and using the
  `document.querySelector` method doesn't cause `Node.prototype.appendChild` or
  `window.alert` to be included in the bindings as well.

* **ECMAScript modules.** Just import WebAssembly modules the same way you would
  import JavaScript modules. Future compatible with [WebAssembly modules and
  ECMAScript modules integration][wasm-es-modules].

* **Designed with the ["Web IDL bindings" proposal][webidl-bindings] in mind.**
  Eventually, there won't be any JavaScript shims between Rust-generated wasm
  functions and native DOM methods. Because the Wasm functions are statically
  type checked, some of those native methods' dynamic type checks should become
  unnecessary, promising to unlock even-faster-than-JavaScript DOM access.

[wasm-es-modules]: https://github.com/WebAssembly/esm-integration
[webidl-bindings]: https://github.com/WebAssembly/proposals/issues/8

## Guide

[**📚 Read the `wasm-bindgen` guide here! 📚**](https://rustwasm.github.io/docs/wasm-bindgen/)

You can find general documentation about using Rust and WebAssembly together
[here](https://rustwasm.github.io/docs).

## API Docs

- [wasm-bindgen](https://docs.rs/wasm-bindgen)
- [js-sys](https://docs.rs/js-sys)
- [web-sys](https://docs.rs/web-sys)
- [wasm-bindgen-futures](https://docs.rs/wasm-bindgen-futures)

## MSRV Policy

Libraries that are released on [crates.io](https://crates.io) have a MSRV of v1.57. Changes to the MSRV will be accompanied by a minor version bump.

CLI tools and their corresponding support libraries have a MSRV of v1.76. Changes to the MSRV will be accompanied by a patch version bump.

## License

This project is licensed under either of

 * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or
   http://www.apache.org/licenses/LICENSE-2.0)
 * MIT license ([LICENSE-MIT](LICENSE-MIT) or
   http://opensource.org/licenses/MIT)

at your option.

## Contribution

**[See the "Contributing" section of the guide for information on
hacking on `wasm-bindgen`!][contributing]**

Unless you explicitly state otherwise, any contribution intentionally submitted
for inclusion in this project by you, as defined in the Apache-2.0 license,
shall be dual licensed as above, without any additional terms or conditions.

[contributing]: https://rustwasm.github.io/docs/wasm-bindgen/contributing/index.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/CONTRIBUTING.md
# Contributing

See the ["Contributing" section of the `wasm-bindgen`
guide](https://rustwasm.github.io/docs/wasm-bindgen/contributing/index.html).

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/CONTRIBUTING.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/SUMMARY.md
# Summary

[Introduction](./introduction.md)

--------------------------------------------------------------------------------

- [Examples](./examples/index.md)
  - [Hello, World!](./examples/hello-world.md)
  - [Using `console.log`](./examples/console-log.md)
  - [Small Wasm files](./examples/add.md)
  - [Without a Bundler](./examples/without-a-bundler.md)
  - [Synchronous Instantiation](./examples/synchronous-instantiation.md)
  - [Importing functions from JS](./examples/import-js.md)
  - [Working with `char`](./examples/char.md)
  - [js-sys: WebAssembly in WebAssembly](./examples/wasm-in-wasm.md)
  - [web-sys: DOM hello world](./examples/dom.md)
  - [web-sys: Closures](./examples/closures.md)
  - [web-sys: `performance.now`](./examples/performance.md)
  - [web-sys: using `fetch`](./examples/fetch.md)
  - [web-sys: Weather report](./examples/weather_report.md)
  - [web-sys: `canvas` hello world](./examples/2d-canvas.md)
  - [web-sys: `canvas` Julia set](./examples/julia.md)
  - [web-sys: WebAudio](./examples/web-audio.md)
  - [web-sys: WebGL](./examples/webgl.md)
  - [web-sys: WebSockets](./examples/websockets.md)
  - [web-sys: WebRTC DataChannel](./examples/webrtc_datachannel.md)
  - [web-sys: `requestAnimationFrame`](./examples/request-animation-frame.md)
  - [web-sys: A Simple Paint Program](./examples/paint.md)
  - [web-sys: Wasm in Web Worker](./examples/wasm-in-web-worker.md)
  - [Parallel Raytracing](./examples/raytrace.md)
  - [Wasm Audio Worklet](./examples/wasm-audio-worklet.md)
  - [web-sys: A TODO MVC App](./examples/todomvc.md)
- [Reference](./reference/index.md)
  - [Deployment](./reference/deployment.md)
  - [JS snippets](./reference/js-snippets.md)
  - [Static JS Objects](./reference/static-js-objects.md)
  - [Passing Rust Closures to JS](./reference/passing-rust-closures-to-js.md)
  - [Receiving JS Closures in Rust](./reference/receiving-js-closures-in-rust.md)
  - [`Promise`s and `Future`s](./reference/js-promises-and-rust-futures.md)
  - [Iterating over JS Values](./reference/iterating-over-js-values.md)
  - [Arbitrary Data with Serde](./reference/arbitrary-data-with-serde.md)
  - [Accessing Properties of Untyped JS Values](./reference/accessing-properties-of-untyped-js-values.md)
  - [Working with Duck-Typed Interfaces](./reference/working-with-duck-typed-interfaces.md)
  - [Command Line Interface](./reference/cli.md)
  - [Optimizing for Size](./reference/optimize-size.md)
  - [Supported Rust Targets](./reference/rust-targets.md)
  - [Supported Browsers](./reference/browser-support.md)
  - [Support for Weak References](./reference/weak-references.md)
  - [Support for Reference Types](./reference/reference-types.md)
  - [Supported Types](./reference/types.md)
    - [Imported JavaScript Types](./reference/types/imported-js-types.md)
    - [Exported Rust Types](./reference/types/exported-rust-types.md)
    - [`JsValue`](./reference/types/jsvalue.md)
    - [`Box<[T]>` and `Vec<T>`](./reference/types/boxed-slices.md)
    - [`*const T` and `*mut T`](./reference/types/pointers.md)
    - [`NonNull<T>`](./reference/types/non-null.md)
    - [Numbers](./reference/types/numbers.md)
    - [`bool`](./reference/types/bool.md)
    - [`char`](./reference/types/char.md)
    - [`str`](./reference/types/str.md)
    - [`String`](./reference/types/string.md)
    - [Number Slices](./reference/types/number-slices.md)
    - [Boxed Number Slices](./reference/types/boxed-number-slices.md)
    - [`Result<T, E>`](./reference/types/result.md)
  - [`#[wasm_bindgen]` Attributes](./reference/attributes/index.md)
    - [On JavaScript Imports](./reference/attributes/on-js-imports/index.md)
      - [`catch`](./reference/attributes/on-js-imports/catch.md)
      - [`constructor`](./reference/attributes/on-js-imports/constructor.md)
      - [`extends`](./reference/attributes/on-js-imports/extends.md)
      - [`getter` and `setter`](./reference/attributes/on-js-imports/getter-and-setter.md)
      - [`final`](./reference/attributes/on-js-imports/final.md)
      - [`indexing_getter`, `indexing_setter`, and `indexing_deleter`](./reference/attributes/on-js-imports/indexing-getter-setter-deleter.md)
      - [`js_class = "Blah"`](./reference/attributes/on-js-imports/js_class.md)
      - [`js_name`](./reference/attributes/on-js-imports/js_name.md)
      - [`js_namespace`](./reference/attributes/on-js-imports/js_namespace.md)
      - [`method`](./reference/attributes/on-js-imports/method.md)
      - [`module = "blah"`](./reference/attributes/on-js-imports/module.md)
      - [`raw_module = "blah"`](./reference/attributes/on-js-imports/raw_module.md)
      - [`no_deref`](./reference/attributes/on-js-imports/no_deref.md)
      - [`static_method_of = Blah`](./reference/attributes/on-js-imports/static_method_of.md)
      - [`structural`](./reference/attributes/on-js-imports/structural.md)
      - [`typescript_type`](./reference/attributes/on-js-imports/typescript_type.md)
      - [`variadic`](./reference/attributes/on-js-imports/variadic.md)
      - [`vendor_prefix`](./reference/attributes/on-js-imports/vendor_prefix.md)
    - [On Rust Exports](./reference/attributes/on-rust-exports/index.md)
      - [`constructor`](./reference/attributes/on-rust-exports/constructor.md)
      - [`js_name = Blah`](./reference/attributes/on-rust-exports/js_name.md)
      - [`js_class = Blah`](./reference/attributes/on-rust-exports/js_class.md)
      - [`readonly`](./reference/attributes/on-rust-exports/readonly.md)
      - [`skip`](./reference/attributes/on-rust-exports/skip.md)
      - [`skip_jsdoc`](./reference/attributes/on-rust-exports/skip_jsdoc.md)
      - [`start`](./reference/attributes/on-rust-exports/start.md)
      - [`main`](./reference/attributes/on-rust-exports/main.md)
      - [`typescript_custom_section`](./reference/attributes/on-rust-exports/typescript_custom_section.md)
      - [`getter` and `setter`](./reference/attributes/on-rust-exports/getter-and-setter.md)
      - [`inspectable`](./reference/attributes/on-rust-exports/inspectable.md)
      - [`skip_typescript`](./reference/attributes/on-rust-exports/skip_typescript.md)
      - [`getter_with_clone`](./reference/attributes/on-rust-exports/getter_with_clone.md)
      - [`unchecked_return_type` and `unchecked_param_type`](./reference/attributes/on-rust-exports/unchecked_type.md)
      - [`return_description` and `param_description`](./reference/attributes/on-rust-exports/description.md)

- [`web-sys`](./web-sys/index.md)
  - [Using `web-sys`](./web-sys/using-web-sys.md)
  - [Cargo Features](./web-sys/cargo-features.md)
  - [Function Overloads](./web-sys/function-overloads.md)
  - [Type Translations](./web-sys/type-translations.md)
  - [Inheritance](./web-sys/inheritance.md)
  - [Unstable APIs](./web-sys/unstable-apis.md)

- [Testing with `wasm-bindgen-test`](./wasm-bindgen-test/index.md)
  - [Usage](./wasm-bindgen-test/usage.md)
  - [Writing Asynchronous Tests](./wasm-bindgen-test/asynchronous-tests.md)
  - [Testing in Headless Browsers](./wasm-bindgen-test/browsers.md)
  - [Continuous Integration](./wasm-bindgen-test/continuous-integration.md)
  - [Coverage (Experimental)](./wasm-bindgen-test/coverage.md)

- [Contributing to `wasm-bindgen`](./contributing/index.md)
  - [Testing](./contributing/testing.md)
  - [Internal Design](./contributing/design/index.md)
    - [JS Objects in Rust](./contributing/design/js-objects-in-rust.md)
    - [Exporting a function to JS](./contributing/design/exporting-rust.md)
    - [Exporting a struct to JS](./contributing/design/exporting-rust-struct.md)
    - [Importing a function from JS](./contributing/design/importing-js.md)
    - [Importing a class from JS](./contributing/design/importing-js-struct.md)
    - [Rust Type conversions](./contributing/design/rust-type-conversions.md)
    - [Types in `wasm-bindgen`](./contributing/design/describe.md)
  - [`js-sys`](./contributing/js-sys/index.md)
    - [Testing](./contributing/js-sys/testing.md)
    - [Adding More APIs](./contributing/js-sys/adding-more-apis.md)
  - [`web-sys`](./contributing/web-sys/index.md)
    - [Overview](./contributing/web-sys/overview.md)
    - [Testing](./contributing/web-sys/testing.md)
    - [Logging](./contributing/web-sys/logging.md)
    - [Supporting More Web APIs](./contributing/web-sys/supporting-more-web-apis.md)
  - [Publishing](./contributing/publishing.md)
  - [Team](./contributing/team.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/SUMMARY.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/introduction.md
# Introduction

This book is about `wasm-bindgen`, a Rust library and CLI tool that facilitate
high-level interactions between Wasm modules and JavaScript. The `wasm-bindgen`
tool and crate are only one part of the [Rust and WebAssembly
ecosystem][rustwasm]. If you're not familiar already with `wasm-bindgen` it's
recommended to start by reading the [Game of Life tutorial][gol]. If you're
curious about `wasm-pack`, you can find that [documentation here][wasm-pack].

The `wasm-bindgen` tool is sort of half polyfill for features like the
[component model proposal][component-model] and half features for empowering high-level
interactions between JS and wasm-compiled code (currently mostly from Rust).
More specifically this project allows JS/wasm to communicate with strings, JS
objects, classes, etc, as opposed to purely integers and floats. Using
`wasm-bindgen` for example you can define a JS class in Rust or take a string
from JS or return one. The functionality is growing as well!

Currently this tool is Rust-focused but the underlying foundation is
language-independent, and it's hoping that over time as this tool stabilizes
that it can be used for languages like C/C++!

Notable features of this project includes:

* Importing JS functionality in to Rust such as [DOM manipulation][dom-ex],
  [console logging][console-log], or [performance monitoring][perf-ex].
* Exporting Rust functionality to JS such as classes, functions, etc.
* Working with rich types like strings, numbers, classes, closures, and objects
  rather than simply `u32` and floats.
* Automatically generating TypeScript bindings for Rust code being consumed by
  JS.

With the addition of [`wasm-pack`][wasm-pack] you can run the gamut from running Rust on
the web locally, publishing it as part of a larger application, or even
publishing Rust-compiled-to-WebAssembly on NPM!

[component-model]: https://github.com/WebAssembly/component-model
[dom-ex]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/dom
[console-log]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/console_log
[perf-ex]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/performance
[hello-online]: https://webassembly.studio/?f=gzubao6tg3
[rustwasm]: https://rustwasm.github.io/
[gol]: https://rustwasm.github.io/docs/book/
[wasm-pack]: https://rustwasm.github.io/docs/wasm-pack/

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/introduction.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/browsers.md
# Testing in Headless Browsers

## Configure via Environment Variables

By default tests run on Node.js. To target browsers you can use the `WASM_BINDGEN_USE_BROWSER` environment variable:

```sh
WASM_BINDGEN_USE_BROWSER=1 cargo test --target wasm32-unknown-unknown
```

The following configurations are available:
- `WASM_BINDGEN_USE_DEDICATED_WORKER`: for dedicated workers
- `WASM_BINDGEN_USE_SHARED_WORKER`: for shared workers
- `WASM_BINDGEN_USE_SERVICE_WORKER`: for service workers
- `WASM_BINDGEN_USE_DENO`: for Deno
- `WASM_BINDGEN_USE_NODE_EXPERIMENTAL`: for Node.js but as an ES module

## Force Configuration

Tests can also be forced to run in a certain environment by using the
`wasm_bindgen_test_configure!` macro:

```rust
use wasm_bindgen_test::wasm_bindgen_test_configure;

// Run in a browser.
wasm_bindgen_test_configure!(run_in_browser);
// Or run in a dedicated worker.
wasm_bindgen_test_configure!(run_in_dedicated_worker);
// Or run in a shared worker.
wasm_bindgen_test_configure!(run_in_shared_worker);
// Or run in a service worker.
wasm_bindgen_test_configure!(run_in_service_worker);
// Or run in Node.js but as an ES module.
wasm_bindgen_test_configure!(run_in_node_experimental);
```

Note that this will ignore any environment variable set.

## Configuring Which Browser is Used

To control which browser is used for headless testing, use the appropriate flag
with `wasm-pack test`:

* `wasm-pack test --chrome` &mdash; Run the tests in Chrome. This machine must
  have Chrome installed.

* `wasm-pack test --firefox` &mdash; Run the tests in Firefox. This machine must
  have Firefox installed.

* `wasm-pack test --safari` &mdash; Run the tests in Safari. This machine must
  have Safari installed.

If multiple browser flags are passed, the tests will be run under each browser.

## Running the Tests in the Headless Browser

Once the tests are configured to run in a headless browser, just run `wasm-pack
test` with the appropriate browser flags and `--headless`:

```bash
wasm-pack test --headless --chrome --firefox --safari
```

## Configuring Headless Browser capabilities

Add the file `webdriver.json` to the root of your crate. Each browser has own 
section for capabilities. For example:

```json
{
  "moz:firefoxOptions": {
    "prefs": {
      "media.navigator.streams.fake": true,
      "media.navigator.permission.disabled": true
    },
    "args": []
  },
  "goog:chromeOptions": {
    "args": [
      "--use-fake-device-for-media-stream",
      "--use-fake-ui-for-media-stream"
    ]
  }
}
```
Full list supported capabilities can be found:

* for Chrome - [here](https://peter.sh/experiments/chromium-command-line-switches/)
* for Firefox - [here](https://developer.mozilla.org/en-US/docs/Web/WebDriver/Capabilities/firefoxOptions)

Note that the `headless` argument is always enabled for both browsers.

### Debugging Headless Browser Tests

Omitting the `--headless` flag will disable headless mode, and allow you to
debug failing tests in your browser's devtools.

--------------------------------------------------------------------------------

## Appendix: Testing in headless browsers without `wasm-pack`

**⚠️ The recommended way to use `wasm-bindgen-test` is with `wasm-pack`, since it
will handle installing the test runner, installing a WebDriver client for your
browser, and informing `cargo` how to use the custom test runner.** However, you
can also manage those tasks yourself, if you wish.

### Configuring Which Browser is Used

If one of the following environment variables is set, then the corresponding
WebDriver and browser will be used. If none of these environment variables are
set, then the `$PATH` is searched for a suitable WebDriver implementation.

#### `GECKODRIVER=path/to/geckodriver`

Use Firefox for headless browser testing, and `geckodriver` as its
WebDriver.

The `firefox` binary must be on your `$PATH`.

[Get `geckodriver` here](https://github.com/mozilla/geckodriver/releases)

#### `CHROMEDRIVER=path/to/chromedriver`

Use Chrome for headless browser testing, and `chromedriver` as its
WebDriver.

The `chrome` binary must be on your `$PATH`.

[Get `chromedriver` here](http://chromedriver.chromium.org/downloads)

#### `SAFARIDRIVER=path/to/safaridriver`

Use Safari for headless browser testing, and `safaridriver` as its
WebDriver.

This is installed by default on Mac OS. It should be able to find your Safari
installation by default.

### Running the Tests in the Remote Headless Browser

Tests can be run on a remote webdriver. To do this, the above environment 
variables must be set as URL to the remote webdriver. For example:

```
CHROMEDRIVER_REMOTE=http://remote.host/
```

### Running the Tests in the Headless Browser

Once the tests are configured to run in a headless browser and the appropriate
environment variables are set, executing the tests for headless browsers is the
same as executing them for Node.js:

```bash
cargo test --target wasm32-unknown-unknown
```

#### Debugging Headless Browser Tests

Set the `NO_HEADLESS=1` environment variable and the browser tests will not run
headless. Instead, the tests will start a local server that you can visit in
your Web browser of choices, and headless testing should not be used. You can
then use your browser's devtools to debug.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/browsers.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/usage.md
# Using `wasm-bindgen-test`

### Add `wasm-bindgen-test` to Your `Cargo.toml`'s `[dev-dependencies]`

```toml
[dev-dependencies]
wasm-bindgen-test = "0.3.0"
```

Note that the `0.3.0` track of `wasm-bindgen-test` supports Rust 1.39.0+, which
is currently the nightly channel (as of 2019-09-05). If you want support for
older compilers use the `0.2.*` track of `wasm-bindgen-test`.

## Write Some Tests

Create a `$MY_CRATE/tests/wasm.rs` file:

```rust
use wasm_bindgen_test::*;

#[wasm_bindgen_test]
fn pass() {
    assert_eq!(1, 1);
}

#[wasm_bindgen_test]
fn fail() {
    assert_eq!(1, 2);
}

// On a target other then `wasm32-unknown-unknown`, the `#[test]` attribute
// will be used instead, allowing this test to run on any target.
#[wasm_bindgen_test(unsupported = test)]
fn all_targets() {
    assert_eq!(1, 2);
}
```

Writing tests is the same as normal Rust `#[test]`s, except we are using the
`#[wasm_bindgen_test]` attribute.

One other difference is that the tests **must** be in the root of the crate, or
within a `pub mod`. Putting them inside a private module will not work.

## Execute Your Tests

Run the tests with `wasm-pack test`. By default, the tests are generated to
target Node.js, but you can [configure tests to run inside headless
browsers](./browsers.html) as well.

```shell
$ wasm-pack test --node
    Finished dev [unoptimized + debuginfo] target(s) in 0.11s
     Running /home/.../target/wasm32-unknown-unknown/debug/deps/wasm-4a309ffe6ad80503.wasm
running 2 tests

test wasm::pass ... ok
test wasm::fail ... FAILED

failures:

---- wasm::fail output ----
    error output:
        panicked at 'assertion failed: `(left == right)`
          left: `1`,
         right: `2`', crates/test/tests/wasm.rs:14:5

    JS exception that was thrown:
        RuntimeError: unreachable
            at __rust_start_panic (wasm-function[1362]:33)
            at rust_panic (wasm-function[1357]:30)
            at std::panicking::rust_panic_with_hook::h56e5e464b0e7fc22 (wasm-function[1352]:444)
            at std::panicking::continue_panic_fmt::had70ba48785b9a8f (wasm-function[1350]:122)
            at std::panicking::begin_panic_fmt::h991e7d1ca9bf9c0c (wasm-function[1351]:95)
            at wasm::fail::ha4c23c69dfa0eea9 (wasm-function[88]:477)
            at core::ops::function::FnOnce::call_once::h633718dad359559a (wasm-function[21]:22)
            at wasm_bindgen_test::__rt::Context::execute::h2f669104986475eb (wasm-function[13]:291)
            at __wbg_test_fail_1 (wasm-function[87]:57)
            at module.exports.__wbg_apply_2ba774592c5223a7 (/home/alex/code/wasm-bindgen/target/wasm32-unknown-unknown/wbg-tmp/wasm-4a309ffe6ad80503.js:61:66)


failures:

    wasm::fail

test result: FAILED. 1 passed; 1 failed; 0 ignored

error: test failed, to rerun pass '--test wasm'
```

That's it!

--------------------------------------------------------------------------------

## Appendix: Using `wasm-bindgen-test` without `wasm-pack`

**⚠️ The recommended way to use `wasm-bindgen-test` is with `wasm-pack`, since it
will handle installing the test runner, installing a WebDriver client for your
browser, and informing `cargo` how to use the custom test runner.** However, you
can also manage those tasks yourself, if you wish.

In addition to the steps above, you must also do the following.

### Install the Test Runner

The test runner comes along with the main `wasm-bindgen` CLI tool. Make sure to
replace "X.Y.Z" with the same version of `wasm-bindgen` that you already have in
`Cargo.toml`!

```shell
cargo install wasm-bindgen-cli --vers "X.Y.Z"
```

### Configure `.cargo/config` to use the Test Runner

Add this to `$MY_CRATE/.cargo/config`:

```toml
[target.wasm32-unknown-unknown]
runner = 'wasm-bindgen-test-runner'
```

### Run the Tests

Run the tests by passing `--target wasm32-unknown-unknown` to `cargo test`:

```
cargo test --target wasm32-unknown-unknown
```

If you also need to run doctests, add the unstable [`-Zdoctest-xcompile`](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#doctest-xcompile) flag. This requires using the Rust nightly channel like this:

```
cargo +nightly test --target wasm32-unknown-unknown -Zdoctest-xcompile
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/usage.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/index.md
# Testing on `wasm32-unknown-unknown` with `wasm-bindgen-test`

The `wasm-bindgen-test` crate is an experimental test harness for Rust programs
compiled to Wasm using `wasm-bindgen` and the `wasm32-unknown-unknown`
target.

## Goals

* Write tests for Wasm as similar as possible to how you normally would write
  `#[test]`-style unit tests for native targets.

* Run the tests with the usual `cargo test` command but with an explicit wasm
  target:

  ```
  cargo test --target wasm32-unknown-unknown
  ```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/coverage.md
# Generating Coverage Data

You can ask the runner to generate coverage data from functions marked as `#[wasm_bindgen_test]` in the `.profraw` format.

<div class="warning">
  Coverage is still in an experimental state, requires Rust Nightly, may be
  unreliable and could experience breaking changes at any time.
</div>

## Enabling the feature

To enable this feature, you need to enable `cfg(wasm_bindgen_unstable_test_coverage)`.

## Generating the data

### `RUSTFLAGS` that need to be present

Make sure you are using `RUSTFLAGS=-Cinstrument-coverage -Zno-profiler-runtime`.

Due to the current limitation of `llvm-cov`, we can't collect profiling symbols from the generated `.wasm` files. Instead, we can grab them from the LLVM IR with `--emit=llvm-ir` by using Clang. Usage of Clang or any LLVM tools must match the LLVM version used by Rust.

### Arguments to the test runner

The following environment variables can be used to control the coverage output when [executing the test runner][1]:

- `WASM_BINDGEN_UNSTABLE_TEST_PROFRAW_OUT` to control the file name of the profraw or the directory in which it is placed. It might be necessary to provide the full path if e.g. running tests in a workspace.
- `WASM_BINDGEN_UNSTABLE_TEST_PROFRAW_PREFIX` to add a custom prefix to the profraw files. This can be useful if you're running the tests automatically in succession.

[1]: usage.html#appendix-using-wasm-bindgen-test-without-wasm-pack

### Target features

This feature relies on the [minicov] crate, which provides a profiling runtime for WebAssembly. It in turn uses [cc] to compile the runtime to Wasm, which [currently doesn't support accounting for target feature][2]. Use e.g. `CFLAGS_wasm32_unknown_unknown="-matomics -mbulk-memory"` to account for that.

[2]: https://github.com/rust-lang/cc-rs/issues/268
[cc]: https://crates.io/crates/cc
[minicov]: https://crates.io/crates/minicov

### Example

This adapts code taken from the [Rustc book], see that for more examples and general information on test coverage as well.

```sh
# Run the tests:
# `--tests` to not run documentation tests, which is currently not supported.
RUSTFLAGS="-Cinstrument-coverage -Zno-profiler-runtime --emit=llvm-ir --cfg=wasm_bindgen_unstable_test_coverage" \
CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_RUNNER=wasm-bindgen-test-runner \
cargo +nightly test --tests
# Compile to object files:
# - Extract a list of compiled artifacts from Cargo and filter them with `jq`.
# - Figure out the path to the LLVM IR file corresponding to an artifact.
# - Compile to object file with Clang and store for later usage with `llvm-cov`.
crate_name=name_of_the_tested_crate_in_snake_case
objects=()
IFS=$'\n'
for file in $(
    RUSTFLAGS="-Cinstrument-coverage -Zno-profiler-runtime --emit=llvm-ir --cfg=wasm_bindgen_unstable_test_coverage" \
    cargo +nightly test --tests --no-run --message-format=json | \
    jq -r "select(.reason == \"compiler-artifact\") | (select(.target.kind == [\"test\"]) // select(.target.name == \"$crate_name\")) | .filenames[0]"
)
do
    if [[ ${file##*.} == "rlib" ]]; then
        base=$(basename $file .rlib)
        file=$(dirname $file)/${base#"lib"}.ll
    else
        file=$(dirname $file)/$(basename $file .wasm).ll
    fi

    output = $(basename $file .ll).o
    clang-19 $file -Wno-override-module -c -o $output
    objects+=(-object $output)
done
# Merge all generated raw profiling data.
llvm-profdata-19 merge -sparse *.profraw -o coverage.profdata
# Produce test coverage data in the HTML format and pass the object files we generated earlier.
llvm-cov-19 show -show-instantiations=false -Xdemangler=rustfilt -output-dir coverage -format=html -instr-profile=coverage.profdata ${objects[@]} -sources src
```

[rustc book]: https://doc.rust-lang.org/nightly/rustc/instrument-coverage.html

## Attribution

These methods have originally been pioneered by [Hacken OÜ], see [their guide][3] as well.

[3]: https://hknio.github.io/wasmcov
[Hacken OÜ]: https://hacken.io

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/coverage.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/asynchronous-tests.md
# Writing Asynchronous Tests

Not all tests can execute immediately and some may need to do "blocking" work
like fetching resources and/or other bits and pieces. To accommodate this
asynchronous tests are also supported through the `futures` and
`wasm-bindgen-futures` crates.

Writing an asynchronous test is pretty simple, just use an `async` function!
You'll also likely want to use the `wasm-bindgen-futures` crate to convert JS
promises to Rust futures.

```rust
use wasm_bindgen::prelude::*;
use wasm_bindgen_futures::JsFuture;

#[wasm_bindgen_test]
async fn my_async_test() {
    // Create a promise that is ready on the next tick of the micro task queue.
    let promise = js_sys::Promise::resolve(&JsValue::from(42));

    // Convert that promise into a future and make the test wait on it.
    let x = JsFuture::from(promise).await.unwrap();
    assert_eq!(x, 42);
}
```

## Rust compiler compatibility

Note that `async` functions are only supported in stable from Rust 1.39.0 and
beyond.

If you're using the `futures` crate from crates.io in its 0.1 version then
you'll want to use the `0.3.*` version of `wasm-bindgen-futures` and the `0.2.8`
version of `wasm-bindgen-test`. In those modes you'll also need to use
`#[wasm_bindgen_test(async)]` instead of using an `async` function. In general
we'd recommend using the nightly version with `async` since the user experience
is much improved!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/asynchronous-tests.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/continuous-integration.md
# Setting Up Continuous Integration with `wasm-bindgen-test`

This page contains example configurations for running `wasm-bindgen-test`-based
tests in various CI services.

Is your favorite CI service missing? [Send us a pull
request!](https://github.com/rustwasm/wasm-bindgen)

## Travis CI

```yaml
language: rust
rust    : nightly

addons:
  firefox: latest
  chrome : stable

install:
  - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

script:

  # this will test the non Wasm targets if your crate has those, otherwise remove this line.
  #
  - cargo test

  - wasm-pack test --firefox --headless
  - wasm-pack test --chrome  --headless
```

## AppVeyor

```yaml
install:
  - ps: Install-Product node 10
  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain nightly
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -V
  - cargo -V
  - rustup target add wasm32-unknown-unknown
  - cargo install wasm-bindgen-cli

build: false

test_script:
  # Test in Chrome. chromedriver is installed by default in appveyor.
  - set CHROMEDRIVER=C:\Tools\WebDriver\chromedriver.exe
  - cargo test --target wasm32-unknown-unknown
  - set CHROMEDRIVER=
  # Test in Firefox. geckodriver is also installed by default.
  - set GECKODRIVER=C:\Tools\WebDriver\geckodriver.exe
  - cargo test --target wasm32-unknown-unknown
```

## GitHub Actions

```yaml
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - run: cargo test
      - run: wasm-pack test --headless --chrome
      - run: wasm-pack test --headless --firefox
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/wasm-bindgen-test/continuous-integration.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/publishing.md
# Publishing New `wasm-bindgen` Releases

1. <input type="checkbox"/> Compile the `publish.rs` script:

   ```
   rustc publish.rs
   ```

2. <input type="checkbox"/> Bump every crate's minor version:

   ```
   # Make sure you are in the root of the wasm-bindgen repo!
   ./publish bump
   ```

3. <input type="checkbox"/> Update CHANGELOG.md to add the to-be-released version number, compare URL and release date. [See this example](https://github.com/rustwasm/wasm-bindgen/commit/0b5f0eec2f3d5e75a923fd67ef14b3b5cc855c80#diff-06572a96a58dc510037d5efa622f9bec8519bc1beab13c9f251e97e657a9d4ed)

4. <input type="checkbox"/> Send a pull request for the version bump.

5. <input type="checkbox"/> After the pull request's CI is green and it has been
   merged, publish to cargo:

   ```
   # Make sure you are in the root of the wasm-bindgen repo!
   ./publish publish
   ```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/publishing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/testing.md
# Running `wasm-bindgen`'s Tests

## Wasm Tests on Node and Headless Browsers

These are the largest test suites, and most common to run in day to day
`wasm-bindgen` development. These tests are compiled to Wasm and then run in
Node.js or a headless browser via the WebDriver protocol.

```bash
WASM_BINDGEN_SPLIT_LINKED_MODULES=1 cargo test --target wasm32-unknown-unknown
```

See [the `wasm-bindgen-test` crate's
`README.md`](https://github.com/rustwasm/wasm-bindgen/blob/master/crates/test/README.md)
for details and configuring which headless browser is used.

## Sanity Tests for `wasm-bindgen` on the Native Host Target

This small test suite just verifies that exported `wasm-bindgen` methods can
still be used on the native host's target.

```
cargo test
```

## The Web IDL Frontend's Tests

```
cargo test -p webidl-tests --target wasm32-unknown-unknown
```

## The Macro UI Tests

These tests assert that we have reasonable error messages that point to the
right source spans when the `#[wasm_bindgen]` proc-macro is misused.

You can run these tests by running `cargo test` for the `wasm-bindgen-macro`
crate:

```
cargo test -p wasm-bindgen-macro
```

## The `js-sys` Tests

See [the `js-sys` testing page](js-sys/testing.html).

## The `web-sys` Tests

See [the `web-sys` testing page](web-sys/testing.html).

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/testing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/index.md
# Contributing to `wasm-bindgen`

This section contains instructions on how to get this project up and running for
development. You may want to browse the [unpublished guide documentation] for
`wasm-bindgen` as well as it may have more up-to-date information.

[unpublished documentation]: https://rustwasm.github.io/wasm-bindgen/

## Prerequisites

1. Rust. [Install Rust]. Once Rust is installed, run

    ```shell
    rustup target add wasm32-unknown-unknown
    ```

[install Rust]: https://www.rust-lang.org/en-US/install.html

2. The tests for this project use Node. Make sure you have node >= 10 installed,
   as that is when WebAssembly support was introduced. [Install Node].

[Install Node]: https://nodejs.org/en/

## Code Formatting

Although formatting rules are not mandatory, it is encouraged to run `cargo fmt` (`rustfmt`) with its default rules within a PR to maintain a more organized code base. If necessary, a PR with a single commit that formats the entire project is also welcome.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/team.md
# Team

`wasm-bindgen` follows the [`rustwasm` organization's governance described
here][governance]:

* All pull requests (including those made by a team member) must be approved by
  at least one other team member.

* Larger, more nuanced decisions about design, architecture, breaking changes,
  trade offs, etc are made by team consensus.

[governance]: https://github.com/rustwasm/team/blob/master/GOVERNANCE.md#repositories

## Members

<style>
img {
    max-width: 117px;
    max-height: 117px;
}
</style>

| [![](https://github.com/alexcrichton.png?size=117)][alexcrichton] | [![](https://github.com/fitzgen.png?size=117)][fitzgen] | [![](https://github.com/spastorino.png?size=117)][spastorino] | [![](https://github.com/ohanar.png?size=117)][ohanar] | [![](https://github.com/jonathan-s.png?size=117)][jonathan-s] |
|:---:|:---:|:---:|:---:|
| [`alexcrichton`][alexcrichton] | [`fitzgen`][fitzgen] | [`spastorino`][spastorino] | [`ohanar`][ohanar] | [`jonathan-s`][jonathan-s] |
| [![](https://github.com/sendilkumarn.png?size=117)][sendilkumarn] | [![](https://github.com/belfz.png?size=117)][belfz] | [![](https://github.com/afdw.png?size=117)][afdw] | | |
| [`sendilkumarn`][sendilkumarn] | [`belfz`][belfz] | [`afdw`][afdw] | | |

[alexcrichton]: https://github.com/alexcrichton
[fitzgen]: https://github.com/fitzgen
[spastorino]: https://github.com/spastorino
[ohanar]: https://github.com/ohanar
[jonathan-s]: https://github.com/jonathan-s
[sendilkumarn]: https://github.com/sendilkumarn
[belfz]: https://github.com/belfz
[afdw]: https://github.com/afdw

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/team.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/exporting-rust-struct.md
# Exporting a struct to JS

So far we've covered JS objects, importing functions, and exporting functions.
This has given us quite a rich base to build on so far, and that's great! We
sometimes, though, want to go even further and define a JS `class` in Rust. Or
in other words, we want to expose an object with methods from Rust to JS rather
than just importing/exporting free functions.

The `#[wasm_bindgen]` attribute can annotate both a `struct` and `impl` blocks
to allow:

```rust
#[wasm_bindgen]
pub struct Foo {
    internal: i32,
}

#[wasm_bindgen]
impl Foo {
    #[wasm_bindgen(constructor)]
    pub fn new(val: i32) -> Foo {
        Foo { internal: val }
    }

    pub fn get(&self) -> i32 {
        self.internal
    }

    pub fn set(&mut self, val: i32) {
        self.internal = val;
    }
}
```

This is a typical Rust `struct` definition for a type with a constructor and a
few methods. Annotating the struct with `#[wasm_bindgen]` means that we'll
generate necessary trait impls to convert this type to/from the JS boundary. The
annotated `impl` block here means that the functions inside will also be made
available to JS through generated shims. If we take a look at the generated JS
code for this we'll see:

```js
import * as wasm from './js_hello_world_bg';

export class Foo {
    static __construct(ptr) {
        return new Foo(ptr);
    }

    constructor(ptr) {
        this.ptr = ptr;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;
        wasm.__wbg_foo_free(ptr);
    }

    static new(arg0) {
        const ret = wasm.foo_new(arg0);
        return Foo.__construct(ret)
    }

    get() {
        const ret = wasm.foo_get(this.ptr);
        return ret;
    }

    set(arg0) {
        const ret = wasm.foo_set(this.ptr, arg0);
        return ret;
    }
}
```

That's actually not much! We can see here though how we've translated from Rust
to JS:

* Associated functions in Rust (those without `self`) turn into `static`
  functions in JS.
* Methods in Rust turn into methods in wasm.
* Manual memory management is exposed in JS as well. The `free` function is
  required to be invoked to deallocate resources on the Rust side of things.

To be able to use `new Foo()`, you'd need to annotate `new` as `#[wasm_bindgen(constructor)]`.

One important aspect to note here, though, is that once `free` is called the JS
object is "neutered" in that its internal pointer is nulled out. This means that
future usage of this object should trigger a panic in Rust.

The real trickery with these bindings ends up happening in Rust, however, so
let's take a look at that.

```rust
// original input to `#[wasm_bindgen]` omitted ...

#[export_name = "foo_new"]
pub extern "C" fn __wasm_bindgen_generated_Foo_new(arg0: i32) -> u32 {
    let ret = Foo::new(arg0);
    Box::into_raw(Box::new(WasmRefCell::new(ret))) as u32
}

#[export_name = "foo_get"]
pub extern "C" fn __wasm_bindgen_generated_Foo_get(me: u32) -> i32 {
    let me = me as *mut WasmRefCell<Foo>;
    wasm_bindgen::__rt::assert_not_null(me);
    let me = unsafe { &*me };
    return me.borrow().get();
}

#[export_name = "foo_set"]
pub extern "C" fn __wasm_bindgen_generated_Foo_set(me: u32, arg1: i32) {
    let me = me as *mut WasmRefCell<Foo>;
    wasm_bindgen::__rt::assert_not_null(me);
    let me = unsafe { &*me };
    me.borrow_mut().set(arg1);
}

#[no_mangle]
pub unsafe extern "C" fn __wbindgen_foo_free(me: u32) {
    let me = me as *mut WasmRefCell<Foo>;
    wasm_bindgen::__rt::assert_not_null(me);
    (*me).borrow_mut(); // ensure no active borrows
    drop(Box::from_raw(me));
}
```

As with before this is cleaned up from the actual output but it's the same idea
as to what's going on! Here we can see a shim for each function as well as a
shim for deallocating an instance of `Foo`. Recall that the only valid wasm
types today are numbers, so we're required to shoehorn all of `Foo` into a
`u32`, which is currently done via `Box` (like `std::unique_ptr` in C++).
Note, though, that there's an extra layer here, `WasmRefCell`. This type is the
same as [`RefCell`] and can be mostly glossed over.

The purpose for this type, if you're interested though, is to uphold Rust's
guarantees about aliasing in a world where aliasing is rampant (JS).
Specifically the `&Foo` type means that there can be as much aliasing as you'd
like, but crucially `&mut Foo` means that it is the sole pointer to the data
(no other `&Foo` to the same instance exists). The [`RefCell`] type in libstd
is a way of dynamically enforcing this at runtime (as opposed to compile time
where it usually happens). Baking in `WasmRefCell` is the same idea here,
adding runtime checks for aliasing which are typically happening at compile
time. This is currently a Rust-specific feature which isn't actually in the
`wasm-bindgen` tool itself, it's just in the Rust-generated code (aka the
`#[wasm_bindgen]` attribute).

[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/exporting-rust-struct.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/rust-type-conversions.md
# Rust Type conversions

Previously we've been seeing mostly abridged versions of type conversions when
values enter Rust. Here we'll go into some more depth about how this is
implemented. There are two categories of traits for converting values, traits
for converting values from Rust to JS and traits for the other way around.

## From Rust to JS

First up let's take a look at going from Rust to JS:

```rust
pub trait IntoWasmAbi: WasmDescribe {
    type Abi: WasmAbi;
    fn into_abi(self) -> Self::Abi;
}
```

And that's it! This is actually the only trait needed currently for translating
a Rust value to a JS one. There's a few points here:

* We'll get to `WasmDescribe` later in this section.

* The associated type `Abi` is the type of the raw data that we actually want to pass to JS.
  The bound `WasmAbi` is implemented for primitive types like `u32` and `f64`,
  which can be represented directly as WebAssembly values, as well of a couple
  of other types like `WasmSlice`:

  ```rust
  pub struct WasmSlice {
      pub ptr: u32,
      pub len: u32,
  }
  ```

  This struct, which is how things like strings are represented in FFI, isn't
  a WebAssembly primitive type, and so it can't be mapped directly to a
  WebAssembly parameter / return value. This is why `WasmAbi` lets types specify
  how they can be split up into multiple WebAssembly parameters:

  ```rust
  impl WasmAbi for WasmSlice {
      fn split(self) -> (u32, u32, (), ()) {
          (self.ptr, self.len, (), ())
      }

      // some other details to specify return type of `split`, go in the other direction
  }
  ```

  This means that a `WasmSlice` gets split up into two `u32` parameters.
  The extra unit types on the end are there because Rust doesn't let us make
  `WasmAbi` generic over variable-length tuples, so we just take tuples of 4
  elements. The unit types still end up getting passed to/from JS, but the C ABI
  just completely ignores them and doesn't generate any arguments.

  Since we can't return multiple values, when returning a `WasmSlice` we instead
  put the two `u32`s into a `#[repr(C)]` struct and return that.

* And finally we have the `into_abi` function, returning the `Abi` associated
  type which will be actually passed to JS.

This trait is implemented for all types that can be converted to JS and is
unconditionally used during codegen. For example you'll often see `IntoWasmAbi
for Foo` but also `IntoWasmAbi for &'a Foo`.

The `IntoWasmAbi` trait is used in two locations. First it's used to convert
return values of Rust exported functions to JS. Second it's used to convert the
Rust arguments of JS functions imported to Rust.

## From JS to Rust

Unfortunately the opposite direction from above, going from JS to Rust, is a bit
more complicated. Here we've got three traits:

```rust
pub trait FromWasmAbi: WasmDescribe {
    type Abi: WasmAbi;
    unsafe fn from_abi(js: Self::Abi) -> Self;
}

pub trait RefFromWasmAbi: WasmDescribe {
    type Abi: WasmAbi;
    type Anchor: Deref<Target=Self>;
    unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor;
}

pub trait RefMutFromWasmAbi: WasmDescribe {
    type Abi: WasmAbi;
    type Anchor: DerefMut<Target=Self>;
    unsafe fn ref_mut_from_abi(js: Self::Abi) -> Self::Anchor;
}
```

The `FromWasmAbi` is relatively straightforward, basically the opposite of
`IntoWasmAbi`. It takes the ABI argument (typically the same as
`IntoWasmAbi::Abi`) to produce an instance of
`Self`. This trait is implemented primarily for types that *don't* have internal
lifetimes or are references.

The latter two traits here are mostly the same, and are intended for generating
references (both shared and mutable references). They look almost the same as
`FromWasmAbi` except that they return an `Anchor` type which implements a
`Deref` trait rather than `Self`.

The `Ref*` traits allow having arguments in functions that are references rather
than bare types, for example `&str`, `&JsValue`, or `&[u8]`. The `Anchor` here
is required to ensure that the lifetimes don't persist beyond one function call
and remain anonymous.

The `From*` family of traits are used for converting the Rust arguments in Rust
exported functions to JS. They are also used for the return value in JS
functions imported into Rust.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/rust-type-conversions.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/exporting-rust.md
# Exporting a function to JS

Alright now that we've got a good grasp on JS objects and how they're working,
let's take a look at another feature of `wasm-bindgen`: exporting functionality
with types that are richer than just numbers.

The basic idea around exporting functionality with more flavorful types is that
the Wasm exports won't actually be called directly. Instead the generated
`foo.js` module will have shims for all exported functions in the Wasm module.

The most interesting conversion here happens with strings so let's take a look
at that.

```rust
#[wasm_bindgen]
pub fn greet(a: &str) -> String {
    format!("Hello, {}!", a)
}
```

Here we'd like to define an ES module that looks like

```ts
// foo.d.ts
export function greet(a: string): string;
```

To see what's going on, let's take a look at the generated shim

```js
import * as wasm from './foo_bg';

function passStringToWasm(arg) {
  const buf = new TextEncoder('utf-8').encode(arg);
  const len = buf.length;
  const ptr = wasm.__wbindgen_malloc(len, 1);
  let array = new Uint8Array(wasm.memory.buffer);
  array.set(buf, ptr);
  return [ptr, len];
}

function getStringFromWasm(ptr, len) {
  const mem = new Uint8Array(wasm.memory.buffer);
  const slice = mem.slice(ptr, ptr + len);
  const ret = new TextDecoder('utf-8').decode(slice);
  return ret;
}

export function greet(arg0) {
  const [ptr0, len0] = passStringToWasm(arg0);
  try {
    const ret = wasm.greet(ptr0, len0);
    const ptr = wasm.__wbindgen_boxed_str_ptr(ret);
    const len = wasm.__wbindgen_boxed_str_len(ret);
    const realRet = getStringFromWasm(ptr, len);
    wasm.__wbindgen_boxed_str_free(ret);
    return realRet;
  } finally {
    wasm.__wbindgen_free(ptr0, len0, 1);
  }
}
```

Phew, that's quite a lot! We can sort of see though if we look closely what's
happening:

* Strings are passed to Wasm via two arguments, a pointer and a length. Right
  now we have to copy the string onto the Wasm heap which means we'll be using
  `TextEncoder` to actually do the encoding. Once this is done we use an
  internal function in `wasm-bindgen` to allocate space for the string to go,
  and then we'll pass that ptr/length to Wasm later on.

* Returning strings from Wasm is a little tricky as we need to return a ptr/len
  pair, but Wasm currently only supports one return value (multiple return values
  [is being standardized](https://github.com/WebAssembly/design/issues/1146)).
  To work around this in the meantime, we're actually returning a pointer to a
  ptr/len pair, and then using functions to access the various fields.

* Some cleanup ends up happening in wasm. The `__wbindgen_boxed_str_free`
  function is used to free the return value of `greet` after it's been decoded
  onto the JS heap (using `TextDecoder`). The `__wbindgen_free` is then used to
  free the space we allocated to pass the string argument once the function call
  is done.

Next let's take a look at the Rust side of things as well. Here we'll be looking
at a mostly abbreviated and/or "simplified" in the sense of this is what it
compiles down to:

```rust
pub extern "C" fn greet(a: &str) -> String {
    format!("Hello, {}!", a)
}

#[export_name = "greet"]
pub extern "C" fn __wasm_bindgen_generated_greet(
    arg0_ptr: *const u8,
    arg0_len: usize,
) -> *mut String {
    let arg0 = unsafe {
        let slice = ::std::slice::from_raw_parts(arg0_ptr, arg0_len);
        ::std::str::from_utf8_unchecked(slice)
    };
    let _ret = greet(arg0);
    Box::into_raw(Box::new(_ret))
}
```

Here we can see again that our `greet` function is unmodified and has a wrapper
to call it. This wrapper will take the ptr/len argument and convert it to a
string slice, while the return value is boxed up into just a pointer and is
then returned up to was for reading via the `__wbindgen_boxed_str_*` functions.

So in general exporting a function involves a shim both in JS and in Rust with
each side translating to or from Wasm arguments to the native types of each
language. The `wasm-bindgen` tool manages hooking up all these shims while the
`#[wasm_bindgen]` macro takes care of the Rust shim as well.

Most arguments have a relatively clear way to convert them, bit if you've got
any questions just let me know!


-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/exporting-rust.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/importing-js-struct.md
# Importing a class from JS

Just like with functions after we've started exporting we'll also want to
import! Now that we've exported a `class` to JS we'll want to also be able to
import classes in Rust as well to invoke methods and such. Since JS classes are
in general just JS objects the bindings here will look pretty similar to the JS
object bindings describe above.

As usual though, let's dive into an example!

```rust
#[wasm_bindgen(module = "./bar")]
extern "C" {
    type Bar;

    #[wasm_bindgen(constructor)]
    fn new(arg: i32) -> Bar;

    #[wasm_bindgen(js_namespace = Bar)]
    fn another_function() -> i32;

    #[wasm_bindgen(method)]
    fn get(this: &Bar) -> i32;

    #[wasm_bindgen(method)]
    fn set(this: &Bar, val: i32);

    #[wasm_bindgen(method, getter)]
    fn property(this: &Bar) -> i32;

    #[wasm_bindgen(method, setter)]
    fn set_property(this: &Bar, val: i32);
}

fn run() {
    let bar = Bar::new(Bar::another_function());
    let x = bar.get();
    bar.set(x + 3);

    bar.set_property(bar.property() + 6);
}
```

Unlike our previous imports, this one's a bit more chatty! Remember that one of
the goals of `wasm-bindgen` is to use native Rust syntax wherever possible, so
this is mostly intended to use the `#[wasm_bindgen]` attribute to interpret
what's written down in Rust. Now there's a few attribute annotations here, so
let's go through one-by-one:

* `#[wasm_bindgen(module = "./bar")]` - seen before with imports this is declare
  where all the subsequent functionality is imported from. For example the `Bar`
  type is going to be imported from the `./bar` module.
* `type Bar` - this is a declaration of JS class as a new type in Rust. This
  means that a new type `Bar` is generated which is "opaque" but is represented
  as internally containing a `JsValue`. We'll see more on this later.
* `#[wasm_bindgen(constructor)]` - this indicates that the binding's name isn't
  actually used in JS but rather translates to `new Bar()`. The return value of
  this function must be a bare type, like `Bar`.
* `#[wasm_bindgen(js_namespace = Bar)]` - this attribute indicates that the
  function declaration is namespaced through the `Bar` class in JS.
* `#[wasm_bindgen(static_method_of = SomeJsClass)]` - this attribute is similar
  to `js_namespace`, but instead of producing a free function, produces a static
  method of `SomeJsClass`.
* `#[wasm_bindgen(method)]` - and finally, this attribute indicates that a
  method call is going to happen. The first argument must be a JS struct, like
  `Bar`, and the call in JS looks like `Bar.prototype.set.call(...)`.

With all that in mind, let's take a look at the JS generated.

```js
import * as wasm from './foo_bg';

import { Bar } from './bar';

// other support functions omitted...

export function __wbg_s_Bar_new() {
  return addHeapObject(new Bar());
}

const another_function_shim = Bar.another_function;
export function __wbg_s_Bar_another_function() {
  return another_function_shim();
}

const get_shim = Bar.prototype.get;
export function __wbg_s_Bar_get(ptr) {
  return shim.call(getObject(ptr));
}

const set_shim = Bar.prototype.set;
export function __wbg_s_Bar_set(ptr, arg0) {
  set_shim.call(getObject(ptr), arg0)
}

const property_shim = Object.getOwnPropertyDescriptor(Bar.prototype, 'property').get;
export function __wbg_s_Bar_property(ptr) {
  return property_shim.call(getObject(ptr));
}

const set_property_shim = Object.getOwnPropertyDescriptor(Bar.prototype, 'property').set;
export function __wbg_s_Bar_set_property(ptr, arg0) {
  set_property_shim.call(getObject(ptr), arg0)
}
```

Like when importing functions from JS we can see a bunch of shims are generated
for all the relevant functions. The `new` static function has the
`#[wasm_bindgen(constructor)]` attribute which means that instead of any
particular method it should actually invoke the `new` constructor instead (as
we see here). The static function `another_function`, however, is dispatched as
`Bar.another_function`.

The `get` and `set` functions are methods so they go through `Bar.prototype`,
and otherwise their first argument is implicitly the JS object itself which is
loaded through `getObject` like we saw earlier.

Some real meat starts to show up though on the Rust side of things, so let's
take a look:

```rust
pub struct Bar {
    obj: JsValue,
}

impl Bar {
    fn new() -> Bar {
        extern "C" {
            fn __wbg_s_Bar_new() -> u32;
        }
        unsafe {
            let ret = __wbg_s_Bar_new();
            Bar { obj: JsValue::__from_idx(ret) }
        }
    }

    fn another_function() -> i32 {
        extern "C" {
            fn __wbg_s_Bar_another_function() -> i32;
        }
        unsafe {
            __wbg_s_Bar_another_function()
        }
    }

    fn get(&self) -> i32 {
        extern "C" {
            fn __wbg_s_Bar_get(ptr: u32) -> i32;
        }
        unsafe {
            let ptr = self.obj.__get_idx();
            let ret = __wbg_s_Bar_get(ptr);
            return ret
        }
    }

    fn set(&self, val: i32) {
        extern "C" {
            fn __wbg_s_Bar_set(ptr: u32, val: i32);
        }
        unsafe {
            let ptr = self.obj.__get_idx();
            __wbg_s_Bar_set(ptr, val);
        }
    }

    fn property(&self) -> i32 {
        extern "C" {
            fn __wbg_s_Bar_property(ptr: u32) -> i32;
        }
        unsafe {
            let ptr = self.obj.__get_idx();
            let ret = __wbg_s_Bar_property(ptr);
            return ret
        }
    }

    fn set_property(&self, val: i32) {
        extern "C" {
            fn __wbg_s_Bar_set_property(ptr: u32, val: i32);
        }
        unsafe {
            let ptr = self.obj.__get_idx();
            __wbg_s_Bar_set_property(ptr, val);
        }
    }
}

impl WasmBoundary for Bar {
    // ...
}

impl ToRefWasmBoundary for Bar {
    // ...
}
```

In Rust we're seeing that a new type, `Bar`, is generated for this import of a
class. The type `Bar` internally contains a `JsValue` as an instance of `Bar`
is meant to represent a JS object stored in our module's stack/slab. This then
works mostly the same way that we saw JS objects work in the beginning.

When calling `Bar::new` we'll get an index back which is wrapped up in `Bar`
(which is itself just a `u32` in memory when stripped down). Each function then
passes the index as the first argument and otherwise forwards everything along
in Rust.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/importing-js-struct.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/js-objects-in-rust.md
# Polyfill for "JS objects in wasm"

One of the main goals of `wasm-bindgen` is to allow working with and passing
around JS objects in wasm, but that's not allowed today! While indeed true,
that's where the polyfill comes in.

The question here is how we shoehorn JS objects into a `u32` for Wasm to use.
The current strategy for this approach is to maintain a module-local variable
in the generated `foo.js` file: a `heap`.

### Temporary JS objects on the "stack"

The first slots in the `heap` in `foo.js` are considered a stack. This stack,
like typical program execution stacks, grows down. JS objects are pushed on the
bottom of the stack, and their index in the stack is the identifier that's passed
to wasm. A stack pointer is maintained to figure out where the next item is
pushed.

JS objects are then only removed from the bottom of the stack as well. Removal
is simply storing null then incrementing a counter.  Because of the "stack-y"
nature of this scheme it only works for when Wasm doesn't hold onto a JS object
(aka it only gets a "reference" in Rust parlance).

Let's take a look at an example.

```rust
// foo.rs
#[wasm_bindgen]
pub fn foo(a: &JsValue) {
    // ...
}
```

Here we're using the special `JsValue` type from the `wasm-bindgen` library
itself. Our exported function, `foo`, takes a *reference* to an object. This
notably means that it can't persist the object past the lifetime of this
function call.

Now what we actually want to generate is a JS module that looks like (in
TypeScript parlance)

```ts
// foo.d.ts
export function foo(a: any);
```

and what we actually generate looks something like:

```js
// foo.js
import * as wasm from './foo_bg';

const heap = new Array(32);
heap.push(undefined, null, true, false);
let stack_pointer = 32;

function addBorrowedObject(obj) {
  stack_pointer -= 1;
  heap[stack_pointer] = obj;
  return stack_pointer;
}

export function foo(arg0) {
  const idx0 = addBorrowedObject(arg0);
  try {
    wasm.foo(idx0);
  } finally {
    heap[stack_pointer++] = undefined;
  }
}
```

Here we can see a few notable points of action:

* The Wasm file was renamed to `foo_bg.wasm`, and we can see how the JS module
  generated here is importing from the Wasm file.
* Next we can see our `heap` module variable which is to store all JS values
  reference-able from wasm.
* Our exported function `foo`, takes an arbitrary argument, `arg0`, which is
  converted to an index with the `addBorrowedObject` object function. The index
  is then passed to Wasm so Wasm can operate with it.
* Finally, we have a `finally` which frees the stack slot as it's no longer
  used, popping the value that was pushed at the start of the function.

It's also helpful to dig into the Rust side of things to see what's going on
there! Let's take a look at the code that `#[wasm_bindgen]` generates in Rust:

```rust
// what the user wrote
pub fn foo(a: &JsValue) {
    // ...
}

#[export_name = "foo"]
pub extern "C" fn __wasm_bindgen_generated_foo(arg0: u32) {
    let arg0 = unsafe {
        ManuallyDrop::new(JsValue::__from_idx(arg0))
    };
    let arg0 = &*arg0;
    foo(arg0);
}
```

And as with the JS, the notable points here are:

* The original function, `foo`, is unmodified in the output
* A generated function here (with a unique name) is the one that's actually
  exported from the Wasm module
* Our generated function takes an integer argument (our index) and then wraps it
  in a `JsValue`. There's some trickery here that's not worth going into just
  yet, but we'll see in a bit what's happening under the hood.

### Long-lived JS objects

The above strategy is useful when JS objects are only temporarily used in Rust,
for example only during one function call. Sometimes, though, objects may have a
dynamic lifetime or otherwise need to be stored on Rust's heap. To cope with
this there's a second half of management of JS objects, naturally corresponding
to the other side of the JS `heap` array.

JS Objects passed to Wasm that are not references are assumed to have a dynamic
lifetime inside of the Wasm module. As a result the strict push/pop of the stack
won't work and we need more permanent storage for the JS objects. To cope with
this we build our own "slab allocator" of sorts.

A picture (or code) is worth a thousand words so let's show what happens with an
example.

```rust
// foo.rs
#[wasm_bindgen]
pub fn foo(a: JsValue) {
    // ...
}
```

Note that the `&` is missing in front of the `JsValue` we had before, and in
Rust parlance this means it's taking ownership of the JS value. The exported ES
module interface is the same as before, but the ownership mechanics are slightly
different. Let's see the generated JS's slab in action:

```js
import * as wasm from './foo_bg'; // imports from Wasm file

const heap = new Array(32);
heap.push(undefined, null, true, false);
let heap_next = 36;

function addHeapObject(obj) {
  if (heap_next === heap.length)
    heap.push(heap.length + 1);
  const idx = heap_next;
  heap_next = heap[idx];
  heap[idx] = obj;
  return idx;
}

export function foo(arg0) {
  const idx0 = addHeapObject(arg0);
  wasm.foo(idx0);
}

export function __wbindgen_object_drop_ref(idx) {
  heap[idx ] = heap_next;
  heap_next = idx;
}
```

Unlike before we're now calling `addHeapObject` on the argument to `foo` rather
than `addBorrowedObject`. This function will use `heap` and `heap_next` as a
slab allocator to acquire a slot to store the object, placing a structure there
once it's found. Note that this is going on the right-half of the array, unlike
the stack which resides on the left half. This discipline mirrors the stack/heap
in normal programs, roughly.

Another curious aspect of this generated module is the
`__wbindgen_object_drop_ref` function. This is one that's actually imported to
wasm rather than used in this module! This function is used to signal the end of
the lifetime of a `JsValue` in Rust, or in other words when it goes out of
scope. Otherwise though this function is largely just a general "slab free"
implementation.

And finally, let's take a look at the Rust generated again too:

```rust
// what the user wrote
pub fn foo(a: JsValue) {
    // ...
}

#[export_name = "foo"]
pub extern "C" fn __wasm_bindgen_generated_foo(arg0: u32) {
    let arg0 = unsafe {
        JsValue::__from_idx(arg0)
    };
    foo(arg0);
}
```

Ah that looks much more familiar! Not much interesting is happening here, so
let's move on to...

### Anatomy of `JsValue`

Currently the `JsValue` struct is actually quite simple in Rust, it's:

```rust
pub struct JsValue {
    idx: u32,
}

// "private" constructors

impl Drop for JsValue {
    fn drop(&mut self) {
        unsafe {
            __wbindgen_object_drop_ref(self.idx);
        }
    }
}
```

Or in other words it's a newtype wrapper around a `u32`, the index that we're
passed from wasm. The destructor here is where the `__wbindgen_object_drop_ref`
function is called to relinquish our reference count of the JS object, freeing
up our slot in the `slab` that we saw above.

If you'll recall as well, when we took `&JsValue` above we generated a wrapper
of `ManuallyDrop` around the local binding, and that's because we wanted to
avoid invoking this destructor when the object comes from the stack.

### Working with `heap` in reality

The above explanations are pretty close to what happens today, but in reality
there's a few differences especially around handling constant values like
`undefined`, `null`, etc. Be sure to check out the actual generated JS and the
generation code for the full details!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/js-objects-in-rust.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/index.md
# Design of `wasm-bindgen`

This section is intended to be a deep-dive into how `wasm-bindgen` internally
works today, specifically for Rust. If you're reading this far in the future it
may no longer be up to date, but feel free to open an issue and we can try to
answer questions and/or update this!

## Foundation: ES Modules

The first thing to know about `wasm-bindgen` is that it's fundamentally built on
the idea of ES Modules. In other words this tool takes an opinionated stance
that Wasm files *should be viewed as ES modules*. This means that you can
`import` from a Wasm file, use its `export`-ed functionality, etc, from normal
JS files.

Now unfortunately at the time of this writing the interface of Wasm interop
isn't very rich. Wasm modules can only call functions or export functions that
deal exclusively with `i32`, `i64`, `f32`, and `f64`. Bummer!

That's where this project comes in. The goal of `wasm-bindgen` is to enhance the
"ABI" of Wasm modules with richer types like classes, JS objects, Rust structs,
strings, etc. Keep in mind, though, that everything is based on ES Modules! This
means that the compiler is actually producing a "broken" Wasm file of sorts. The
wasm file emitted by rustc, for example, does not have the interface we would
like to have. Instead it requires the `wasm-bindgen` tool to postprocess the
file, generating a `foo.js` and `foo_bg.wasm` file. The `foo.js` file is the
desired interface expressed in JS (classes, types, strings, etc) and the
`foo_bg.wasm` module is simply used as an implementation detail (it was
lightly modified from the original `foo.wasm` file).

As more features are stabilized in WebAssembly over time (like component model)
the JS file is expected to get smaller and smaller. It's unlikely to ever
disappear, but `wasm-bindgen` is designed to follow the WebAssembly spec and
proposals closely to optimize JS/Rust as much as possible.

## Foundation #2: Unintrusive in Rust

On the more Rust-y side of things the `wasm-bindgen` crate is designed to
ideally have as minimal impact on a Rust crate as possible. Ideally a few
`#[wasm_bindgen]` attributes are annotated in key locations and otherwise you're
off to the races. The attribute strives to both not invent new syntax and work
with existing idioms today.

For example a library might exposed a function in normal Rust that looks like:

```rust
pub fn greet(name: &str) -> String {
    // ...
}
```

And with `#[wasm_bindgen]` all you need to do in exporting it to JS is:

```rust
#[wasm_bindgen]
pub fn greet(name: &str) -> String {
    // ...
}
```

Additionally the design here with minimal intervention in Rust should allow us
to easily take advantage of the upcoming [component model][component-model] proposal. Ideally
you'd simply upgrade `wasm-bindgen`-the-crate as well as your toolchain and
you're immediately getting raw access to component model! (this is still a bit of
a ways off though...)

[component-model]: https://github.com/WebAssembly/component-model

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/describe.md
# Communicating types to `wasm-bindgen`

The last aspect to talk about when converting Rust/JS types amongst one another
is how this information is actually communicated. The `#[wasm_bindgen]` macro is
running over the syntactical (unresolved) structure of the Rust code and is then
responsible for generating information that `wasm-bindgen` the CLI tool later
reads.

To accomplish this a slightly unconventional approach is taken. Static
information about the structure of the Rust code is serialized via JSON
(currently) to a custom section of the Wasm executable. Other information, like
what the types actually are, unfortunately isn't known until later in the
compiler due to things like associated type projections and typedefs. It also
turns out that we want to convey "rich" types like `FnMut(String, Foo,
&JsValue)` to the `wasm-bindgen` CLI, and handling all this is pretty tricky!

To solve this issue the `#[wasm_bindgen]` macro generates **executable
functions** which "describe the type signature of an import or export". These
executable functions are what the `WasmDescribe` trait is all about:

```rust
pub trait WasmDescribe {
    fn describe();
}
```

While deceptively simple this trait is actually quite important. When you write,
an export like this:

```rust
#[wasm_bindgen]
fn greet(a: &str) {
    // ...
}
```

In addition to the shims we talked about above which JS generates the macro
*also* generates something like:

```
#[no_mangle]
pub extern "C" fn __wbindgen_describe_greet() {
    <dyn Fn(&str)>::describe();
}
```

Or in other words it generates invocations of `describe` functions. In doing so
the `__wbindgen_describe_greet` shim is a programmatic description of the type
layouts of an import/export. These are then executed when `wasm-bindgen` runs!
These executions rely on an import called `__wbindgen_describe` which passes one
`u32` to the host, and when called multiple times gives a `Vec<u32>`
effectively. This `Vec<u32>` can then be reparsed into an `enum Descriptor`
which fully describes a type.

All in all this is a bit roundabout but shouldn't have any impact on the
generated code or runtime at all. All these descriptor functions are pruned from
the emitted Wasm file.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/describe.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/importing-js.md
# Importing a function from JS

Now that we've exported some rich functionality to JS it's also time to import
some! The goal here is to basically implement JS `import` statements in Rust,
with fancy types and all.

First up, let's say we invert the function above and instead want to generate
greetings in JS but call it from Rust. We might have, for example:

```rust
#[wasm_bindgen(module = "./greet")]
extern "C" {
    fn greet(a: &str) -> String;
}

fn other_code() {
    let greeting = greet("foo");
    // ...
}
```

The basic idea of imports is the same as exports in that we'll have shims in
both JS and Rust doing the necessary translation. Let's first see the JS shim in
action:

```js
import * as wasm from './foo_bg';

import { greet } from './greet';

// ...

export function __wbg_f_greet(ptr0, len0, wasmretptr) {
  const [retptr, retlen] = passStringToWasm(greet(getStringFromWasm(ptr0, len0)));
  (new Uint32Array(wasm.memory.buffer))[wasmretptr / 4] = retlen;
  return retptr;
}
```

The `getStringFromWasm` and `passStringToWasm` are the same as we saw before,
and like with `__wbindgen_object_drop_ref` far above we've got this weird export
from our module now! The `__wbg_f_greet` function is what's generated by
`wasm-bindgen` to actually get imported in the `foo.wasm` module.

The generated `foo.js` we see imports from the `./greet` module with the `greet`
name (was the function import in Rust said) and then the `__wbg_f_greet`
function is shimming that import.

There's some tricky ABI business going on here so let's take a look at the
generated Rust as well. Like before this is simplified from what's actually
generated.

```rust
extern "C" fn greet(a: &str) -> String {
    extern "C" {
        fn __wbg_f_greet(a_ptr: *const u8, a_len: usize, ret_len: *mut usize) -> *mut u8;
    }
    unsafe {
        let a_ptr = a.as_ptr();
        let a_len = a.len();
        let mut __ret_strlen = 0;
        let mut __ret_strlen_ptr = &mut __ret_strlen as *mut usize;
        let _ret = __wbg_f_greet(a_ptr, a_len, __ret_strlen_ptr);
        String::from_utf8_unchecked(
            Vec::from_raw_parts(_ret, __ret_strlen, __ret_strlen)
        )
    }
}
```

Here we can see that the `greet` function was generated but it's largely just a
shim around the `__wbg_f_greet` function that we're calling. The ptr/len pair
for the argument is passed as two arguments and for the return value we're
receiving one value (the length) indirectly while directly receiving the
returned pointer.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/design/importing-js.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/js-sys/testing.md
# Testing

You can test the `js-sys` crate by running `cargo test --target
wasm32-unknown-unknown` within the `crates/js-sys` directory in the
`wasm-bindgen` repository:

```sh
cd wasm-bindgen/crates/js-sys
cargo test --target wasm32-unknown-unknown
```

These tests are largely executed in Node.js right now via the
[`wasm-bindgen-test` framework](../../wasm-bindgen-test/index.html)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/js-sys/testing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/js-sys/index.md
# `js-sys`

The [`js-sys` crate][js-sys] provides raw bindings to all the global APIs
guaranteed to exist in every JavaScript environment by the ECMAScript standard,
and its source lives at [`wasm-bindgen/crates/js-sys`][src].  With the `js-sys`
crate, we can work with `Object`s, `Array`s, `Function`s, `Map`s, `Set`s,
etc... without writing the `#[wasm_bindgen]` imports by hand.

Documentation for the published version of this crate is available on
[docs.rs][docsrs] but you can also check out the [master branch
documentation][masterdoc] for the crate.

[docsrs]: https://docs.rs/js-sys
[masterdoc]: https://rustwasm.github.io/wasm-bindgen/api/js_sys/
[src]: https://github.com/rustwasm/wasm-bindgen/tree/master/crates/js-sys

For example, we can invoke JavaScript [`Function`][mdn-function] callbacks and
time how long they take to execute with [`Date.now()`][mdn-date-now], and we
don't need to write any JS imports ourselves:

```rust
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub fn timed(callback: &js_sys::Function) -> f64 {
    let then = js_sys::Date::now();
    callback.apply(JsValue::null(), &js_sys::Array::new()).unwrap();
    let now = js_sys::Date::now();
    now - then
}
```

The `js-sys` crate doesn't contain bindings to any Web APIs like
[`document.querySelectorAll`][mdn-qsa]. These will be part of the
[`web-sys`][web-sys] crate.

[MDN]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
[js-sys]: https://crates.io/crates/js-sys
[issue]: https://github.com/rustwasm/wasm-bindgen/issues/275
[mdn-function]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function
[mdn-qsa]: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
[web-sys]: https://crates.io/crates/web-sys
[web-sys-contributing]: https://rustwasm.github.io/wasm-bindgen/web-sys.html
[web-sys-issues]: https://github.com/rustwasm/wasm-bindgen/issues?q=is%3Aissue+is%3Aopen+label%3Aweb-sys
[mdn-date-now]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/js-sys/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/js-sys/adding-more-apis.md
# Adding Support for More JavaScript Global APIs

As of 2018-09-24 we've [added all APIs][issue] in the current ECMAScript
standard (yay!). To that end you'll hopefully not find a missing API, but if you
do please feel free to file an issue!

We currently add new APIs added to ECMAScript that are in [TC39 stage 4][tc39]
to this crate. If there's a new API in stage 4, feel free to file an issue as
well!

### Instructions for adding an API

* [ ] Find the `wasm-bindgen` issue for the API you'd like to add. If this
  doesn't exist, feel free to open one! Afterwards be sure to comment on the
  issue to avoid duplication of work.

* [ ] Open the [MDN
  page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)
  for the relevant JS API.

* [ ] Open `crates/js-sys/src/lib.rs` in your editor; this is the file where we
  are implementing the bindings.

* [ ] Follow the instructions in the top of `crates/js-sys/src/lib.rs` about how
  to add new bindings.

* [ ] Add a test for the new binding to `crates/js-sys/tests/wasm/MyType.rs`

* [ ] Run the [JS global API bindings tests][test]

* [ ] Send a pull request!

[issue]: https://github.com/rustwasm/wasm-bindgen/issues/275
[tc39]: https://tc39.github.io/process-document/
[test]: testing.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/js-sys/adding-more-apis.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/web-sys/overview.md
# `web-sys` Overview

The `web-sys` crate has this file and directory layout:

```text
.
├── build.rs
├── Cargo.toml
├── README.md
├── src
│   └── lib.rs
└── webidls
    └── enabled
        └── ...
```

### `webidls/enabled/*.webidl`

These are the WebIDL interfaces that we will actually generate bindings for (or
at least bindings for *some* of the things defined in these files).

### `build.rs`

The `build.rs` invokes `wasm-bindgen`'s WebIDL frontend on all the WebIDL files
in `webidls/enabled`. It writes the resulting bindings into the cargo build's
out directory.

### `src/lib.rs`

The only thing `src/lib.rs` does is include the bindings generated at compile
time in `build.rs`. Here is the whole `src/lib.rs` file:

```rust
{{#include ../../../../crates/web-sys/src/lib.rs}}
```

### Cargo features

When compiled the crate is almost empty by default, which probably isn't what
you want! Due to the very large number of APIs, this crate uses features to
enable portions of its API to reduce compile times. The list of features in
`Cargo.toml` all correspond to types in the generated functions. Enabling a
feature enables that type. All methods should indicate what features need to be
activated to use the method.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/web-sys/overview.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/web-sys/testing.md
# Testing

You can test the `web-sys` crate by running `cargo test` within the
`crates/web-sys` directory in the `wasm-bindgen` repository:

```sh
cd wasm-bindgen/crates/web-sys
cargo test --target wasm32-unknown-unknown --all-features
```

The Wasm tests all run within a headless browser. See [the `wasm-bindgen-test`
crate's
`README.md`](https://github.com/rustwasm/wasm-bindgen/blob/master/crates/test/README.md)
for details and configuring which headless browser is used.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/web-sys/testing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/web-sys/index.md
# `web-sys`

The `web-sys` crate provides raw bindings to all of the Web's APIs, and its
source lives at `wasm-bindgen/crates/web-sys`.

The `web-sys` crate is **entirely** mechanically generated inside `build.rs`
using `wasm-bindgen`'s WebIDL frontend and the WebIDL interface definitions for
Web APIs. This means that `web-sys` isn't always the most ergonomic crate to
use, but it's intended to provide verified and correct bindings to the web
platform, and then better interfaces can be iterated on crates.io!

Documentation for the published version of this crate is available on
[docs.rs][docsrs] but you can also check out the [master branch
documentation][masterdoc] for the crate.

[docsrs]: https://docs.rs/web-sys
[masterdoc]: https://rustwasm.github.io/wasm-bindgen/api/web_sys/

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/web-sys/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/web-sys/logging.md
# Logging

The `wasm_bindgen_webidl` crate (used by `web-sys`'s `build.rs`) uses
[`env_logger`][env_logger] for logging, which can be enabled by setting the
`RUST_LOG=wasm_bindgen_webidl` environment variable while building the `web-sys`
crate.

Make sure to enable "very verbose" output during `cargo build` to see these logs
within `web-sys`'s build script output.

```sh
cd crates/web-sys
RUST_LOG=wasm_bindgen_webidl cargo build -vv
```

If `wasm_bindgen_webidl` encounters WebIDL constructs that it doesn't know how
to translate into `wasm-bindgen` AST items, it will emit warn-level logs.

```
WARN 2018-07-06T18:21:49Z: wasm_bindgen_webidl: Unsupported WebIDL interface: ...
```

[env_logger]: https://crates.io/crates/env_logger

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/web-sys/logging.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/web-sys/supporting-more-web-apis.md
# Supporting More Web APIs in `web-sys`

1. Ensure that the `.webidl` file describing the
   interface exists somewhere within the `crates/web-sys/webidls/enabled`
   directory.

   First, check to see whether we have the WebIDL definition file for
   your API:

   ```sh
   grep -rn MyWebApi crates/web-sys/webidls
   ```

   * If your interface is defined in a `.webidl` file that is inside the
     `crates/web-sys/webidls/enabled` directory, skip to step (3).

   * If your interface isn't defined in any file yet, find the WebIDL definition
     in the relevant standard and add it as a new `.webidl` file in
     `crates/web-sys/webidls/enabled`. Make sure that it is a standard Web API!
     We don't want to add non-standard APIs to this crate.

   * If your interface is defined in a `.webidl` file within any of the
     `crates/web-sys/webidls/unavailable_*` directories, you need to move it into
     `crates/web-sys/webidls/enabled`, e.g.:

     ```sh
     cd crates/web-sys
     git mv webidls/unavailable_enum_ident/MyWebApi.webidl webidls/enabled/MyWebApi.webidl
     ```

2. Regenerate the `web-sys` crate auto-generated bindings, which you can do with
   the following commands:

   ```sh
   cd crates/web-sys
   cargo run --release --package wasm-bindgen-webidl -- webidls src/features ./Cargo.toml
   ```

   You can then use `git diff` to ensure the bindings look correct.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/contributing/web-sys/supporting-more-web-apis.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/without-a-bundler.md
# Without a Bundler

[View full source code][code]

[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/without-a-bundler

This example shows how the `--target web` flag can be used load code in a
browser directly. For this deployment strategy bundlers like Webpack are not
required. For more information on deployment see the [dedicated
documentation][deployment].

First, you'll need to add `web-sys` to your Cargo.toml.
```toml
[dependencies.web-sys]
version = "0.3.4"
features = [
  'Document',
  'Element',
  'HtmlElement',
  'Node',
  'Window',
]
```

Then, let's take a look at the code and see how when we're using `--target web`
we're not actually losing any functionality!

```rust
{{#include ../../../examples/without-a-bundler/src/lib.rs}}
```

Otherwise the rest of the deployment magic happens in `index.html`:

```html
{{#include ../../../examples/without-a-bundler/index.html}}
```

> **Note**: You cannot directly open `index.html` in your web browser due to [CORS][cors]
> limitations. Instead, you can set up a quick development environment using
> Python's built-in HTTP server:
> ```sh
> wasm-pack build --target web
> python3 -m http.server 8080
> ```
> If you don't have Python installed, you can also use [miniserve][miniserve] which
> is installable via Cargo:
> ```sh
> cargo install miniserve
> miniserve . --index "index.html" -p 8080
> ```

And that's it! Be sure to read up on the [deployment options][deployment] to see
what it means to deploy without a bundler.

[cors]: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
[miniserve]: https://crates.io/crates/miniserve
[deployment]: ../reference/deployment.html

## Using the older `--target no-modules`

[View full source code][code-no-modules]

[code-no-modules]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/without-a-bundler-no-modules

The older version of using `wasm-bindgen` without a bundler is to use the
`--target no-modules` flag to the `wasm-bindgen` CLI.

While similar to the newer `--target web`, the `--target no-modules` flag has a
few caveats:

* It does not support [local JS snippets][snippets]
* It does not generate an ES module
* It does not support `--split-linked-modules` outside of a document, e.g.
  inside a worker

With that in mind the main difference is how the wasm/JS code is loaded, and
here's an example of loading the output of `wasm-pack` for the same module as
above.

```html
{{#include ../../../examples/without-a-bundler-no-modules/index.html}}
```

[snippets]: ../reference/js-snippets.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/without-a-bundler.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/hello-world.md
# Hello, World!

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/hello_world/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/hello_world

This is the "Hello, world!" example of `#[wasm_bindgen]` showing how to set up
a project, export a function to JS, call it from JS, and then call the `alert`
function in Rust.

## `Cargo.toml`

The `Cargo.toml` lists the `wasm-bindgen` crate as a dependency.

Also of note is the `crate-type = ["cdylib"]` which is largely used for wasm
final artifacts today.

```toml
{{#include ../../../examples/hello_world/Cargo.toml}}
```

## `src/lib.rs`

Here we define our Rust entry point along with calling the `alert` function.

```rust
{{#include ../../../examples/hello_world/src/lib.rs}}
```

## `index.js`

Our JS entry point is quite small!

```js
{{#include ../../../examples/hello_world/index.js}}
```

## Webpack-specific files

> **Note**: Webpack is required for this example, and if you're interested
> in options that don't use a JS bundler [see other examples][wab].

[wab]: without-a-bundler.html

And finally here's the Webpack configuration and `package.json` for this
project:

**webpack.config.js**

```js
{{#include ../../../examples/hello_world/webpack.config.js}}
```

**package.json**

```json
{{#include ../../../examples/hello_world/package.json}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/hello-world.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/console-log.md
# `console.log`

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/console_log/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/console_log

This example shows off how to use `console.log` in a variety of ways, all the
way from bare-bones usage to a `println!`-like macro with `web_sys`.

## `src/lib.rs`

```rust
{{#include ../../../examples/console_log/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/console-log.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/webrtc_datachannel.md
# WebRTC DataChannel Example

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/webrtc_datachannel/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/webrtc_datachannel/

This example creates 2 peer connections and 2 data channels in single browser tab.
Send ping/pong between `peer1.dc` and `peer2.dc`.

## `Cargo.toml`

The `Cargo.toml` enables features necessary to use WebRTC DataChannel and its negotiation.

```toml
{{#include ../../../examples/webrtc_datachannel/Cargo.toml}}
```

## `src/lib.rs`

The Rust code connects WebRTC data channel.

```rust
{{#include ../../../examples/webrtc_datachannel/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/webrtc_datachannel.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/synchronous-instantiation.md
# Synchronous Instantiation

[View full source code][code]

[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/synchronous-instantiation

This example shows how to synchronously initialize a WebAssembly module as opposed to [asynchronously][without-bundler]. In most cases, the default way of asynchronously initializing a module will suffice. However, there might be use cases where you'd like to lazy load a module on demand and synchronously compile and instantiate it. Note that this only works off the main thread and since compilation and instantiation of large modules can be expensive you should only use this method if it's absolutely required in your use case. Otherwise you should use the [default method][without-bundler].

For this deployment strategy bundlers like Webpack are not required. For more information on deployment see the [dedicated
documentation][deployment].

First let's take a look at our tiny lib:

```rust
{{#include ../../../examples/synchronous-instantiation/src/lib.rs}}
```

Next, let's have a look at the `index.html`:

```html
{{#include ../../../examples/synchronous-instantiation/index.html}}
```

Otherwise the rest of the magic happens in `worker.js`:

```js
{{#include ../../../examples/synchronous-instantiation/worker.js}}
```

And that's it! Be sure to read up on the [deployment options][deployment] to see what it means to deploy without a bundler.

[deployment]: ../reference/deployment.html
[without-bundler]: ./without-a-bundler.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/synchronous-instantiation.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/dom.md
# web-sys: DOM hello world

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/dom/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/dom

Using `web-sys` we're able to interact with all the standard web platform
methods, including those of the DOM! Here we take a look at a simple "Hello,
world!" which manufactures a DOM element in Rust, customizes it, and then
appends it to the page.

## `Cargo.toml`

You can see here how we depend on `web-sys` and activate associated features to
enable all the various APIs:

```toml
{{#include ../../../examples/dom/Cargo.toml}}
```

## `src/lib.rs`

```rust
{{#include ../../../examples/dom/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/dom.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/wasm-in-web-worker.md
# Wasm in Web Worker

[View full source code][code]

[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/wasm-in-web-worker

A simple example of parallel execution by spawning a web worker with `web_sys`,
loading Wasm code in the web worker and interacting between the main thread and
the worker.

## Building & compatibility

At the time of this writing, only Chrome supports modules in web workers, e.g.
Firefox does not. To have compatibility across browsers, the whole example is
set up without relying on ES modules as target. Therefore we have to build
with `--target no-modules`. The full command can be found in `build.sh`.

## `Cargo.toml`

The `Cargo.toml` enables features necessary to work with the DOM, log output to
the JS console, creating a worker and reacting to message events.

```toml
{{#include ../../../examples/wasm-in-web-worker/Cargo.toml}}
```

## `src/lib.rs`

Creates a struct `NumberEval` with methods to act as stateful object in the
worker and function `startup` to be launched in the main thread. Also includes
internal helper functions `setup_input_oninput_callback` to attach a
`wasm_bindgen::Closure` as callback to the `oninput` event of the input field
and `get_on_msg_callback` to create a `wasm_bindgen::Closure` which is triggered
when the worker returns a message.

```rust
{{#include ../../../examples/wasm-in-web-worker/src/lib.rs}}
```

## `index.html`

Includes the input element `#inputNumber` to type a number into and a HTML
element `#resultField` were the result of the evaluation even/odd is written to.
Since we require to build with `--target no-modules` to be able to load Wasm
code in the worker across browsers, the `index.html` also includes loading
both `wasm_in_web_worker.js` and `index.js`.

```html
{{#include ../../../examples/wasm-in-web-worker/index.html}}
```

## `index.js`

Loads our Wasm file asynchronously and calls the entry point `startup` of the
main thread which will create a worker.

```js
{{#include ../../../examples/wasm-in-web-worker/index.js}}
```

## `worker.js`

Loads our Wasm file by first importing `wasm_bindgen` via
`importScripts('./pkg/wasm_in_web_worker.js')` and then awaiting the Promise
returned by `wasm_bindgen(...)`. Creates a new object to do the background
calculation and bind a method of the object to the `onmessage` callback of the
worker.

```js
{{#include ../../../examples/wasm-in-web-worker/worker.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/wasm-in-web-worker.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/wasm-in-wasm.md
# js-sys: WebAssembly in WebAssembly

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/wasm-in-wasm/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/wasm-in-wasm

Using the `js-sys` crate we can get pretty meta and instantiate `WebAssembly`
modules from inside `WebAssembly` modules!

## `src/lib.rs`

```rust
{{#include ../../../examples/wasm-in-wasm/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/wasm-in-wasm.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/request-animation-frame.md
# `web-sys`: A `requestAnimationFrame` Loop

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/request-animation-frame/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/request-animation-frame

This is an example of a `requestAnimationFrame` loop using the `web-sys` crate!
It renders a count of how many times a `requestAnimationFrame` callback has been
invoked and then it breaks out of the `requestAnimationFrame` loop after 300
iterations.

## `Cargo.toml`

You can see here how we depend on `web-sys` and activate associated features to
enable all the various APIs:

```toml
{{#include ../../../examples/request-animation-frame/Cargo.toml}}
```

## `src/lib.rs`

```rust
{{#include ../../../examples/request-animation-frame/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/request-animation-frame.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/import-js.md
# Importing non-browser JS

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/import_js/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/import_js

The `#[wasm_bindgen]` attribute can be used on `extern "C" { .. }` blocks to import
functionality from JS. This is how the `js-sys` and the `web-sys` crates are
built, but you can also use it in your own crate!

For example if you're working with this JS file:

```js
// defined-in-js.js
{{#include ../../../examples/import_js/crate/defined-in-js.js}}
```

you can use it in Rust with:

```rust
{{#include ../../../examples/import_js/crate/src/lib.rs}}
```

You can also [explore the full list of ways to configure imports][attr]

[attr]: ../reference/attributes/on-js-imports/index.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/import-js.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/julia.md
# Julia Set

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/julia_set/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/julia_set

While not showing off a lot of `web_sys` API surface area, this example shows a
neat fractal that you can make!

## `index.js`

A small bit of glue is added for this example

```js
{{#include ../../../examples/julia_set/index.js}}
```

## `src/lib.rs`

The bulk of the logic is in the generation of the fractal

```rust
{{#include ../../../examples/julia_set/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/julia.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/performance.md
# web-sys: `performance.now`

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/performance/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/performance

Want to profile some Rust code in the browser? No problem! You can use the
`performance.now()` API and friends to get timing information to see how long
things take.

## `src/lib.rs`

```rust
{{#include ../../../examples/performance/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/performance.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/add.md
# Small Wasm files

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/add/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/add

One of `wasm-bindgen`'s core goals is a pay-only-for-what-you-use philosophy, so
if we don't use much then we shouldn't be paying much! As a result
`#[wasm_bindgen]` can generate super-small executables

Currently this code...

```rust
{{#include ../../../examples/add/src/lib.rs}}
```

generates a 710 byte Wasm binary:

```
$ ls -l add_bg.wasm
-rw-rw-r-- 1 alex alex 710 Sep 19 17:32 add_bg.wasm
```

If you run [wasm-opt], a C++ tool for optimize WebAssembly, you can make it
even smaller too!

```
$ wasm-opt -Os add_bg.wasm -o add.wasm
$ ls -l add.wasm
-rw-rw-r-- 1 alex alex 172 Sep 19 17:33 add.wasm
```

And sure enough, using the [wasm2wat] tool it's quite small!

```
$ wasm2wat add.wasm
(module
  (type (;0;) (func (param i32 i32) (result i32)))
  (func (;0;) (type 0) (param i32 i32) (result i32)
    get_local 1
    get_local 0
    i32.add)
  (table (;0;) 1 1 anyfunc)
  (memory (;0;) 17)
  (global (;0;) i32 (i32.const 1049118))
  (global (;1;) i32 (i32.const 1049118))
  (export "memory" (memory 0))
  (export "__indirect_function_table" (table 0))
  (export "__heap_base" (global 0))
  (export "__data_end" (global 1))
  (export "add" (func 0))
  (data (i32.const 1049096) "invalid malloc request"))
```

Also don't forget to compile in release mode for the smallest binaries! For
larger applications you'll likely also want to turn on LTO to generate the
smallest binaries:

```toml
[profile.release]
lto = true
```

[wasm2wat]: https://github.com/webassembly/wabt
[wasm-opt]: https://github.com/webassembly/binaryen

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/add.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/webgl.md
# WebGL Example

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/webgl/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/webgl

This example draws a triangle to the screen using the WebGL API.

## `Cargo.toml`

The `Cargo.toml` enables features necessary to obtain and use a WebGL
rendering context.

```toml
{{#include ../../../examples/webgl/Cargo.toml}}
```

## `src/lib.rs`

This source file handles all of the necessary logic to obtain a rendering
context, compile shaders, fill a buffer with vertex coordinates, and draw a
triangle to the screen.

```rust
{{#include ../../../examples/webgl/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/webgl.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/index.md
# Examples of using `wasm-bindgen`, `js-sys`, and `web-sys`

This subsection contains examples of using the `wasm-bindgen`, `js-sys`, and
`web-sys` crates. Each example should have more information about what it's
doing.

These examples all assume familiarity with `wasm-bindgen`, `wasm-pack`, and
building a Rust and WebAssembly project. If you're unfamiliar with these check
out the [Game of Life tutorial][gol] or [wasm pack tutorials][wpt] to help you
get started.

The source code for all examples can also be [found online][code] to download
and run locally. Most examples are configured with Webpack/`wasm-pack` and can
be built with `npm run serve`. Other examples which don't use Webpack are
accompanied with instructions or a `build.sh` showing how to build it.

Note that most examples currently use Webpack to assemble the final output
artifact, but this is not required! You can review the [deployment
documentation][deploy] for other options of how to deploy Rust and WebAssembly.

[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples
[gol]: https://rustwasm.github.io/docs/book/
[deploy]: ../reference/deployment.html
[wpt]: https://rustwasm.github.io/docs/wasm-pack/tutorials/index.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/weather_report.md
# web-sys: Weather report

[View full source code][code]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/weather_report/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/weather_report

This example makes an HTTP request to [OpenWeather API](https://openweathermap.org/),
parses response in JSON and render UI from that JSON. It also shows the usage of
`spawn_local` function for handling asynchronous tasks.

Please add your api key in *get_response()* before running this application.

## `src/lib.rs`

```rust
{{#include ../../../examples/weather_report/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/weather_report.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/fetch.md
# The `fetch` API

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/fetch/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/fetch

This example uses the `fetch` API to make an HTTP request to the GitHub API and
then parses the resulting JSON.

## `Cargo.toml`

The `Cargo.toml` enables a number of features related to the `fetch` API and
types used: `Headers`, `Request`, etc.

```toml
{{#include ../../../examples/fetch/Cargo.toml}}
```

## `src/lib.rs`

```rust
{{#include ../../../examples/fetch/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/fetch.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/web-audio.md
# WebAudio

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/webaudio/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/webaudio

This example creates an [FM
oscillator](https://en.wikipedia.org/wiki/Frequency_modulation_synthesis) using
the [WebAudio
API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API) and
`web-sys`.

## `Cargo.toml`

The `Cargo.toml` enables the types needed to use the relevant bits of the
WebAudio API.

```toml
{{#include ../../../examples/webaudio/Cargo.toml}}
```

## `src/lib.rs`

The Rust code implements the FM oscillator.

```rust
{{#include ../../../examples/webaudio/src/lib.rs}}
```

## `index.js`

A small bit of JavaScript glues the rust module to input widgets and translates
events into calls into Wasm code.

```js
{{#include ../../../examples/webaudio/index.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/web-audio.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/paint.md
# Paint Example

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/paint/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/paint

A simple painting program.

## `Cargo.toml`

The `Cargo.toml` enables features necessary to work with the DOM, events and
2D canvas.

```toml
{{#include ../../../examples/paint/Cargo.toml}}
```

## `src/lib.rs`

Creates the `<canvas>` element, applies a CSS style to it, adds it to the document,
get a 2D rendering context and adds listeners for mouse events.

```rust
{{#include ../../../examples/paint/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/paint.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/closures.md
# web-sys: Closures

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/closures/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/closures

One of the features of `#[wasm_bindgen]` is that you can pass closures defined
in Rust off to JS. This can be a bit tricky at times, though, so the example
here shows how to interact with some standard web APIs with closures.

## `src/lib.rs`

```rust
{{#include ../../../examples/closures/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/closures.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/wasm-audio-worklet.md
# Wasm audio worklet

[View full source code][code] or [view the compiled example online][online]

[online]: https://wasm-bindgen.netlify.app/exbuild/wasm-audio-worklet/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/wasm-audio-worklet

This is an example of using threads inside specific worklets with WebAssembly,
Rust, and `wasm-bindgen`, culminating in an oscillator demo. This demo should
complement the [parallel-raytrace][parallel-raytrace] example by
demonstrating an alternative approach using ES modules with on-the-fly module
creation.

[parallel-raytrace]: https://rustwasm.github.io/docs/wasm-bindgen/examples/raytrace.html

### Building the demo

One of the major gotchas with threaded WebAssembly is that Rust does not ship a
precompiled target (e.g. standard library) which has threading support enabled.
This means that you'll need to recompile the standard library with the
appropriate rustc flags, namely
`-C target-feature=+atomics,+bulk-memory,+mutable-globals`.
Note that this requires a nightly Rust toolchain. See the [more detailed
instructions][build] of the parallel-raytrace example.

[build]: https://rustwasm.github.io/docs/wasm-bindgen/examples/raytrace.html#building-the-demo

### Caveats

This example shares most of its [caveats][caveats] with the parallel-raytrace
example. However, it tries to encapsulate worklet creation in a Rust module, so
the application developer does not need to maintain custom JS code.

[caveats]: https://rustwasm.github.io/docs/wasm-bindgen/examples/raytrace.html#caveats

### Browser Requirements

This demo should work in the latest Chrome, Firefox and Safari versions at this time.
Note that this example requires HTTP headers to be set like in
[parallel-raytrace][headers].

[firefox-worklet-import]: https://bugzilla.mozilla.org/show_bug.cgi?id=1572644
[headers]: https://rustwasm.github.io/docs/wasm-bindgen/examples/raytrace.html#browser-requirements

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/wasm-audio-worklet.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/raytrace.md
# Parallel Raytracing

[View full source code][code] or [view the compiled example online][online]

[online]: https://wasm-bindgen.netlify.app/exbuild/raytrace-parallel/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/raytrace-parallel

This is an example of using threads with WebAssembly, Rust, and `wasm-bindgen`,
culminating in a parallel raytracer demo. There's a number of moving pieces to
this demo and it's unfortunately not the easiest thing to wrangle, but it's
hoped that this'll give you a bit of a taste of what it's like to use threads
and Wasm with Rust on the web.

### Building the demo

One of the major gotchas with threaded WebAssembly is that Rust does not ship a
precompiled target (e.g. standard library) which has threading support enabled.
This means that you'll need to recompile the standard library with the
appropriate rustc flags, namely
`-C target-feature=+atomics,+bulk-memory,+mutable-globals`.
Note that this requires a nightly Rust toolchain.

To do this you can use the `RUSTFLAGS` environment variable that Cargo reads:

```sh
export RUSTFLAGS='-C target-feature=+atomics,+bulk-memory,+mutable-globals'
```

To recompile the standard library it's recommended to use Cargo's
[`-Zbuild-std`](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std)
feature:

```sh
cargo build --target wasm32-unknown-unknown -Z build-std=panic_abort,std
```

Note that you can also configure this via `.cargo/config.toml`:

```toml
[unstable]
build-std = ['std', 'panic_abort']

[build]
target = "wasm32-unknown-unknown"
rustflags = '-Ctarget-feature=+atomics,+bulk-memory,+mutable-globals'
```

After this `cargo build` should produce a WebAssembly file with threading
enabled, and the standard library will be appropriately compiled as well.

The final step in this is to run `wasm-bindgen` as usual, and `wasm-bindgen`
needs no extra configuration to work with threads. You can continue to run it
through `wasm-pack`, for example.

### Running the demo

Currently it's required to use the `--target no-modules` or `--target web` flag
with `wasm-bindgen` to run threaded code. This is because the WebAssembly file
imports memory instead of exporting it, so we need to hook initialization of the
wasm module at this time to provide the appropriate memory object. This demo
uses `--target no-modules`, because Firefox does not support modules in workers.

With `--target no-modules` you'll be able to use `importScripts` inside of each
web worker to import the shim JS generated by `wasm-bindgen` as well as calling
the `wasm_bindgen` initialization function with the shared memory instance from
the main thread. The expected usage is that WebAssembly on the main thread will
post its memory object to all other threads to get instantiated with.

### Caveats

Unfortunately at this time running Wasm on the web with threads has a number of
caveats, although some are specific to just `wasm-bindgen`. These are some
pieces to consider and watch out for, although we're always looking for
improvements to be made so if you have an idea please file an issue!

* The main thread in a browser cannot block. This means that if you run
  WebAssembly code on the main thread you can *never* block, meaning you can't
  do so much as acquire a mutex. This is an extremely difficult limitation to
  work with on the web, although one workaround is to run Wasm exclusively in
  web workers and run JS on the main thread. It is possible to run the same wasm
  across all threads, but you need to be extremely vigilant about
  synchronization with the main thread.

* Setting up a threaded environment is a bit wonky and doesn't feel smooth
  today. For example `--target bundler` is unsupported and very specific shims
  are required on both the main thread and worker threads. These are possible to
  work with but are somewhat brittle since there's no standard way to spin up
  web workers as Wasm threads.

* There is no standard notion of a "thread". For example the standard library
  has no viable route to implement the `std::thread` module. As a consequence
  there is no concept of thread exit and TLS destructors will never run.
  We do expose a helper, `__wbindgen_thread_destroy`, that deallocates
  the thread stack and TLS. If you invoke it, it *must* be the last function
  you invoke from the Wasm module for a given thread.

* Any thread launched after the first one _might attempt to block_ implicitly
  in its initialization routine. This is a constraint introduced by the way
  we set up the space for thread stacks and TLS. This means that if you attempt
  to run a Wasm module in the main thread _after_ you are already running it
  in a worker, it might fail.

* Web Workers executing WebAssembly code cannot receive events from JS. A Web
  Worker has to fully return back to the browser (and ideally should do so
  occasionally) to receive JS messages and such. This means that common
  paradigms like a rayon thread pool do not apply straightforward-ly to the web.
  The intention of the web is that all long-term blocking happens in the browser
  itself, not in each thread, but many crates in the ecosystem leveraging
  threading are not necessarily engineered this way.

These caveats are all largely inherited from the web platform itself, and
they're important to consider when designing an application for threading. It's
highly unlikely that you can pull a crate off the shelf and "just use it" due to
these limitations. You'll need to be sure to carefully plan ahead and ensure
that gotchas such as these don't cause issues in the future. As mentioned before
though we're always trying to actively develop this support so if folks have
ideas about how to improve, or if web standards change, we'll try to update this
documentation!

### Browser Requirements

This demo should work in the latest Firefox and Chrome versions at this time,
and other browsers are likely to follow suit. Note that threads and
`SharedArrayBuffer` require HTTP headers to be set to work correctly. For more
information see the [documentation on
MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer)
under "Security requirements" as well as [Firefox's rollout blog
post](https://hacks.mozilla.org/2020/07/safely-reviving-shared-memory/). This
means that during local development you'll need to configure your web server
appropriately or enable a workaround in your browser.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/raytrace.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/2d-canvas.md
# 2D Canvas

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/canvas/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/canvas

Drawing a smiley face with the 2D canvas API. This is a port of part of [this
MDN
tutorial](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes#Moving_the_pen)
to `web-sys`.

![A smiley face](./2d-canvas.png)

## `Cargo.toml`

The `Cargo.toml` enables features necessary to query the DOM and work with 2D
canvas.

```toml
{{#include ../../../examples/canvas/Cargo.toml}}
```

## `src/lib.rs`

Gets the `<canvas>` element, creates a 2D rendering context, and draws the
smiley face.

```rust
{{#include ../../../examples/canvas/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/2d-canvas.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/char.md
# Working with the `char` type

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/char/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/char

The `#[wasm_bindgen]` macro will convert the rust `char` type to a single
code-point js `string`, and this example shows how to work with this.

Opening this example should display a single counter with a random character
for it's `key` and 0 for its `count`. You can click the `+` button to increase a
counter's count. By clicking on the "add counter" button you should see a new
counter added to the list with a different random character for it's `key`.

Under the hood javascript is choosing a random character from an Array of
characters and passing that to the rust Counter struct's constructor so the
character you are seeing on the page has made the full round trip from js to
rust and back to js.

## `src/lib.rs`

```rust
{{#include ../../../examples/char/src/lib.rs}}
```

## `index.js`

```js
{{#include ../../../examples/char/index.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/char.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/websockets.md
# WebSockets Example

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/websockets/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/websockets/

This example connects to an echo server on `wss://echo.websocket.org`,
sends a `ping` message, and receives the response.

## `Cargo.toml`

The `Cargo.toml` enables features necessary to create a `WebSocket` object and
to access events such as `MessageEvent` or `ErrorEvent`.

```toml
{{#include ../../../examples/websockets/Cargo.toml}}
```

## `src/lib.rs`

This code shows the basic steps required to work with a `WebSocket`.
At first it opens the connection, then subscribes to events `onmessage`, `onerror`, `onopen`.
After the socket is opened it sends a `ping` message, receives an echoed response
and prints it to the browser console.

```rust
{{#include ../../../examples/websockets/src/lib.rs}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/websockets.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/todomvc.md
# TODO MVC using wasm-bingen and web-sys

[View full source code][code] or [view the compiled example online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/exbuild/todomvc/
[code]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/todomvc
[element]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/todomvc/src/element.rs
[scheduler]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/todomvc/src/scheduler.rs

[wasm-bindgen](https://github.com/rustwasm/wasm-bindgen) and [web-sys](https://rustwasm.github.io/wasm-bindgen/api/web_sys/) coded [TODO MVC](http://todomvc.com/)

The code was rewritten from the [ES6 version](http://todomvc.com/examples/vanilla-es6/).

The core differences are:
- Having an [Element wrapper][element] that takes care of dyn and into refs in web-sys,
- A [Scheduler][scheduler] that allows Controller and View to communicate to each other by emulating something similar to the JS event loop.


## Size

The size of the project hasn't undergone much work to make it optimised yet.

- ~96kb release build
- ~76kb optimised with binaryen
- ~28kb brotli compressed

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/examples/todomvc.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/inheritance.md
# Inheritance in `web-sys`

Inheritance between JS classes is the bread and butter of how the DOM works on
the web, and as a result it's quite important for `web-sys` to provide access to
this inheritance hierarchy as well! There are few ways you can access the
inheritance hierarchy when using `web-sys`.

### Accessing parent classes using `Deref`

Like smart pointers in Rust, all types in `web_sys` implement `Deref` to their
parent JS class. This means, for example, if you have a `web_sys::Element` you
can create a `web_sys::Node` from that implicitly:

```rust
let element: &Element = ...;

element.append_child(..); // call a method on `Node`

method_expecting_a_node(&element); // coerce to `&Node` implicitly

let node: &Node = &element; // explicitly coerce to `&Node`
```

Using `Deref` allows ergonomic transitioning up the inheritance hierarchy to the
parent class and beyond, giving you access to all the methods using the `.`
operator.

### Accessing parent classes using `AsRef`

In addition to `Deref`, the `AsRef` trait is implemented for all types in
`web_sys` for all types in the inheritance hierarchy. For example for the
`HtmlAnchorElement` type you'll find:

```rust
impl AsRef<HtmlElement> for HtmlAnchorElement
impl AsRef<Element> for HtmlAnchorElement
impl AsRef<Node> for HtmlAnchorElement
impl AsRef<EventTarget> for HtmlAnchorElement
impl AsRef<Object> for HtmlAnchorElement
impl AsRef<JsValue> for HtmlAnchorElement
```

You can use `.as_ref()` to explicitly get a reference to any parent class from
from a type in `web_sys`. Note that because of the number of `AsRef`
implementations you'll likely need to have type inference guidance as well.

### Accessing child classes using `JsCast`

Finally the `wasm_bindgen::JsCast` trait can be used to implement all manner of
casts between types. It supports static unchecked casts between types as well as
dynamic runtime-checked casts (using `instanceof`) between types.

More documentation about this can be found [on the trait itself][jscast]

[jscast]: https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/trait.JsCast.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/inheritance.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/function-overloads.md
# Function Overloads

Many Web APIs are overloaded to take different types of arguments or to skip
arguments completely. `web-sys` contains multiple bindings for these functions
that each specialize to a particular overload and set of argument types.

For example, [the `fetch` API][mdn-fetch] can be given a URL string, or a
`Request` object, and it might also optionally be given a `RequestInit` options
object. Therefore, we end up with these `web-sys` functions that all bind to the
`window.fetch` function:

* [`Window::fetch_with_str`](https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Window.html#method.fetch_with_str)
* [`Window::fetch_with_request`](https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Window.html#method.fetch_with_request)
* [`Window::fetch_with_str_and_init`](https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Window.html#method.fetch_with_str_and_init)
* [`Window::fetch_with_request_and_init`](https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Window.html#method.fetch_with_request_and_init)

Note that different overloads can use different interfaces, and therefore can
require different sets of cargo features to be enabled.

[mdn-fetch]: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/function-overloads.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/cargo-features.md
# Cargo Features in `web-sys`

To keep `web-sys` building as fast as possible, there is a cargo feature for
every type defined in `web-sys`. To access that type, you must enable its
feature. To access a method, you must enable the feature for its `self` type and
the features for each of its argument types. In the [API documentation][], every
method lists the features that are required to enable it.

For example, [the `WebGlRenderingContext::compile_shader` function][compile_shader] requires these features:

* `WebGlRenderingContext`, because that is the method's `self` type
* `WebGlShader`, because it takes an argument of that type

[API documentation]: https://rustwasm.github.io/wasm-bindgen/api/web_sys
[compile_shader]: https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.WebGlRenderingContext.html#method.compile_shader

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/cargo-features.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/using-web-sys.md
# Using `web-sys`

## Add `web-sys` as a dependency to your `Cargo.toml`

```toml
[dependencies]
wasm-bindgen = "0.2"

[dependencies.web-sys]
version = "0.3"
features = [
]
```

## Enable the cargo features for the APIs you're using

To keep build times super speedy, [`web-sys` gates each Web interface behind a
cargo feature](./cargo-features.html). Find the type or method you want to use
in the [API documentation][api]; it will list the features that must be enabled
to access that API.

For example, if we're looking for [the `window.resizeTo`
function][js-resize-to], we would [search for `resizeTo` in the API
documentation][search-resize-to]. We would find [the
`web_sys::Window::resize_to` function][rust-resize-to], which requires the
`Window` feature. To get access to that function, we enable the `Window` feature
in `Cargo.toml`:

```toml
[dependencies.web-sys]
version = "0.3"
features = [
  "Window"
]
```

## Call the method!

```rust
use wasm_bindgen::prelude::*;
use web_sys::Window;

#[wasm_bindgen]
pub fn make_the_window_small() {
    // Resize the window to 500px by 500px.
    let window = web_sys::window().unwrap();
    window.resize_to(500, 500)
        .expect("could not resize the window");
}
```

[api]: https://rustwasm.github.io/wasm-bindgen/api/web_sys/
[js-resize-to]: https://developer.mozilla.org/en-US/docs/Web/API/window/resizeTo
[search-resize-to]: https://rustwasm.github.io/wasm-bindgen/api/web_sys/?search=resizeTo
[rust-resize-to]: https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Window.html#method.resize_to

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/using-web-sys.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/index.md
# The `web-sys` Crate

[The `web-sys` crate][web-sys] provides raw `wasm-bindgen` imports for all of the Web's
APIs. This includes:

* `window.fetch`
* `Node.prototype.appendChild`
* WebGL
* WebAudio
* and many more!

It's sort of like the `libc` crate, but for the Web.

It does *not* include the JavaScript APIs that are guaranteed to exist in all
standards-compliant ECMAScript environments, such as `Array`, `Date`, and
`eval`. Bindings for these APIs can be found in [the `js-sys` crate][js-sys].

## API Documentation

[**Read the `web-sys` API documentation here!**][api]

[api]: https://rustwasm.github.io/wasm-bindgen/api/web_sys/
[js-sys]: https://crates.io/crates/js-sys
[web-sys]: https://crates.io/crates/web-sys

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/type-translations.md
# Type Translations in `web-sys`

Most of the types specified in [WebIDL (the interface definition language for
all Web APIs)][webidl] have relatively straightforward translations into
`web-sys`, but it's worth calling out a few in particular:

* `BufferSource` and `ArrayBufferView` - these two types show up in a number of
  APIs that generally deal with a buffer of bytes. We bind them in `web-sys`
  with two different types, `js_sys::Object` and `&mut [u8]`. Using
  `js_sys::Object` allows passing in arbitrary JS values which represent a view
  of bytes (like any typed array object), and `&mut [u8]` allows using a raw
  slice in Rust. Unfortunately we must pessimistically assume that JS will
  modify all slices as we don't currently have information of whether they're
  modified or not.

* Callbacks are all represented as `js_sys::Function`. This means that all
  callbacks going through `web-sys` are a raw JS value. You can work with this
  by either juggling actual `js_sys::Function` instances or you can create a
  `Closure<dyn FnMut(...)>`, extract the underlying `JsValue` with `as_ref`, and
  then use `JsCast::unchecked_ref` to convert it to a `js_sys::Function`.

[webidl]: https://heycam.github.io/webidl/

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/type-translations.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/unstable-apis.md
# Unstable APIs

It's common for browsers to implement parts of a web API while the specification
for that API is still being written. The API may require frequent changes as the
specification continues to be developed, so the WebIDL is relatively unstable.

This causes some challenges for `web-sys` because it means `web-sys` would have
to make breaking API changes whenever the WebIDL changes. It also means that
previously published `web-sys` versions would be invalid, because the browser
API may have been changed to match the updated WebIDL.

To avoid frequent breaking changes for unstable APIs, `web-sys` hides all
unstable APIs through an attribute that looks like:

```rust
#[cfg(web_sys_unstable_apis)]
pub struct Foo;
```

By hiding unstable APIs through an attribute, it's necessary for crates to
explicitly opt-in to these reduced stability guarantees in order to use these
APIs. Specifically, these APIs do not follow semver and may break whenever the
WebIDL changes.

Crates can opt-in to unstable APIs at compile-time by passing the `cfg` flag
`web_sys_unstable_apis`.

Typically the `RUSTFLAGS` environment variable is used
to do this. For example:

```bash
RUSTFLAGS=--cfg=web_sys_unstable_apis cargo run
```

Alternatively, you can create a [cargo config file](https://doc.rust-lang.org/cargo/reference/config.html)
to set its [rustflags](https://doc.rust-lang.org/cargo/reference/config.html#buildrustflags):

Within `./.cargo/config.toml`:
```toml
[build]
rustflags = ["--cfg=web_sys_unstable_apis"]
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/web-sys/unstable-apis.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/passing-rust-closures-to-js.md
# Passing Rust Closures to Imported JavaScript Functions

The `#[wasm_bindgen]` attribute supports Rust closures being passed to
JavaScript in two variants:

1. Stack-lifetime closures that should not be invoked by JavaScript again after
   the imported JavaScript function that the closure was passed to returns.

2. Heap-allocated closures that can be invoked any number of times, but must be
   explicitly deallocated when finished.

## Stack-Lifetime Closures

Closures with a stack lifetime are passed to JavaScript as either `&dyn Fn` or `&mut
dyn FnMut` trait objects:

```rust
// Import JS functions that take closures

#[wasm_bindgen]
extern "C" {
    fn takes_immutable_closure(f: &dyn Fn());

    fn takes_mutable_closure(f: &mut dyn FnMut());
}

// Usage

takes_immutable_closure(&|| {
    // ...
});

let mut times_called = 0;
takes_mutable_closure(&mut || {
    times_called += 1;
});
```

**Once these imported functions return, the closures that were given to them
will become invalidated, and any future attempts to call those closures from
JavaScript will raise an exception.**

Closures also support arguments and return values like exports do, for example:

```rust
#[wasm_bindgen]
extern "C" {
    fn takes_closure_that_takes_int_and_returns_string(x: &dyn Fn(u32) -> String);
}

takes_closure_that_takes_int_and_returns_string(&|x: u32| -> String {
    format!("x is {}", x)
});
```

## Heap-Allocated Closures

Sometimes the discipline of stack-lifetime closures is not desired. For example,
you'd like to schedule a closure to be run on the next turn of the event loop in
JavaScript through `setTimeout`. For this, you want the imported function to
return but the JavaScript closure still needs to be valid!

For this scenario, you need the `Closure` type, which is defined in the
`wasm_bindgen` crate, exported in `wasm_bindgen::prelude`, and represents a
"long lived" closure.

The validity of the JavaScript closure is tied to the lifetime of the `Closure`
in Rust. **Once a `Closure` is dropped, it will deallocate its internal memory
and invalidate the corresponding JavaScript function so that any further
attempts to invoke it raise an exception.**

Like stack closures a `Closure` supports both `Fn` and `FnMut` closures, as well
as arguments and returns.

```rust
#[wasm_bindgen]
extern "C" {
    fn setInterval(closure: &Closure<dyn FnMut()>, millis: u32) -> f64;
    fn clearInterval(token: f64);

    #[wasm_bindgen(js_namespace = console)]
    fn log(s: &str);
}

#[wasm_bindgen]
pub struct Interval {
    closure: Closure<dyn FnMut()>,
    token: f64,
}

impl Interval {
    pub fn new<F: 'static>(millis: u32, f: F) -> Interval
    where
        F: FnMut()
    {
        // Construct a new closure.
        let closure = Closure::new(f);

        // Pass the closure to JS, to run every n milliseconds.
        let token = setInterval(&closure, millis);

        Interval { closure, token }
    }
}

// When the Interval is destroyed, clear its `setInterval` timer.
impl Drop for Interval {
    fn drop(&mut self) {
        clearInterval(self.token);
    }
}

// Keep logging "hello" every second until the resulting `Interval` is dropped.
#[wasm_bindgen]
pub fn hello() -> Interval {
    Interval::new(1_000, || log("hello"))
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/passing-rust-closures-to-js.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/weak-references.md
# Support for Weak References

By default wasm-bindgen does use the [TC39 weak references
proposal](https://github.com/tc39/proposal-weakrefs) if support is detected.
At the time of this writing all major browsers do support it.

Without weak references your JS integration may be susceptible to memory leaks
in Rust, for example:

* You could forget to call `.free()` on a JS object, leaving the Rust memory
  allocated.
* Rust closures converted to JS values (the `Closure` type) may not be executed
  and cleaned up.
* Rust closures have `Closure::{into_js_value,forget}` methods which explicitly
  do not free the underlying memory.

These issues are all solved with the weak references proposal in JS.
`FinalizationRegistry` will ensure that all memory is cleaned up, regardless of
whether it's explicitly deallocated or not. Note that explicit deallocation
is always a possibility and supported, but if it's not called then memory will
still be automatically deallocated if `FinalizationRegistry` support is detected.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/weak-references.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/cli.md
# The `wasm-bindgen` Command Line Interface

The `wasm-bindgen` command line tool has a number of options available to it to
tweak the JavaScript that is generated. The most up-to-date set of flags can
always be listed via `wasm-bindgen --help`.

## Installation

```
cargo install -f wasm-bindgen-cli
```

## Usage

```
wasm-bindgen [options] ./target/wasm32-unknown-unknown/release/crate.wasm
```

## Options

### `--out-dir DIR`

The target directory to emit the JavaScript bindings, TypeScript definitions,
processed `.wasm` binary, etc...

### `--target`

This flag indicates what flavor of output what `wasm-bindgen` should generate.
For example it could generate code to be loaded in a bundler like Webpack, a
native web page, or Node.js. For a full list of options to pass this flag, see
the section on [deployment]

[deployment]: deployment.html

### `--no-modules-global VAR`

When `--target no-modules` is used this flag can indicate what the name of the
global to assign generated bindings to.

For more information about this see the section on [deployment]

### `--typescript`

Output a TypeScript declaration file for the generated JavaScript bindings. This
is on by default.

### `--no-typescript`

By default, a `*.d.ts` TypeScript declaration file is generated for the
generated JavaScript bindings, but this flag will disable that.

### `--omit-imports`

When the `module` attribute is used with the `wasm-bindgen` macro, the code
generator will emit corresponding `import` or `require` statements in the header
section of the generated javascript. This flag causes those import statements to
be omitted. This is necessary for some use cases, such as generating javascript
which is intended to be used with Electron (with node integration disabled),
where the imports are instead handled through a separate preload script.

### `--debug`

Generates a bit more JS and Wasm in "debug mode" to help catch programmer
errors, but this output isn't intended to be shipped to production.

### `--no-demangle`

When post-processing the `.wasm` binary, do not demangle Rust symbols in the
"names" custom section.

### `--keep-lld-exports`

When post-processing the `.wasm` binary, do not remove exports that are
synthesized by Rust's linker, LLD.

### `--keep-debug`

When post-processing the `.wasm` binary, do not strip DWARF debug info custom
sections.

### `--browser`

When generating bundler-compatible code (see the section on [deployment]) this
indicates that the bundled code is always intended to go into a browser so a few
checks for Node.js can be elided.

### `--omit-default-module-path`

Don't add WebAssembly fallback imports in generated JavaScript.

### `--split-linked-modules`

Controls whether wasm-bindgen will split linked modules out into their own
files. Enabling this is recommended, because it allows lazy-loading the linked
modules and setting a stricter Content Security Policy.

wasm-bindgen uses the `new URL('…', import.meta.url)` syntax to resolve the
links to such split out files. This breaks with most bundlers, since the bundler
doesn't know to include the linked module in its output. That's why this option
is disabled by default. Webpack 5 is an exception, which has special treatment
for that syntax.

For other bundlers, you'll need to take extra steps to get it to work, likely by
using a plugin. Alternatively, you can leave the syntax as is and instead
manually configure the bundler to copy all files in `snippets/` to the output
directory, preserving their paths relative to whichever bundled file ends up
containing the JS shim.

On the no-modules target, `link_to!` won't work if used outside of a document,
e.g. inside a worker. This is because it's impossible to figure out what the
URL of the linked module is without a reference point like `import.meta.url`.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/cli.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/working-with-duck-typed-interfaces.md
# Working with Duck-Typed Interfaces

Liberal use of [the `structural`
attribute](./attributes/on-js-imports/structural.html) on imported methods,
getters, and setters allows you to define duck-typed interfaces. A duck-typed
interface is one where many different JavaScript objects that don't share the
same base class in their prototype chain and therefore are not `instanceof` the
same base can be used the same way.

## Defining a Duck-Typed Interface in Rust

```rust
{{#include ../../../examples/duck-typed-interfaces/src/lib.rs}}
```

## JavaScript Usage

```js
{{#include ../../../examples/duck-typed-interfaces/duck-typed-interfaces.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/working-with-duck-typed-interfaces.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/static-js-objects.md
# Use of `static` to Access JS Objects

JavaScript modules will often export arbitrary static objects for use with
their provided interfaces. These objects can be accessed from Rust by declaring
a named `static` in the `extern` block with an
`#[wasm_bindgen(thread_local_v2)]` attribute. `wasm-bindgen` will bind a
`JsThreadLocal` for these objects, which can be cloned into a `JsValue`.

These values are cached in a thread-local and are meant to bind static values
or objects only. For getters which can change their return value or throw see
[how to import getters](attributes/on-js-imports/getter-and-setter.md).

For example, given the following JavaScript:

```js
let COLORS = {
    red: 'rgb(255, 0, 0)',
    green: 'rgb(0, 255, 0)',
    blue: 'rgb(0, 0, 255)',
};
```

`static` can aid in the access of this object from Rust:

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(thread_local_v2)]
    static COLORS: JsValue;
}

fn get_colors() -> JsValue {
    COLORS.with(JsValue::clone)
}
```

Since `COLORS` is effectively a JavaScript namespace, we can use the same
mechanism to refer directly to namespaces exported from JavaScript modules, and
even to exported classes:

```js
let namespace = {
    // Members of namespace...
};

class SomeType {
    // Definition of SomeType...
};

export { SomeType, namespace };
```

The binding for this module:

```rust
#[wasm_bindgen(module = "/js/some-rollup.js")]
extern "C" {
    // Likewise with the namespace--this refers to the object directly.
    #[wasm_bindgen(thread_local_v2, js_name = namespace)]
    static NAMESPACE: JsValue;

    // Refer to SomeType's class
    #[wasm_bindgen(thread_local_v2, js_name = SomeType)]
    static SOME_TYPE: JsValue;

    // Other bindings for SomeType
    type SomeType;
    #[wasm_bindgen(constructor)]
    fn new() -> SomeType;
}
```

## Optional statics

If you expect the JavaScript value you're trying to access to not always be
available you can use `Option<T>` to handle this:

```rust
extern "C" {
    type Crypto;
    #[wasm_bindgen(thread_local_v2, js_name = crypto)]
    static CRYPTO: Option<Crypto>;
}
```

If `crypto` is not declared or nullish (`null` or `undefined`) in JavaScript,
it will simply return `None` in Rust. This will also account for namespaces: it
will return `Some(T)` only if all parts are declared and not nullish.

## Static strings

Strings can be imported to avoid going through `TextDecoder/Encoder` when requiring just a `JsString`. This can be useful when dealing with environments where `TextDecoder/Encoder` is not available, like in audio worklets.

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(thread_local_v2, static_string)]
    static STRING: JsString = "a string literal";
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/static-js-objects.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/receiving-js-closures-in-rust.md
# Receiving JavaScript Closures in Exported Rust Functions

You can use the `js-sys` crate to access JavaScript's `Function` type, and
invoke that function via `Function.prototype.apply` and
`Function.prototype.call`.

For example, we can wrap a `Vec<u32>` in a new type, export it to JavaScript,
and invoke a JavaScript closure on each member of the `Vec`:

```rust
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub struct VecU32 {
    xs: Vec<u32>,
}

#[wasm_bindgen]
impl VecU32 {
    pub fn each(&self, f: &js_sys::Function) {
        let this = JsValue::null();
        for &x in &self.xs {
            let x = JsValue::from(x);
            let _ = f.call1(&this, &x);
        }
    }
}
```

Since Rust has no function overloading, the `call#` method also requires a
number representing the amount of arguments passed to the JavaScript closure.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/receiving-js-closures-in-rust.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/optimize-size.md
# Optimizing for Size with `wasm-bindgen`

The Rust and WebAssembly Working Group's [Game of Life tutorial][gol] has an
excellent section on [shrinking Wasm code size][size], but there's a few
`wasm-bindgen`-specific items to mention as well!

First and foremost, `wasm-bindgen` is designed to be lightweight and a "pay only
for what you use" mentality. If you suspect that `wasm-bindgen` is bloating your
program that is a bug and we'd like to know about it! Please feel free to [file
an issue][issue], even if it's a question!

### What to profile

With `wasm-bindgen` there's a few different files to be measuring the size of.
The first of which is the output of the compiler itself, typically at
`target/wasm32-unknown-unknown/release/foo.wasm`. **This file is not optimized
for size and you should not measure it.** The output of the compiler when
linking with `wasm-bindgen` is by design larger than it needs to be, the
`wasm-bindgen` CLI tool will automatically strip all unneeded functionality out
of the binary.

This leaves us with two primary generated files to measure the size of:

* **Generated wasm** - after running the `wasm-bindgen` CLI tool you'll get a
  file in `--out-dir` that looks like `foo_bg.wasm`. This file is the final
  fully-finished artifact from `wasm-bindgen`, and it reflects the size of the
  app you'll be publishing. All the optimizations [mentioned in the code size
  tutorial][size] will help reduce the size of this binary, so feel free to go
  crazy!

* **Generated JS** - the other file after running `wasm-bindgen` is a `foo.js`
  file which is what's actually imported by other JS code. This file is already
  generated to be as small as possible (not including unneeded functionality).
  The JS, however, is not uglified or minified, but rather still human readable
  and debuggable. It's expected that you'll run an uglifier or bundler of the JS
  output to minimize it further in your application. If you spot a way we could
  reduce the output JS size further (or make it more amenable to bundler
  minification), please let us know!

### Example

As an example, the `wasm-bindgen` repository [contains an example][example]
about generating small Wasm binaries and shows off how to generate a small wasm
file for adding two numbers.

[gol]: https://rustwasm.github.io/book/game-of-life/introduction.html
[size]: https://rustwasm.github.io/book/game-of-life/code-size.html
[issue]: https://github.com/rustwasm/wasm-bindgen/issues/new
[example]: https://rustwasm.github.io/docs/wasm-bindgen/examples/add.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/optimize-size.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/reference-types.md
# Support for Reference Types

WebAssembly recently has gained support for a new value type called `externref`.
Proposed in the [WebAssembly reference types
repo](https://github.com/webassembly/reference-types) this feature of
WebAssembly is hoped to enable more efficient communication between the host
(JS) and the Wasm module. This feature removes the need for much of the JS glue
generated by `wasm-bindgen` because it can natively call APIs with JS values.

For example, this Rust function:

```rust
#[wasm_bindgen]
pub fn takes_js_value(a: &JsValue) {
    // ...
}
```

generates this JS glue *without* reference types support:

```js
const heap = new Array(32).fill(undefined);

heap.push(undefined, null, true, false);

let stack_pointer = 32;

function addBorrowedObject(obj) {
    if (stack_pointer == 1) throw new Error('out of js stack');
    heap[--stack_pointer] = obj;
    return stack_pointer;
}

export function takes_js_value(a) {
    try {
        wasm.takes_js_value(addBorrowedObject(a));
    } finally {
        heap[stack_pointer++] = undefined;
    }
}
```

We can see here how under the hood the JS is managing a table of JS values which
are passed to the Wasm binary, so Wasm actually only works in indices. If we
compile with `-Ctarget-feature=+reference-types` (by default since Rust v1.82),
however, the generated JS looks like:

```js
export function takes_js_value(a) {
    wasm.takes_js_value(a);
}
```

And that's it! The WebAssembly binary takes the JS value directly and manages it
internally.

Currently this feature is supported in Firefox 79+ and Chrome. Support in other
browsers is likely coming soon! In Node.js this feature is behind the
`--experimental-wasm-anyref` flag, although the support does not currently align
with the upstream specification as of 14.6.0.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/reference-types.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/browser-support.md
# Supported Browsers

The output of `wasm-bindgen` includes a JS file, and as a result it's good to
know what browsers that file is expected to be used in! By default the output
uses ES modules with Wasm imports which isn't implemented in browsers today,
but when using a bundler (like Webpack) or `--target web` you should be able
to produce output suitable for all browsers.

Firefox, Chrome, Safari, and Edge browsers are all supported by
`wasm-bindgen`. If you find a problem in one of these browsers please [report
it] as we'd like to fix the bug! If you find a bug in another browser we would
also like to be aware of it!

## Caveats

* **IE 11** - `wasm-bindgen` by default requires support for
  `WebAssembly`, but no version of IE currently supports `WebAssembly`. You can
  support IE by [compiling Wasm files to JS using `wasm2js`][w2js]. Note that
  at this time no bundler will do this by default, but we'd love to document
  plugins which do this if you are aware of one!

If you find other incompatibilities please report them to us! We'd love to
either keep this list up-to-date or fix the underlying bugs :)

[report it]: https://github.com/rustwasm/wasm-bindgen/issues/new
[w2js]: https://github.com/WebAssembly/binaryen

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/browser-support.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/deployment.md
# Deploying Rust and WebAssembly

At this point in time deploying Rust and WebAssembly to the web or other
locations unfortunately isn't a trivial task to do. This page hopes to serve
as documentation for the various known options, and as always PRs are welcome
to update this if it's out of date!

The methods of deployment and integration here are primarily tied to the
`--target` flag.

| Value           | Summary                                                    |
|-----------------|------------------------------------------------------------|
| [`bundler`]     | Suitable for loading in bundlers like Webpack              |
| [`web`]         | Directly loadable in a web browser                         |
| [`nodejs`]      | Loadable via `require` as a Node.js CommonJS module        |
| [`deno`]        | Loadable using imports from Deno modules                   |
| [`no-modules`]  | Like `web`, but older and doesn't use ES modules           |
| [`experimental-nodejs-module`]  | Loadable via `import` as a Node.js ESM module. |

[`bundler`]: #bundlers
[`web`]: #without-a-bundler
[`no-modules`]: #without-a-bundler
[`nodejs`]: #nodejs
[`deno`]: #deno
[`experimental-nodejs-module`]: #nodejs-module

## Bundlers

**`--target bundler`**

The default output of `wasm-bindgen`, or the `bundler` target, assumes a model
where the Wasm module itself is natively an ES module. This model, however, is not
natively implemented in any JS implementation at this time. As a result, to
consume the default output of `wasm-bindgen` you will need a bundler of some
form.

> **Note**: the choice of this default output was done to reflect the trends of
> the JS ecosystem. While tools other than bundlers don't support Wasm files as
> native ES modules today they're all very much likely to in the future!

Currently the only known bundler known to be fully compatible with
`wasm-bindgen` is [webpack]. Most [examples] use webpack, and you can check out
the [hello world example online] to see the details of webpack configuration
necessary.

[webpack]: https://webpack.js.org/
[examples]: ../examples/index.html
[hello world example online]: ../examples/hello-world.html

## Without a Bundler

**`--target web` or `--target no-modules`**

If you're not using a bundler but you're still running code in a web browser,
`wasm-bindgen` still supports this! For this use case you'll want to use the
`--target web` flag. You can check out a [full example][nomex] in the
documentation, but the highlights of this output are:

* When compiling you'll pass `--target web` to `wasm-bindgen`
* The output can natively be included on a web page, and doesn't require any
  further postprocessing. The output is included as an ES module.
* The `--target web` mode is not able to use NPM dependencies.
* You'll want to review the [browser requirements] for `wasm-bindgen` because
  no polyfills will be available.

[nomex]: ../examples/without-a-bundler.html
[rfc1]: https://github.com/rustwasm/rfcs/pull/6
[rfc2]: https://github.com/rustwasm/rfcs/pull/8
[browser requirements]: browser-support.html

The CLI also supports an output mode called `--target no-modules` which is
similar to the `web` target in that it requires manual initialization of the
wasm and is intended to be included in web pages without any further
postprocessing. See the [without a bundler example][nomex] for some more
information about `--target no-modules`.

## Node.js

**`--target nodejs`**

If you're deploying WebAssembly into Node.js (perhaps as an alternative to a
native module), then you'll want to pass the `--target nodejs` flag to `wasm-bindgen`.

Like the "without a bundler" strategy, this method of deployment does not
require any further postprocessing. The generated JS shims can be `require`'d
just like any other Node module (even the `*_bg` Wasm file can be `require`'d
as it has a JS shim generated as well).

Note that this method requires a version of Node.js with WebAssembly support,
which is currently Node 8 and above.

## Node.js Module

**`--target experemintal-nodejs-module`**

If you're deploying WebAssembly into Node.js as a JavaScript module,
then you'll want to pass the `--target experimental-nodejs-module` flag to `wasm-bindgen`.

Like the "node" strategy, this method of deployment does not
require any further postprocessing. The generated JS shims can be `import`ed
just like any other Node module.

Note that this method requires a version of Node.js with WebAssembly and module support,
which is currently Node 12 and above.

**Currently experimental. Target is expected to be changed before stabilization.**

## Deno

**`--target deno`**

To deploy WebAssembly to Deno, use the `--target deno` flag.
To then import your module inside deno, use

```ts
// @deno-types="./out/crate_name.d.ts"
import { yourFunction } from "./out/crate_name.js";
```

## NPM

If you'd like to deploy compiled WebAssembly to NPM, then the tool for the job
is [`wasm-pack`]. More information on this coming soon!

[`wasm-pack`]: https://rustwasm.github.io/docs/wasm-pack/

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/deployment.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/index.md
# Reference

This section contains reference material for using `wasm-bindgen`. It is not
intended to be read start to finish. Instead, it aims to quickly answer
questions like:

* Is type X supported as a parameter in a Rust function exported to JavaScript?

* What was that CLI flag to disable ECMAScript modules output, and instead
  attach the JavaScript bindings directly to `window`?

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/iterating-over-js-values.md
# Iterating over JavaScript Values

## Methods That Return `js_sys::Iterator`

Some JavaScript collections have methods for iterating over their values or
keys:

* [`Map::values`](https://rustwasm.github.io/wasm-bindgen/api/js_sys/struct.Map.html#method.values)
* [`Set::keys`](https://rustwasm.github.io/wasm-bindgen/api/js_sys/struct.Set.html#method.keys)
* etc...

These methods return
[`js_sys::Iterator`](https://rustwasm.github.io/wasm-bindgen/api/js_sys/struct.Iterator.html),
which is the Rust representation of a JavaScript object that has a `next` method
that either returns the next item in the iteration, notes that iteration has
completed, or throws an error. That is, `js_sys::Iterator` represents an object
that implements [the duck-typed JavaScript iteration
protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).

`js_sys::Iterator` can be converted into a Rust iterator either by reference
(into
[`js_sys::Iter<'a>`](https://rustwasm.github.io/wasm-bindgen/api/js_sys/struct.Iter.html))
or by value (into
[`js_sys::IntoIter`](https://rustwasm.github.io/wasm-bindgen/api/js_sys/struct.IntoIter.html)). The
Rust iterator will yield items of type `Result<JsValue>`. If it yields an
`Ok(...)`, then the JS iterator protocol returned an element. If it yields an
`Err(...)`, then the JS iterator protocol threw an exception.

```rust
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub fn count_strings_in_set(set: &js_sys::Set) -> u32 {
    let mut count = 0;

    // Call `keys` to get an iterator over the set's elements. Because this is
    // in a `for ... in ...` loop, Rust will automatically call its
    // `IntoIterator` trait implementation to convert it into a Rust iterator.
    for x in set.keys() {
        // We know the built-in iterator for set elements won't throw
        // exceptions, so just unwrap the element. If this was an untrusted
        // iterator, we might want to explicitly handle the case where it throws
        // an exception instead of returning a `{ value, done }` object.
        let x = x.unwrap();

        // If `x` is a string, increment our count of strings in the set!
        if x.is_string() {
            count += 1;
        }
    }

    count
}
```

## Iterating Over <u>Any</u> JavaScript Object that Implements the Iterator Protocol

You could manually test for whether an object implements JS's duck-typed
iterator protocol, and if so, convert it into a `js_sys::Iterator` that you can
finally iterate over. You don't need to do this by-hand, however, since we
bundled this up as [the `js_sys::try_iter`
function!](https://rustwasm.github.io/wasm-bindgen/api/js_sys/fn.try_iter.html)

For example, we can write a function that collects the numbers from any JS
iterable and returns them as an `Array`:

```rust
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub fn collect_numbers(some_iterable: &JsValue) -> Result<js_sys::Array, JsValue> {
    let nums = js_sys::Array::new();

    let iterator = js_sys::try_iter(some_iterable)?.ok_or_else(|| {
        "need to pass iterable JS values!"
    })?;

    for x in iterator {
        // If the iterator's `next` method throws an error, propagate it
        // up to the caller.
        let x = x?;

        // If `x` is a number, add it to our array of numbers!
        if x.as_f64().is_some() {
            nums.push(&x);
        }
    }

    Ok(nums)
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/iterating-over-js-values.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/js-promises-and-rust-futures.md
# Working with a JS `Promise` and a Rust `Future`

Many APIs on the web work with a `Promise`, such as an `async` function in JS.
Naturally you'll probably want to interoperate with them from Rust! To do that
you can use the `wasm-bindgen-futures` crate as well as Rust `async`
functions.

The first thing you might encounter is the need for working with a `Promise`.
For this you'll want to use [`js_sys::Promise`]. Once you've got one of those
values you can convert that value to `wasm_bindgen_futures::JsFuture`. This type
implements the `std::future::Future` trait which allows naturally using it in an
`async` function. For example:

[`js_sys::Promise`]: https://docs.rs/js-sys/*/js_sys/struct.Promise.html

```rust
async fn get_from_js() -> Result<JsValue, JsValue> {
    let promise = js_sys::Promise::resolve(&42.into());
    let result = wasm_bindgen_futures::JsFuture::from(promise).await?;
    Ok(result)
}
```

Here we can see how converting a `Promise` to Rust creates a `impl Future<Output
= Result<JsValue, JsValue>>`. This corresponds to `then` and `catch` in JS where
a successful promise becomes `Ok` and an erroneous promise becomes `Err`.

You can also import a JS async function directly with a `extern "C"` block, and
the promise will be converted to a future automatically. For now the return type
must be `JsValue` or no return at all:

```rust
#[wasm_bindgen]
extern "C" {
    async fn async_func_1_ret_number() -> JsValue;
    async fn async_func_2();
}

async fn get_from_js() -> f64 {
    async_func_1_ret_number().await.as_f64().unwrap_or(0.0)
}
```

The `async` can be combined with the `catch` attribute to manage errors from the
JS promise:

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(catch)]
    async fn async_func_3() -> Result<JsValue, JsValue>;
    #[wasm_bindgen(catch)]
    async fn async_func_4() -> Result<(), JsValue>;
}
```

Next up you'll probably want to export a Rust function to JS that returns a
promise. To do this you can use an `async` function and `#[wasm_bindgen]`:

```rust
#[wasm_bindgen]
pub async fn foo() {
    // ...
}
```

When invoked from JS the `foo` function here will return a `Promise`, so you can
import this as:

```js
import { foo } from "my-module";

async function shim() {
    const result = await foo();
    // ...
}
```

## Return values of `async fn`

When using an `async fn` in Rust and exporting it to JS there's some
restrictions on the return type. The return value of an exported Rust function
will eventually become `Result<JsValue, JsValue>` where `Ok` turns into a
successfully resolved promise and `Err` is equivalent to throwing an exception.

The following types are supported as return types from an `async fn`:

* `()` - turns into a successful `undefined` in JS
* `T: Into<JsValue>` - turns into a successful JS value
* `Result<(), E: Into<JsValue>>` - if `Ok(())` turns into a successful
  `undefined` and otherwise turns into a failed promise with `E` converted to a
  JS value
* `Result<T: Into<JsValue>, E: Into<JsValue>>` - like the previous case except
  both data payloads are converted into a `JsValue`.

Note that many types implement being converted into a `JsValue`, such as all
imported types via `#[wasm_bindgen]` (aka those in `js-sys` or `web-sys`),
primitives like `u32`, and all exported `#[wasm_bindgen]` types. In general,
you should be able to write code without having too many explicit conversions,
and the macro should take care of the rest!

## Using `wasm-bindgen-futures`

The `wasm-bindgen-futures` crate bridges the gap between JavaScript `Promise`s
and Rust `Future`s. Its `JsFuture` type provides conversion from a JavaScript
`Promise` into a Rust `Future`, and its `future_to_promise` function converts a
Rust `Future` into a JavaScript `Promise` and schedules it to be driven to
completion.

Learn more:

* [`wasm_bindgen_futures` on crates.io][crate]
* [`wasm-bindgen-futures` API documentation and example usage][docs]

[crate]: https://crates.io/crates/wasm-bindgen-futures
[docs]: https://rustwasm.github.io/wasm-bindgen/api/wasm_bindgen_futures/

## Compatibility with versions of `Future`

The current crate on crates.io, `wasm-bindgen-futures 0.4.*`, supports
`std::future::Future` and `async`/`await` in Rust. This typically requires Rust
1.39.0+ (as of this writing on 2019-09-05 it's the nightly channel of Rust).

If you're using the `Future` trait from the `futures` `0.1.*` crate then you'll
want to use the `0.3.*` track of `wasm-bindgen-futures` on crates.io.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/js-promises-and-rust-futures.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/js-snippets.md
# JS Snippets

Often when developing a crate you want to run on the web you'll want to include
some JS code here and there. While [`js-sys`](https://docs.rs/js-sys) and
[`web-sys`](https://docs.rs/web-sys) cover many needs they don't cover
everything, so `wasm-bindgen` supports the ability to write JS code next to your
Rust code and have it included in the final output artifact.

To include a local JS file, you'll use the `#[wasm_bindgen(module)]` macro:

```rust
#[wasm_bindgen(module = "/js/foo.js")]
extern "C" {
    fn add(a: u32, b: u32) -> u32;
}
```

This declaration indicates that all the functions contained in the `extern`
block are imported from the file `/js/foo.js`, where the root is relative to the
crate root (where `Cargo.toml` is located).

The `/js/foo.js` file will make its way to the final output when `wasm-bindgen`
executes, so you can use the `module` annotation in a library without having to
worry users of your library!

The JS file itself must be written with ES module syntax:

```js
export function add(a, b) {
    return a + b;
}
```

A full design of this feature can be found in [RFC 6] as well if you're
interested!

[RFC 6]: https://github.com/rustwasm/rfcs/pull/6

### Using `inline_js`

In addition to `module = "..."` if you're a macro author you also have the
ability to use the `inline_js` attribute:

```rust
#[wasm_bindgen(inline_js = "export function add(a, b) { return a + b; }")]
extern "C" {
    fn add(a: u32, b: u32) -> u32;
}
```

Using `inline_js` indicates that the JS module is specified inline in the
attribute itself, and no files are loaded from the filesystem. They have the
same limitations and caveats as when using `module`, but can sometimes be easier
to generate for macros themselves. It's not recommended for hand-written code to
make use of `inline_js` but instead to leverage `module` where possible.

### Caveats

While quite useful local JS snippets currently suffer from a few caveats which
are important to be aware of. Many of these are temporary though!

* Currently `import` statements are not supported in the JS file. This is a
  restriction we may lift in the future once we settle on a good way to support
  this. For now, though, js snippets must be standalone modules and can't import
  from anything else.

* Only `--target web` and the default bundler output mode are supported. To
  support `--target nodejs` we'd need to translate ES module syntax to CommonJS
  (this is
  planned to be done, just hasn't been done yet). Additionally to support
  `--target no-modules` we'd have to similarly translate from ES modules to
  something else.

* Paths in `module = "..."` must currently start with `/`, or be rooted at the
  crate root. It is intended to eventually support relative paths like `./` and
  `../`, but it's currently believed that this requires more support in
  the Rust `proc_macro` crate.

As above, more detail about caveats can be found in [RFC 6].

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/js-snippets.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/accessing-properties-of-untyped-js-values.md
# Accessing Properties of Untyped JavaScript Values

To read and write arbitrary properties from any untyped JavaScript value
regardless if it is an `instanceof` some JavaScript class or not, use [the
`js_sys::Reflect` APIs][js-sys-reflect]. These APIs are bindings to the
[JavaScript builtin `Reflect` object][mdn-reflect] and its methods.

You might also benefit from [using duck-typed
interfaces](./working-with-duck-typed-interfaces.html) instead of working with
untyped values.

## Reading Properties with `js_sys::Reflect::get`

[API documentation for `js_sys::Reflect::get`.](https://docs.rs/js-sys/0.3.39/js_sys/Reflect/fn.get.html)

A function that returns the value of a property.

#### Rust Usage

```rust
let value = js_sys::Reflect::get(&target, &property_key)?;
```

#### JavaScript Equivalent

```js
let value = target[property_key];
```

## Writing Properties with `js_sys::Reflect::set`

[API documentation for `js_sys::Reflect::set`.](https://docs.rs/js-sys/0.3.39/js_sys/Reflect/fn.set.html)

A function that assigns a value to a property. Returns a boolean that is true if
the update was successful.

#### Rust Usage

```rust
js_sys::Reflect::set(&target, &property_key, &value)?;
```

#### JavaScript Equivalent

```js
target[property_key] = value;
```

## Determining if a Property Exists with `js_sys::Reflect::has`

[API documentation for `js_sys::Reflect::has`.](https://docs.rs/js-sys/0.3.39/js_sys/Reflect/fn.has.html)

The JavaScript `in` operator as function. Returns a boolean indicating whether
an own or inherited property exists on the target.

#### Rust Usage

```rust
if js_sys::Reflect::has(&target, &property_key)? {
    // ...
} else {
    // ...
}
```

#### JavaScript Equivalent

```js
if (property_key in target) {
    // ...
} else {
    // ...
}
```

## But wait — there's more!

See [the `js_sys::Reflect` API documentation][js-sys-reflect] for the full
listing of JavaScript value reflection and introspection capabilities.

[js-sys-reflect]: https://docs.rs/js-sys/latest/js_sys/Reflect/index.html
[mdn-reflect]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/accessing-properties-of-untyped-js-values.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types.md
# Supported Rust Types and their JavaScript Representations

This section provides an overview of all the types that `wasm-bindgen` can send
and receive across the WebAssembly ABI boundary, and how they translate into
JavaScript.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/rust-targets.md
# Supported Rust Targets

> **Note**: This section is about Rust target triples, not targets like node/web
> workers/browsers. More information on that coming soon!

The `wasm-bindgen` project is designed to target the `wasm32-unknown-unknown`
target in Rust. This target is a "bare bones" target for Rust which emits
WebAssembly as output. The standard library is largely inert as modules like
`std::fs` and `std::net` will simply return errors.

## Non-wasm targets

Note that `wasm-bindgen` also aims to compile on all targets. This means that it
should be safe, if you like, to use `#[wasm_bindgen]` even when compiling for
Windows (for example). For example:

```rust
#[wasm_bindgen]
pub fn add(a: u32, b: u32) -> u32 {
    a + b
}

#[cfg(not(target_arch = "wasm32"))]
fn main() {
    println!("1 + 2 = {}", add(1, 2));
}
```

This program will compile and work on all platforms, not just
`wasm32-unknown-unknown`. Note that imported functions with `#[wasm_bindgen]`
will unconditionally panic on non-wasm targets. For example:

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(js_namespace = console)]
    fn log(s: &str);
}

fn main() {
    log("hello!");
}
```

This program will unconditionally panic on all platforms other than
`wasm32-unknown-unknown`.

For better compile times, however, you likely want to only use `#[wasm_bindgen]`
on the `wasm32-unknown-unknown` target. You can have a target-specific
dependency like so:

```toml
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = "0.2"
```

And in your code you can use:

```rust
#[cfg(target_arch = "wasm32")]
#[wasm_bindgen]
pub fn only_on_the_wasm_target() {
    // ...
}
```

## Other Web Targets

The `wasm-bindgen` target does not support the `wasm32-unknown-emscripten` nor
the `asmjs-unknown-emscripten` targets. There are currently no plans to support
these targets either. All annotations work like other platforms on the targets,
retaining exported functions and causing all imports to panic.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/rust-targets.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/arbitrary-data-with-serde.md
# Serializing and Deserializing Arbitrary Data Into and From `JsValue` with Serde

It's possible to pass arbitrary data from Rust to JavaScript by serializing it
with [Serde](https://github.com/serde-rs/serde). This can be done through the
[`serde-wasm-bindgen`](https://docs.rs/serde-wasm-bindgen) crate.

## Add dependencies

To use `serde-wasm-bindgen`, you first have to add it as a dependency in your
`Cargo.toml`. You also need the `serde` crate, with the `derive` feature
enabled, to allow your types to be serialized and deserialized with Serde.

```toml
[dependencies]
serde = { version = "1.0", features = ["derive"] }
serde-wasm-bindgen = "0.4"
```

## Derive the `Serialize` and `Deserialize` Traits

Add `#[derive(Serialize, Deserialize)]` to your type. All of your type's
members must also be supported by Serde, i.e. their types must also implement
the `Serialize` and `Deserialize` traits.

For example, let's say we'd like to pass this `struct` to JavaScript; doing so
is not possible in `wasm-bindgen` normally due to the use of `HashMap`s, arrays,
and nested `Vec`s. None of those types are supported for sending across the wasm
ABI naively, but all of them implement Serde's `Serialize` and `Deserialize`.

Note that we do not need to use the `#[wasm_bindgen]` macro.

```rust
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize)]
pub struct Example {
    pub field1: HashMap<u32, String>,
    pub field2: Vec<Vec<f32>>,
    pub field3: [f32; 4],
}
```

## Send it to JavaScript with `serde_wasm_bindgen::to_value`

Here's a function that will pass an `Example` to JavaScript by serializing it to
`JsValue`:

```rust
#[wasm_bindgen]
pub fn send_example_to_js() -> JsValue {
    let mut field1 = HashMap::new();
    field1.insert(0, String::from("ex"));
    let example = Example {
        field1,
        field2: vec![vec![1., 2.], vec![3., 4.]],
        field3: [1., 2., 3., 4.]
    };

    serde_wasm_bindgen::to_value(&example).unwrap()
}
```

## Receive it from JavaScript with `serde_wasm_bindgen::from_value`

Here's a function that will receive a `JsValue` parameter from JavaScript and
then deserialize an `Example` from it:

```rust
#[wasm_bindgen]
pub fn receive_example_from_js(val: JsValue) {
    let example: Example = serde_wasm_bindgen::from_value(val).unwrap();
    ...
}
```

## JavaScript Usage

In the `JsValue` that JavaScript gets, `field1` will be a `Map`, `field2` will
be a JavaScript `Array` whose members are `Array`s of numbers, and `field3`
will be an `Array` of numbers.

```js
import { send_example_to_js, receive_example_from_js } from "example";

// Get the example object from wasm.
let example = send_example_to_js();

// Add another "Vec" element to the end of the "Vec<Vec<f32>>"
example.field2.push([5, 6]);

// Send the example object back to wasm.
receive_example_from_js(example);
```

## An alternative approach - using JSON

`serde-wasm-bindgen` works by directly manipulating JavaScript values. This
requires a lot of calls back and forth between Rust and JavaScript, which can
sometimes be slow. An alternative way of doing this is to serialize values to
JSON, and then parse them on the other end. Browsers' JSON implementations are
usually quite fast, and so this approach can outstrip `serde-wasm-bindgen`'s
performance in some cases. But this approach supports only types that can be
serialized as JSON, leaving out some important types that `serde-wasm-bindgen`
supports such as `Map`, `Set`, and array buffers.

That's not to say that using JSON is always faster, though - the JSON approach
can be anywhere from 2x to 0.2x the speed of `serde-wasm-bindgen`, depending on
the JS runtime and the values being passed. It also leads to larger code size
than `serde-wasm-bindgen`. So, make sure to profile each for your own use
cases.

This approach is implemented in [`gloo_utils::format::JsValueSerdeExt`]:

```toml
# Cargo.toml
[dependencies]
gloo-utils = { version = "0.1", features = ["serde"] }
```

```rust
use gloo_utils::format::JsValueSerdeExt;

#[wasm_bindgen]
pub fn send_example_to_js() -> JsValue {
    let mut field1 = HashMap::new();
    field1.insert(0, String::from("ex"));
    let example = Example {
        field1,
        field2: vec![vec![1., 2.], vec![3., 4.]],
        field3: [1., 2., 3., 4.]
    };

    JsValue::from_serde(&example).unwrap()
}

#[wasm_bindgen]
pub fn receive_example_from_js(val: JsValue) {
    let example: Example = val.into_serde().unwrap();
    ...
}
```

[`gloo_utils::format::JsValueSerdeExt`]: https://docs.rs/gloo-utils/latest/gloo_utils/format/trait.JsValueSerdeExt.html

## History

In previous versions of `wasm-bindgen`, `gloo-utils`'s JSON-based Serde support
(`JsValue::from_serde` and `JsValue::into_serde`) was built into `wasm-bindgen`
itself. However, this required a dependency on `serde_json`, which had a
problem: with certain features of `serde_json` and other crates enabled,
`serde_json` would end up with a circular dependency on `wasm-bindgen`, which
is illegal in Rust and caused people's code to fail to compile. So, these
methods were extracted out into `gloo-utils` with an extension trait and the
originals were deprecated.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/arbitrary-data-with-serde.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/non-null.md
# `NonNull<T>`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | No | No | Yes | Yes | Yes | A JavaScript number value |

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/non_null.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/non_null.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/non-null.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/result.md
# `Result<T, E>`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| No | No | No | Yes | No | No | Same as `T`, or an exception |

The `Result` type can be returned from functions exported to JS as well as
closures in Rust. The `Ok` type must be able to be converted to JS, and the
`Err` type must implement `Into<JsValue>`. Whenever `Ok(val)` is encountered
it's converted to JS and handed off, and whenever `Err(error)` is encountered
an exception is thrown in JS with `error`.

You can use `Result` to enable handling of JS exceptions with `?` in Rust,
naturally propagating it upwards to the Wasm boundary. Furthermore you can also
return custom types in Rust so long as they're all convertible to `JsValue`.

Note that if you import a JS function with `Result` you need
`#[wasm_bindgen(catch)]` to be annotated on the import (unlike exported
functions, which require no extra annotation). This may not be necessary in the
future though and it may work "as is"!.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/result.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/exported-rust-types.md
# Exported `struct Whatever` Rust Types

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | Yes | Yes | Yes | Yes | Yes | Instances of a `wasm-bindgen`-generated JavaScript `class Whatever { ... }` |

> **Note**: Public fields implementing `Copy` have automatically generated getters/setters.
> To generate getters/setters for non-`Copy` public fields, use `#[wasm_bindgen(getter_with_clone)]` for the struct
> or [implement getters/setters manually](https://rustwasm.github.io/wasm-bindgen/reference/attributes/on-rust-exports/getter-and-setter.html).

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/exported_types.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/exported_types.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/exported-rust-types.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/boxed-slices.md
# `Box<[T]>` and `Vec<T>`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | No | No | Yes | Yes | Yes | A JavaScript `Array` object |

You can pass boxed slices and `Vec`s of several different types to and from JS:

- `JsValue`s.
- Imported JavaScript types.
- Exported Rust types.
- `String`s.

[You can also pass boxed slices of numbers to JS](boxed-number-slices.html),
except that they're converted to typed arrays (`Uint8Array`, `Int32Array`, etc.)
instead of regular arrays.

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/boxed_js_value_slice.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/boxed_js_value_slice.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/boxed-slices.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/string.md
# `String`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | No | No | Yes | Yes | Yes | JavaScript string value |

Copies the string's contents back and forth between the JavaScript
garbage-collected heap and the Wasm linear memory with `TextDecoder` and
`TextEncoder`

> **Note**: Be sure to check out the [documentation for `str`](str.html) to
> learn about some caveats when working with strings between JS and Rust.

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/string.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/string.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/string.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/boxed-number-slices.md
# Boxed Number Slices: `Box<[u8]>`, `Box<[i8]>`, `Box<[u16]>`, `Box<[i16]>`, `Box<[u32]>`, `Box<[i32]>`, `Box<[u64]>`, `Box<[i64]>`, `Box<[f32]>`, `Box<[f64]>`, `Box<[MaybeUninit<u8>]>`, `Box<[MaybeUninit<i8>]>`, `Box<[MaybeUninit<u16>]>`, `Box<[MaybeUninit<i16>]>`, `Box<[MaybeUninit<u32>]>`, `Box<[MaybeUninit<i32>]>`, `Box<[MaybeUninit<u64>]>`, `Box<[MaybeUninit<i64>]>`, `Box<[MaybeUninit<f32>]>`, and `Box<[MaybeUninit<f64>]>`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | No | No | Yes | Yes | Yes | A JavaScript `TypedArray` of the appropriate type (`Int32Array`, `Uint8Array`, etc...) |

> **Note:** The contents of the slice are copied into a JavaScript [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)
from the Wasm linear memory when returning a boxed slice to JavaScript, and vice
versa when receiving a JavaScript `TypedArray` as a boxed slice in Rust.

> **Note:** Numeric `MaybeUninit<T>` can always be assumed to be initialized
> upon transmission from Rust to JS and vice-versa. However, uninitialized
> values coming from Rust might contain unspecified values.

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/boxed_number_slices.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/boxed_number_slices.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/boxed-number-slices.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/jsvalue.md
# `JsValue`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | Yes | No | Yes | No | No | Any JavaScript value |

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/js_value.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/js_value.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/jsvalue.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/str.md
# `str`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| No | Yes | No | No | No | No | JavaScript string value |

Copies the string's contents back and forth between the JavaScript
garbage-collected heap and the Wasm linear memory with `TextDecoder` and
`TextEncoder`. If you don't want to perform this copy, and would rather work
with handles to JavaScript string values, use the `js_sys::JsString` type.

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/str.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/str.js}}
```

## UTF-16 vs UTF-8

Strings in JavaScript are encoded as UTF-16, but with one major exception: they
can contain unpaired surrogates. For some Unicode characters UTF-16 uses two
16-bit values.  These are called "surrogate pairs" because they always come in
pairs. In JavaScript, it is possible for these surrogate pairs to be missing the
other half, creating an "unpaired surrogate".

When passing a string from JavaScript to Rust, it uses the `TextEncoder` API to
convert from UTF-16 to UTF-8. This is normally perfectly fine... unless there
are unpaired surrogates. In that case it will replace the unpaired surrogates
with U+FFFD (�, the replacement character). That means the string in Rust is
now different from the string in JavaScript!

If you want to guarantee that the Rust string is the same as the JavaScript
string, you should instead use `js_sys::JsString` (which keeps the string in
JavaScript and doesn't copy it into Rust).

If you want to access the raw value of a JS string, you can use `JsString::iter`,
which returns an `Iterator<Item = u16>`. This perfectly preserves everything
(including unpaired surrogates), but it does not do any encoding (so you
have to do that yourself!).

If you simply want to ignore strings which contain unpaired surrogates, you can
use `JsString::is_valid_utf16` to test whether the string contains unpaired
surrogates or not.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/str.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/pointers.md
# `*const T` and `*mut T`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | No | No | Yes | Yes | Yes | A JavaScript number value |

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/pointers.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/pointers.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/pointers.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/imported-js-types.md
# Imported `extern Whatever;` JavaScript Types

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | Yes | No | Yes | Yes | Yes | Instances of the extern `Whatever` JavaScript class / prototype constructor |

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/imported_types.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/imported_types.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/imported-js-types.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/numbers.md
# Numbers: `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`, `u128`, `i128`, `isize`, `usize`, `f32`, and `f64`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | No | No | Yes | Yes | Yes | A JavaScript number or bigint value |

[JavaScript `Number`s](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding) are 64-bit floating point value under the hood and cannot accurately represent all of Rust's numeric types. `wasm-bindgen` will automatically use either [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) or `Number` to accurately represent Rust's numeric types in JavaScript:

- `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `isize`, `usize`, `f32`, and `f64` will be represented as `Number` in JavaScript.
- `u64`, `i64`, `u128`, and `i128` will be represented as `BigInt` in JavaScript.

> **Note**: Wasm is currently a 32-bit architecture, so `isize` and `usize` are 32-bit integers and "fit" into a JavaScript `Number`.

> **Note**: `u128` and `i128` require `wasm-bindgen` version 0.2.96 or later.

## Converting from JavaScript to Rust

`wasm-bindgen` will automatically handle the conversion of JavaScript numbers to Rust numeric types. The conversion rules are as follows:

### `Number` to `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `isize`, and `usize`

If the JavaScript number is `Infinity`, `-Infinity`, or `NaN`, then the Rust value will be 0. Otherwise, the JavaScript number will rounded towards zero (see [`Math.trunc`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc) or [`f64::trunc`](https://doc.rust-lang.org/std/primitive.f64.html#method.trunc)). If the rounded number is too large or too small for the target integer type, it will wrap around.

For example, if the target type is `i8`, Rust will see the following values for the following inputs:

| JS input number | Rust value (`i8`) |
| --------------: | :---------------- |
|              42 | 42                |
|             -42 | -42               |
|           1.999 | 1                 |
|          -1.999 | -1                |
|             127 | 127               |
|             128 | -128              |
|             255 | -1                |
|             256 | 0                 |
|              -0 | 0                 |
|     `±Infinity` | 0                 |
|           `NaN` | 0                 |

This is the same behavior as assigning the JavaScript `Number` to a [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) of the appropriate integer type in JavaScript, i.e. `new Uint8Array([value])[0]`.

Except for the handling of `Infinity` and `-Infinity`, this is the same behavior as [casting](https://doc.rust-lang.org/reference/expressions/operator-expr.html#numeric-cast) `f64` to the appropriate integer type in Rust, i.e. `value_f64 as u32`.

### `BigInt` to `u64`, `i64`, `u128`, and `i128`

If the JavaScript `BigInt` is too large or too small for the target integer type, it will wrap around.

This is the same behavior as assigning the JavaScript `BigInt` to a [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) for 64-bit integer types in JavaScript, i.e. `new Int64Array([value])[0]`.

### `Number` to `f32`

The JavaScript `Number` is converted to a Rust `f32` using the same rules as [casting](https://doc.rust-lang.org/reference/expressions/operator-expr.html#numeric-cast) `f64` to `f32` in Rust, i.e. `value_f64 as f32`.

This is the same behavior as [`Math.fround`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround) or assigning the JavaScript `Number` to a [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) in JavaScript, i.e. `new Float32Array([value])[0]`.

### `Number` to `f64`

Since JavaScript numbers are 64-bit floating point values, converting a JavaScript `Number` to a Rust `f64` is a no-op.

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/numbers.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/numbers.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/numbers.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/bool.md
# `bool`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | No | No | Yes | Yes | Yes | A JavaScript boolean value |

> **Note**: Only [JavaScript `Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) values (`true` or `false`) are supported when calling into Rust. If you want to pass truthy or falsy values to Rust, convert them to a boolean using `Boolean(value)` first.
>
> If you are using TypeScript, you don't have to worry about this, as TypeScript will emit a compiler error if you try to pass a non-`boolean` value.

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/bool.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/bool.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/bool.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/char.md
# `char`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| Yes | No | No | Yes | Yes | Yes | A JavaScript string value |

Since JavaScript doesn't have a character type, `char` is represented as a JavaScript string with one Unicode code point.

> **Note**: [JavaScript strings uses UTF-16 encoding](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters). This means that a single `char` may be represented by a string of length 1 or 2 in JavaScript, depending on the Unicode code point. See [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) for more information.

When passed into Rust, the `char` value of a JavaScript string is determined using [`codePointAt(0)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt). If the JavaScript string is empty or starts with an unpaired surrogate, a runtime error will be thrown.

> **Note**: For more information about unpaired surrogates, see the [documentation for `str`](str.html).

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/char.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/char.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/char.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/number-slices.md
# Number Slices: `[u8]`, `[i8]`, `[u16]`, `[i16]`, `[u32]`, `[i32]`, `[u64]`, `[i64]`, `[f32]`, `[f64]`, `[MaybeUninit<u8>]`, `[MaybeUninit<i8>]`, `[MaybeUninit<u16>]`, `[MaybeUninit<i16>]`, `[MaybeUninit<u32>]`, `[MaybeUninit<i32>]`, `[MaybeUninit<u64>]`, `[MaybeUninit<i64>]`, `[MaybeUninit<f32>]`, and `[MaybeUninit<f64>]`

| `T` parameter | `&T` parameter | `&mut T` parameter | `T` return value | `Option<&T>` parameter | `Option<T>` return value | JavaScript representation |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| No | Yes | Yes | No | No | No | A JavaScript `TypedArray` view of the Wasm memory for the boxed slice of the appropriate type (`Int32Array`, `Uint8Array`, etc) |

> **Note:** Numeric `MaybeUninit<T>` can always be assumed to be initialized
> upon transmission from Rust to JS and vice-versa. However, uninitialized
> values coming from Rust might contain unspecified values.

## Example Rust Usage

```rust
{{#include ../../../../examples/guide-supported-types-examples/src/number_slices.rs}}
```

## Example JavaScript Usage

```js
{{#include ../../../../examples/guide-supported-types-examples/number_slices.js}}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/types/number-slices.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/index.md
# `#[wasm_bindgen]` Attributes

The `#[wasm_bindgen]` macro supports a good amount of configuration for
controlling precisely how exports are exported, how imports are imported, and
what the generated JavaScript glue ends up looking like. This section is an
exhaustive reference of the possibilities!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/getter-and-setter.md
# `getter` and `setter`

The `getter` and `setter` attributes can be used in Rust `impl` blocks to define
properties in JS that act like getters and setters of a field. For example:

```rust
#[wasm_bindgen]
pub struct Baz {
    field: i32,
}

#[wasm_bindgen]
impl Baz {
    #[wasm_bindgen(constructor)]
    pub fn new(field: i32) -> Baz {
        Baz { field }
    }

    #[wasm_bindgen(getter)]
    pub fn field(&self) -> i32 {
        self.field
    }

    #[wasm_bindgen(setter)]
    pub fn set_field(&mut self, field: i32) {
        self.field = field;
    }
}
```

Can be combined in `JavaScript` like in this snippet:

```js
const obj = new Baz(3);
assert.equal(obj.field, 3);
obj.field = 4;
assert.equal(obj.field, 4);
```

You can also configure the name of the property that is exported in JS like so:

```rust
#[wasm_bindgen]
impl Baz {
    #[wasm_bindgen(getter = anotherName)]
    pub fn field(&self) -> i32 {
        self.field
    }

    #[wasm_bindgen(setter = anotherName)]
    pub fn set_field(&mut self, field: i32) {
        self.field = field;
    }
}
```

Getters are expected to take no arguments other than `&self` and return the
field's type. Setters are expected to take one argument other than `&mut self`
(or `&self`) and return no values.

The name for a `getter` is by default inferred from the function name it's
attached to. The default name for a `setter` is the function's name minus the
`set_` prefix, and if `set_` isn't a prefix of the function it's an error to not
provide the name explicitly.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/getter-and-setter.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/getter_with_clone.md
# `getter_with_clone`

By default, Rust exports exposed to JavaScript will generate getters that require fields to implement `Copy`. The `getter_with_clone` attribute can be used to generate getters that require `Clone` instead. This attribute can be applied per struct or per field. For example:

```rust
#[wasm_bindgen]
pub struct Foo {
    #[wasm_bindgen(getter_with_clone)]
    pub bar: String,
}

#[wasm_bindgen(getter_with_clone)]
pub struct Foo {
    pub bar: String,
    pub baz: String,
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/getter_with_clone.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/inspectable.md
# `inspectable`

By default, structs exported from Rust become JavaScript classes with a single `ptr` property. All other properties are implemented as getters, which are not displayed when calling `toJSON`.

The `inspectable` attribute can be used on Rust structs to provide a `toJSON` and `toString` implementation that display all readable fields. For example:

```rust
#[wasm_bindgen(inspectable)]
pub struct Baz {
    pub field: i32,
    private: i32,
}

#[wasm_bindgen]
impl Baz {
    #[wasm_bindgen(constructor)]
    pub fn new(field: i32) -> Baz {
        Baz { field, private: 13 }
    }
}
```

Provides the following behavior as in this JavaScript snippet:

```js
const obj = new Baz(3);
assert.deepStrictEqual(obj.toJSON(), { field: 3 });
obj.field = 4;
assert.strictEqual(obj.toString(), '{"field":4}');
```

One or both of these implementations can be overridden as desired. Note that the generated `toString` calls `toJSON` internally, so overriding `toJSON` will affect its output as a side effect.

```rust
#[wasm_bindgen]
impl Baz {
    #[wasm_bindgen(js_name = toJSON)]
    pub fn to_json(&self) -> i32 {
        self.field
    }

    #[wasm_bindgen(js_name = toString)]
    pub fn to_string(&self) -> String {
        format!("Baz: {}", self.field)
    }
}
```

Note that the output of `console.log` will remain unchanged and display only the `ptr` field in browsers. It is recommended to call `toJSON` or `JSON.stringify` in these situations to aid with logging or debugging. Node.js does not suffer from this limitation, see the section below.

## `inspectable` Classes in Node.js

When the `nodejs` target is used, an additional `[util.inspect.custom]` implementation is provided which calls `toJSON` internally. This method is used for `console.log` and similar functions to display all readable fields of the Rust struct.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/inspectable.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/js_class.md
# `js_class = Blah`

The `js_class` attribute is used to indicate that all the methods inside an
`impl` block should be attached to the specified JS class instead of inferring
it from the self type in the `impl` block. The `js_class` attribute is most
frequently paired with [the `js_name` attribute](js_name.html) on structs:

```rust
#[wasm_bindgen(js_name = Foo)]
pub struct JsFoo { /* ... */ }

#[wasm_bindgen(js_class = Foo)]
impl JsFoo {
    #[wasm_bindgen(constructor)]
    pub fn new() -> JsFoo { /* ... */ }

    pub fn foo(&self) { /* ... */ }
}
```

which is accessed like:

```rust
import { Foo } from './my_module';

const x = new Foo();
x.foo();
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/js_class.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/main.md
# `main`

When attached to the `main` function this attribute will adjust it to properly
throw errors if they can be.

```rust
#[wasm_bindgen(main)]
fn main() -> Result<(), JsValue> {
    Err(JsValue::from("this error message will be thrown"))
}
```

The attribute also allows using `async fn main()` in Cargo binaries.

```rust
#[wasm_bindgen(main)]
async fn main() {
    // ...
    future.await;
}
```

This attribute is only intended to be used on the `main` function of binaries or
examples. Unlike `#[wasm_bindgen(start)]`, it will not cause an arbitrary
function to be executed on start in a library.

The return type support is modeled after [`Termination`]. `()` and `Infallible`
are supported, but [`Termination`] itself is not. In order, wasm-bindgen will
first detect a `Result<(), impl Into<JsValue>>` and will throw proper
`JsValue`s, `Result<(), impl Debug>` will convert an error to a string and throw
that.

[`Termination`]: https://doc.rust-lang.org/std/process/trait.Termination.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/main.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/js_name.md
# `js_name = Blah`

The `js_name` attribute can be used to export a different name in JS than what
something is named in Rust. It can be applied to both exported Rust functions
and types.

For example, this is often used to convert between Rust's snake-cased
identifiers into JavaScript's camel-cased identifiers:

```rust
#[wasm_bindgen(js_name = doTheThing)]
pub fn do_the_thing() -> u32 {
    42
}
```

This can be used in JavaScript as:

```js
import { doTheThing } from './my_module';

const x = doTheThing();
console.log(x);
```

Like imports, `js_name` can also be used to rename types exported to JS:

```rust
#[wasm_bindgen(js_name = Foo)]
pub struct JsFoo {
    // ..
}
```

to be accessed like:

```js
import { Foo } from './my_module';

// ...
```

Note that attaching methods to the JS class `Foo` should be done via the
[`js_class` attribute](js_class.html):

```rust
#[wasm_bindgen(js_name = Foo)]
pub struct JsFoo { /* ... */ }

#[wasm_bindgen(js_class = Foo)]
impl JsFoo {
    // ...
}
```

It can also be used to rename parameters of exported functions and methods:

```rust
#[wasm_bindgen]
pub fn foo(
    #[wasm_bindgen(js_name = "firstArg")]
    arg1: String,
) {
    // function body
}

#[wasm_bindgen]
pub struct Foo {
    // properties
}

#[wasm_bindgen]
impl Foo {
    pub fn foo(
        &self,
        #[wasm_bindgen(js_name = "firstArg")]
        arg1: u32,
    ) {
        // function body
    }
}
```

Which will generate the following JS bindings:

```js
/**
 * @param {string} firstArg
 */
export function foo(firstArg) {
    // ...
}

export class Foo {
    /**
     * @param {number} firstArg
     */
    foo(firstArg) {
        // ...
    }
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/js_name.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/skip_typescript.md
# `skip_typescript`

By default, Rust exports exposed to JavaScript will generate TypeScript definitions (unless `--no-typescript` is used). The `skip_typescript` attribute can be used to disable type generation per function, enum, struct, or field. For example:

```rust
#[wasm_bindgen(skip_typescript)]
pub enum MyHiddenEnum {
    One,
    Two,
    Three
}

#[wasm_bindgen]
pub struct MyPoint {
    pub x: u32,

    #[wasm_bindgen(skip_typescript)]
    pub y: u32,
}

#[wasm_bindgen]
impl MyPoint {

    #[wasm_bindgen(skip_typescript)]
    pub fn stringify(&self) -> String {
        format!("({}, {})", self.x, self.y)
    }
}
```

Will generate the following `.d.ts` file:

```ts
/* tslint:disable */
/* eslint-disable */
export class MyPoint {
  free(): void;
  x: number;
}
```

When combined with [the `typescript_custom_section` attribute](typescript_custom_section.html), this can be used to manually specify more specific function types instead of using the generated definitions.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/skip_typescript.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/readonly.md
# `readonly`

When attached to a `pub` struct field this indicates that it's read-only from
JavaScript, and a setter will not be generated and exported to JavaScript.

```rust
#[wasm_bindgen]
pub fn make_foo() -> Foo {
    Foo {
        first: 10,
        second: 20,
    }
}

#[wasm_bindgen]
pub struct Foo {
    pub first: u32,

    #[wasm_bindgen(readonly)]
    pub second: u32,
}
```

Here the `first` field will be both readable and writable from JS, but the
`second` field will be a `readonly` field in JS where the setter isn't
implemented and attempting to set it will throw an exception.

```js
import { make_foo } from "./my_module";

const foo = make_foo();

// Can both get and set `first`.
foo.first = 99;
console.log(foo.first);

// Can only get `second`.
console.log(foo.second);
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/readonly.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/description.md
# `return_description` and `param_description`

Descriptions to return and parameter documentation can be added with `#[wasm_bindgen(return_description)]` and `#[wasm_bindgen(param_description)]`.

```rust
/// Adds `arg1` and `arg2`.
#[wasm_bindgen(return_description = "the result of the addition of `arg1` and `arg2`")]
pub fn add(
    #[wasm_bindgen(param_description = "the first number")]
    arg1: u32,
    #[wasm_bindgen(param_description = "the second number")]
    arg2: u32,
) -> u32 {
    arg1 + arg2
}

#[wasm_bindgen]
pub struct FooList {
    // properties
}

#[wasm_bindgen]
impl FooList {
    /// Returns the number at the given index.
    #[wasm_bindgen(return_description = "the number at the given index")]
    pub fn number(
        &self,
        #[wasm_bindgen(param_description = "the index of the number to be returned")]
        index: u32,
    ) -> u32 {
        // function body
    }
}
```

Which will generate the following JS bindings:
```js
/**
 * Adds `arg1` and `arg2`.
 *
 * @param {number} arg1 - the first number
 * @param {number} arg2 - the second number
 * @returns {number} the result of the addition of `arg1` and `arg2`
 */
export function add(arg1, arg2) {
    // ...
}

export class FooList {
    /**
     * Returns the number at the given index.
     *
     * @param {number} index - the index of the number to be returned
     * @returns {number} the number at the given index
     */
    number(index) {
        // ...
    }
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/description.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/constructor.md
# `constructor`

When attached to a Rust "constructor" it will make the generated JavaScript
bindings callable as `new Foo()`.

For example, consider this exported Rust type and `constructor` annotation:

```rust
#[wasm_bindgen]
pub struct Foo {
    contents: u32,
}

#[wasm_bindgen]
impl Foo {
    #[wasm_bindgen(constructor)]
    pub fn new() -> Foo {
        Foo { contents: 0 }
    }

    pub fn get_contents(&self) -> u32 {
        self.contents
    }
}
```

This can be used in JavaScript as:

```js
import { Foo } from './my_module';

const f = new Foo();
console.log(f.get_contents());
```

## Caveats

In versions `>=v0.2.48, <0.2.88` of `wasm-bindgen`, there is a bug which breaks inheritance of exported Rust structs from JavaScript side (see [#3213](https://github.com/rustwasm/wasm-bindgen/issues/3213)). If you want to inherit from a Rust struct such as:

```rust
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub struct Parent {
    msg: String,
}

#[wasm_bindgen]
impl Parent {
    #[wasm_bindgen(constructor)]
    fn new() -> Self {
        Parent {
            msg: String::from("Hello from Parent!"),
        }
    }
}
```

You will need to reset the prototype of `this` back to the `Child` class prototype after calling the `Parent`'s constructor via `super`.

```js
import { Parent } from './my_module';

class Child extends Parent {
    constructor() {
        super();
        Object.setPrototypeOf(this, Child.prototype);
    }
}
```

This is no longer required as of v0.2.88.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/constructor.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/skip.md
# `skip`

When attached to a `pub` struct field this indicates that field will not be exposed to JavaScript,
and neither getter nor setter will be generated in ES6 class.

```rust
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub struct Foo {
    pub bar: u32,

    #[wasm_bindgen(skip)]
    pub baz: u32,
}

#[wasm_bindgen]
impl Foo {
    pub fn new() -> Self {
        Foo {
            bar: 1,
            baz: 2
        }
    }
}
```

Here the `bar` field will be both readable and writable from JS, but the
`baz` field will be `undefined` in JS.

```js
import('./pkg/').then(rust => {
    let foo = rust.Foo.new();
    
    // bar is accessible by getter
    console.log(foo.bar);
    // field marked with `skip` is undefined
    console.log(foo.baz);      

    // you can shadow it
    foo.baz = 45;       
    // so accessing by getter will return `45`
    // but it won't affect real value in rust memory
    console.log(foo.baz);
});
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/skip.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/index.md
# `#[wasm_bindgen]` on Rust Exports

This section enumerates the attributes available for customizing bindings for
Rust functions and `struct`s exported to JavaScript.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/typescript_custom_section.md
# `typescript_custom_section`

When added to a `const` `&'static str`, it will append the contents of the
string to the `.d.ts` file exported by `wasm-bindgen-cli` (when the
`--typescript` flag is enabled).

```rust
#[wasm_bindgen(typescript_custom_section)]
const TS_APPEND_CONTENT: &'static str = r#"

export type Coords = { "latitude": number, "longitude": number, }; 

"#;
```

The primary target for this feature is for code generation. For example, you
can author a macro that allows you to export a TypeScript definition alongside
the definition of a struct or Rust type.

```rust
#[derive(MyTypescriptExport)]
struct Coords {
    latitude: u32,
    longitude: u32,
}
```

The proc_derive_macro "MyTypescriptExport" can export its own
`#[wasm_bindgen(typescript_custom_section)]` section, which would then be
picked up by wasm-bindgen-cli. This would be equivalent to the contents of
the TS_APPEND_CONTENT string in the first example.

This feature allows plain data objects to be typechecked in Rust and in
TypeScript by outputting a type definition generated at compile time.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/typescript_custom_section.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/start.md
# `start`

When attached to a function this attribute will configure the `start`
section of the Wasm executable to be emitted, executing the tagged function as
soon as the Wasm module is instantiated.

```rust
#[wasm_bindgen(start)]
fn start() {
    // executed automatically ...
}
```

The `start` section of the Wasm executable will be configured to execute the
`start` function here as soon as it can. Note that due to various practical
limitations today the start section of the executable may not literally point to
`start`, but the `start` function here should be started up automatically when the
wasm module is loaded.

There's a few caveats to be aware of when using the `start` attribute:

* The `start` function must take no arguments and must either return `()` or
  `Result<(), JsValue>`
* Only one `start` function can be placed into a module, including its
  dependencies. If more than one is specified then `wasm-bindgen` will fail when
  the CLI is run. It's recommended that only applications use this attribute.
* The `start` function will not be executed when testing.
* Note that the `start` function is relatively new, so if you find any bugs with
  it, please feel free to report an issue!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/start.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/skip_jsdoc.md
# `skip_jsdoc`

When attached to a function or a method, prevents `wasm-bindgen` from auto-generating JSDoc-style doc comments.
By default, `wasm-bindgen` adds `@param` and `@returns` annotations to doc comments in the generated
JS files. A `skip_jsdoc` annotation prevents this, allowing you to supply your own doc comments.

The following rust uses `skip_jsdoc` to omit one of the auto-generated doc comments.

```rust
use wasm_bindgen::prelude::*;

/// Autogenerated docs.
#[wasm_bindgen]
pub fn foo(arg: u32) -> u32 { arg + 1 }

/// Manually written docs.
///
/// @param {number} arg - A descriptive description.
/// @returns {number} Something a bit bigger.
#[wasm_bindgen(skip_jsdoc)]
pub fn bar(arg: u32) -> u32 { arg + 2 }
```

The `wasm-bindgen`-generated JS interface of the above code will look something like this:

```js
/**
* Autogenerated docs.
*
* @param {number} arg
* @returns {number}
*/
export function foo(arg) { /* ... */ }

/**
* Manually written docs.
*
* @param {number} arg - A descriptive description.
* @returns {number} Something a bit bigger.
*/
export function bar(arg) { /* ... */ }
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/skip_jsdoc.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/unchecked_type.md
# `unchecked_return_type` and `unchecked_param_type`

Return and parameter types of exported functions and methods can be overwritten with `#[wasm_bindgen(unchecked_return_type)]` and `#[wasm_bindgen(unchecked_param_type)]`.

> **Note**: Types that are provided using `#[wasm_bindgen(unchecked_return_type)]` and `#[wasm_bindgen(unchecked_param_type)]` aren't checked for their contents. They will end up in a function signature and JSDoc exactly as they have been specified. E.g. `#[wasm_bindgen(unchecked_return_type = "number")]` on a function returning `String` will return a `string`, not a `number`, even if the TS signature and JSDoc will say otherwise.

```rust
#[wasm_bindgen(unchecked_return_type = "Foo")]
pub fn foo(
    #[wasm_bindgen(unchecked_param_type = "Bar")]
    arg1: JsValue,
) -> JsValue {
    // function body
}

#[wasm_bindgen]
pub struct Foo {
    // properties
}

#[wasm_bindgen]
impl Foo {
    #[wasm_bindgen(unchecked_return_type = "Baz")]
    pub fn foo(
        &self,
        #[wasm_bindgen(unchecked_param_type = "Bar")]
        arg1: JsValue,
    ) -> JsValue {
        // function body
    }
}
```

Which will generate the following JS bindings:
```js
/**
 * @param {Bar} arg1
 * @returns {Foo}
 */
export function foo(arg1) {
    // ...
}

export class Foo {
    /**
     * @param {Bar} arg1
     * @returns {Baz}
     */
    foo(arg1) {
        // ...
    }
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-rust-exports/unchecked_type.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/getter-and-setter.md
# `getter` and `setter`

These two attributes can be combined with `method` to indicate that this is a
getter or setter method. A `getter`-tagged function by default accesses the
JavaScript property with the same name as the getter function. A `setter`'s
function name is currently required to start with `set_` and the property it
accesses is the suffix after `set\_`.

Consider the following JavaScript class that has a getter and setter for the
`white_russians` property:

```js
class TheDude {
  get white_russians() {
    ...
  }
  set white_russians(val) {
    ...
  }
}
```

We would import this with the following `#[wasm_bindgen]` attributes:

```rust
#[wasm_bindgen]
extern "C" {
    type TheDude;

    #[wasm_bindgen(method, getter)]
    fn white_russians(this: &TheDude) -> u32;

    #[wasm_bindgen(method, setter)]
    fn set_white_russians(this: &TheDude, val: u32);
}
```

Here we're importing the `TheDude` type and defining the ability to access each
object's `white_russians` property. The first function here is a getter and will
be available in Rust as `the_dude.white_russians()`, and the latter is the
setter which is accessible as `the_dude.set_white_russians(2)`. Note that both
functions have a `this` argument as they're tagged with `method`.

Finally, you can also pass an argument to the `getter` and `setter`
properties to configure what property is accessed. When the property is
explicitly specified then there is no restriction on the method name. For
example the below is equivalent to the above:

```rust
#[wasm_bindgen]
extern "C" {
    type TheDude;

    #[wasm_bindgen(method, getter = white_russians)]
    fn my_custom_getter_name(this: &TheDude) -> u32;

    #[wasm_bindgen(method, setter = white_russians)]
    fn my_custom_setter_name(this: &TheDude, val: u32);
}
```

Heads up! `getter` and `setter` functions are found on the constructor's
prototype chain once at load time, cached, and then the cached accessor is
invoked on each access. If you need to dynamically walk the prototype chain on
every access, add the `structural` attribute!

```js
// This is the default function Rust will invoke on `the_dude.white_russians()`:
const white_russians = Object.getOwnPropertyDescriptor(
  TheDude.prototype,
  "white_russians"
).get;

// This is what you get by adding `structural`:
const white_russians = function(the_dude) {
  return the_dude.white_russians;
};
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/getter-and-setter.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/method.md
# `method`

The `method` attribute allows you to describe methods of imported JavaScript
objects. It is applied on a function that has `this` as its first parameter,
which is a shared reference to an imported JavaScript type.

```rust
#[wasm_bindgen]
extern "C" {
    type Set;

    #[wasm_bindgen(method)]
    fn has(this: &Set, element: &JsValue) -> bool;
}
```

This generates a `has` method on `Set` in Rust, which invokes the
`Set.prototype.has` method in JavaScript.

```rust
let set: Set = ...;
let elem: JsValue = ...;
if set.has(&elem) {
    ...
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/method.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/static_method_of.md
# `static_method_of = Blah`

The `static_method_of` attribute allows one to specify that an imported function
is a static method of the given imported JavaScript class. For example, to bind
to JavaScript's `Date.now()` static method, one would use this attribute:

```rust
#[wasm_bindgen]
extern "C" {
    type Date;

    #[wasm_bindgen(static_method_of = Date)]
    pub fn now() -> f64;
}
```

The `now` function becomes a static method of the imported type in the Rust
bindings as well:

```rust
let instant = Date::now();
```

This is similar to the `js_namespace` attribute, but the usage from within Rust
is different since the method also becomes a static method of the imported type.
Additionally this attribute also specifies that the `this` parameter when
invoking the method is expected to be the JS class, e.g. always invoked as
`Date.now()` instead of `const x = Date.now; x()`.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/static_method_of.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/js_namespace.md
# `js_namespace = blah`

This attribute indicates that the JavaScript type is accessed through the given
namespace. For example, the `WebAssembly.Module` APIs are all accessed through
the `WebAssembly` namespace. `js_namespace` can be applied to any import
(function or type) and whenever the generated JavaScript attempts to reference a
name (like a class or function name) it'll be accessed through this namespace.

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(js_namespace = console)]
    fn log(s: &str);
    
    type Foo;
    #[wasm_bindgen(constructor, js_namespace = Bar)]
    fn new() -> Foo;
}

log("hello, console!");
Foo::new();
```

This is an example of how to bind namespaced items in Rust. The `log` and `Foo::new` functions will
be available in the Rust module and will be invoked as `console.log` and `new Bar.Foo` in
JavaScript.

It is also possible to access the JavaScript object under the nested namespace.
`js_namespace` also accepts the array of the string to specify the namespace.

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(js_namespace = ["window", "document"])]
    fn write(s: &str);
}

write("hello, document!");
```

This example shows how to bind `window.document.write` in Rust.

If all items in the `extern "C" { … }` block have the same `js_namespace = …`:

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(js_namespace = Math)]
    fn random() -> f64;
    #[wasm_bindgen(js_namespace = Math)]
    fn log(a: f64) -> f64;
    // ...
}
```

Then that macro argument can also be moved to the outer block:

```rust
#[wasm_bindgen(js_namespace = Math)]
extern "C" {
    #[wasm_bindgen]
    fn random() -> f64;
    #[wasm_bindgen]
    fn log(a: f64) -> f64;
    // ...
}
```

`js_namespace = …` on an individual item takes precedence over the outer block's `js_namespace = …`.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/js_namespace.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/catch.md
# `catch`

The `catch` attribute allows catching a JavaScript exception. This can be
attached to any imported function or method, and the function must return a
`Result` where the `Err` payload is a `JsValue`:

```rust
#[wasm_bindgen]
extern "C" {
    // `catch` on a standalone function.
    #[wasm_bindgen(catch)]
    fn foo() -> Result<(), JsValue>;

    // `catch` on a method.
    type Zoidberg;
    #[wasm_bindgen(catch, method)]
    fn woop_woop_woop(this: &Zoidberg) -> Result<u32, JsValue>;
}
```

If calling the imported function throws an exception, then `Err` will be
returned with the exception that was raised. Otherwise, `Ok` is returned with
the result of the function.

> By default `wasm-bindgen` will take no action when Wasm calls a JS function
> which ends up throwing an exception. The Wasm spec right now doesn't support
> stack unwinding and as a result Rust code **will not execute destructors**.
> This can unfortunately cause memory leaks in Rust right now, but as soon as
> Wasm implements catching exceptions we'll be sure to add support as well!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/catch.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/typescript_type.md
# typescript_type

The `typescript_type` allows us to use typescript declarations in `typescript_custom_section` as arguments for rust functions! For example:

```rust
#[wasm_bindgen(typescript_custom_section)]
const ITEXT_STYLE: &'static str = r#"
interface ITextStyle {
    bold: boolean;
    italic: boolean;
    size: number;
}
"#;

#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(typescript_type = "ITextStyle")]
    pub type ITextStyle;
}

#[wasm_bindgen]
#[derive(Default)]
pub struct TextStyle {
    pub bold: bool,
    pub italic: bool,
    pub size: i32,
}

#[wasm_bindgen]
impl TextStyle {
    #[wasm_bindgen(constructor)]
    pub fn new(i: ITextStyle) -> TextStyle {
        let _js_value: JsValue = i.into();
        // parse JsValue
        TextStyle::default()
    }

    pub fn optional_new(_i: Option<ITextStyle>) -> TextStyle {
        // parse JsValue
        TextStyle::default()
    }
}
```

We can write our `typescript` code like:

```ts
import { ITextStyle, TextStyle } from "./my_awesome_module";

const style: TextStyle = new TextStyle({
  bold: true,
  italic: true,
  size: 42,
});

const optional_style: TextStyle = TextStyle.optional_new();
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/typescript_type.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/js_class.md
# `js_class = "Blah"`

The `js_class` attribute can be used in conjunction with the `method` attribute
to bind methods of imported JavaScript classes that have been renamed on the
Rust side.

```rust
#[wasm_bindgen]
extern "C" {
    // We don't want to import JS strings as `String`, since Rust already has a
    // `String` type in its prelude, so rename it as `JsString`.
    #[wasm_bindgen(js_name = String)]
    type JsString;

    // This is a method on the JavaScript "String" class, so specify that with
    // the `js_class` attribute.
    #[wasm_bindgen(method, js_class = "String", js_name = charAt)]
    fn char_at(this: &JsString, index: u32) -> JsString;
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/js_class.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/module.md
# `module = "blah"`

The `module` attributes configures the module from which items are imported. For
example,

```rust
#[wasm_bindgen(module = "wu/tang/clan")]
extern "C" {
    type ThirtySixChambers;
}
```

generates JavaScript import glue like:

```js
import { ThirtySixChambers } from "wu/tang/clan";
```

If a `module` attribute is not present, then the global scope is used
instead. For example,

```rust
#[wasm_bindgen]
extern "C" {
    fn illmatic() -> u32;
}
```

generates JavaScript import glue like:

```js
let illmatic = this.illmatic;
```

Note that if the string specified with `module` starts with `./`, `../`, or `/`
then it's interpreted as a path to a [local JS snippet](../../js-snippets.html).
If this doesn't work for your use case you might be interested in the
[`raw_module` attribute](raw_module.html)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/module.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/js_name.md
# `js_name = blah`

The `js_name` attribute can be used to bind to a different function in
JavaScript than the identifier that's defined in Rust.

Most often, this is used to convert a camel-cased JavaScript identifier into a
snake-cased Rust identifier:

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(js_name = jsOftenUsesCamelCase)]
    fn js_often_uses_camel_case() -> u32;
}
```

Sometimes, it is used to bind to JavaScript identifiers that are not valid Rust
identifiers, in which case `js_name = "some string"` is used instead of `js_name
= ident`:

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(js_name = "$$$")]
    fn cash_money() -> u32;
}
```
However, you can also use `js_name` to define multiple signatures for
polymorphic JavaScript functions:

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(js_namespace = console, js_name = log)]
    fn console_log_str(s: &str);

    #[wasm_bindgen(js_namespace = console, js_name = log)]
    fn console_log_u32(n: u32);

    #[wasm_bindgen(js_namespace = console, js_name = log)]
    fn console_log_many(a: u32, b: &JsValue);
}
```

All of these functions will call `console.log` in JavaScript, but each
identifier will have only one signature in Rust.

Note that if you use `js_name` when importing a type you'll also need to use the
[`js_class` attribute][jsclass] when defining methods on the type:

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(js_name = String)]
    type JsString;
    #[wasm_bindgen(method, getter, js_class = "String")]
    pub fn length(this: &JsString) -> u32;
}
```

The `js_name` attribute can also be used in situations where a JavaScript module uses 
`export default`. In this case, setting the `js_name` attribute to "default" on the 
`type` declaration, and the [`js_class` attribute][jsclass] to "default" on any methods 
on the exported object will generate the correct imports.


For example, a module that would be imported directly in JavaScript:

```javascript
import Foo from "bar";

let f = new Foo();
```

Could be accessed using this definition in Rust:

```rust
#[wasm_bindgen(module = "bar")]
extern "C" {
    #[wasm_bindgen(js_name = default)]
    type Foo;
    #[wasm_bindgen(constructor, js_class = default)]
    pub fn new() -> Foo;
}
```

[jsclass]: js_class.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/js_name.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/extends.md
# `extends = Class`

The `extends` attribute can be used to say that an imported type extends (in the
JS class hierarchy sense) another type. This will generate `AsRef`, `AsMut`, and
`From` impls for converting a type into another given that we statically know
the inheritance hierarchy:

```rust
#[wasm_bindgen]
extern "C" {
    type Foo;

    #[wasm_bindgen(extends = Foo)]
    type Bar;
}

let x: &Bar = ...;
let y: &Foo = x.as_ref(); // zero cost cast
```

The trait implementations generated for the above block are:

```rust
impl From<Bar> for Foo { ... }
impl AsRef<Foo> for Bar { ... }
impl AsMut<Foo> for Bar { ... }
```


The `extends = ...` attribute can be specified multiple times for longer
inheritance chains, and `AsRef` and such impls will be generated for each of
the types.

```rust
#[wasm_bindgen]
extern "C" {
    type Foo;

    #[wasm_bindgen(extends = Foo)]
    type Bar;

    #[wasm_bindgen(extends = Foo, extends = Bar)]
    type Baz;
}

let x: &Baz = ...;
let y1: &Bar = x.as_ref();
let y2: &Foo = y1.as_ref();
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/extends.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/variadic.md
# Variadic Parameters

In javascript, both the types of function arguments, and the number of function arguments are
dynamic. For example

```js
function sum(...rest) {
    let i;
    // the old way
    let old_way = 0;
    for (i=0; i<arguments.length; i++) {
        old_way += arguments[i];
    }
    // the new way
    let new_way = 0;
    for (i=0; i<rest.length; i++) {
        new_way += rest[i];
    }
    // both give the same answer
    assert(old_way === new_way);
    return new_way;
}
```

This function doesn't translate directly into rust, since we don't currently support variadic
arguments on the Wasm target. To bind to it, we use a slice as the last argument, and annotate the
function as variadic:

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(variadic)]
    fn sum(args: &[i32]) -> i32;
}
```

when we call this function, the last argument will be expanded as the javascript expects.


To export a rust function to javascript with a variadic argument, we will use the same bindgen variadic attribute and assume that the last argument will be the variadic array. For example the following rust function:

```rust
#[wasm_bindgen(variadic)]
pub  fn  variadic_function(arr: &JsValue) -> JsValue {
	arr.into()
}
```

will generate the following TS interface

```ts
export  function  variadic_function(...arr:  any):  any;
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/variadic.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/constructor.md
# `constructor`

The `constructor` attribute is used to indicate that the function being bound
should actually translate to calling the `new` operator in JavaScript. The final
argument must be a type that's imported from JavaScript, and it's what will get
used in the generated glue:

```rust
#[wasm_bindgen]
extern "C" {
    type Shoes;

    #[wasm_bindgen(constructor)]
    fn new() -> Shoes;
}
```

This will attach a `new` static method to the `Shoes` type, and in JavaScript
when this method is called, it will be equivalent to `new Shoes()`.

```rust
// Become a cobbler; construct `new Shoes()`
let shoes = Shoes::new();
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/constructor.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/index.md
# `#[wasm_bindgen]` on JavaScript Imports

This section enumerates the attributes available for customizing bindings for
JavaScript functions and classes imported into Rust within an `extern "C" { ... }`
block.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/index.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/indexing-getter-setter-deleter.md
# `indexing_getter`, `indexing_setter`, and `indexing_deleter`

These three attributes indicate that a method is an dynamically intercepted
getter, setter, or deleter on the receiver object itself, rather than a direct
access of the receiver's properties. It is equivalent calling the Proxy handler
for the `obj[prop]` operation with some dynamic `prop` variable in JavaScript,
rather than a normal static property access like `obj.prop` on a normal
JavaScript `Object`.

This is useful for binding to `Proxy`s and some builtin DOM types that
dynamically intercept property accesses.

* `indexing_getter` corresponds to `obj[prop]` operation in JavaScript. The
  function annotated must have a `this` receiver parameter, a single parameter
  that is used for indexing into the receiver (`prop`), and a return type.

* `indexing_setter` corresponds to the `obj[prop] = val` operation in
  JavaScript. The function annotated must have a `this` receiver parameter, a
  parameter for indexing into the receiver (`prop`), and a value parameter
  (`val`).

* `indexing_deleter` corresponds to `delete obj[prop]` operation in
  JavaScript. The function annotated must have a `this` receiver and a single
  parameter for indexing into the receiver (`prop`).

These must always be used in conjunction with the `structural` and `method`
flags.

For example, consider this JavaScript snippet that uses `Proxy`:

```js
const foo = new Proxy({}, {
    get(obj, prop) {
        return prop in obj ? obj[prop] : prop.length;
    },
    set(obj, prop, value) {
        obj[prop] = value;
    },
    deleteProperty(obj, prop) {
        delete obj[prop];
    },
});

foo.ten;
// 3

foo.ten = 10;
foo.ten;
// 10

delete foo.ten;
foo.ten;
// 3
```

To bind that in `wasm-bindgen` in Rust, we would use the `indexing_*` attributes
on methods:

```rust
#[wasm_bindgen]
extern "C" {
    type Foo;
    #[wasm_bindgen(thread_local_v2)]
    static FOO: Foo;

    #[wasm_bindgen(method, structural, indexing_getter)]
    fn get(this: &Foo, prop: &str) -> u32;

    #[wasm_bindgen(method, structural, indexing_setter)]
    fn set(this: &Foo, prop: &str, val: u32);

    #[wasm_bindgen(method, structural, indexing_deleter)]
    fn delete(this: &Foo, prop: &str);
}

FOO.with(|foo| {
    assert_eq!(foo.get("ten"), 3);

    foo.set("ten", 10);
    assert_eq!(foo.get("ten"), 10);

    foo.delete("ten");
    assert_eq!(foo.get("ten"), 3);
});
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/indexing-getter-setter-deleter.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/structural.md
# `structural`

> **Note**: As of [RFC 5] this attribute is the default for all imported
> functions. This attribute is largely ignored today and is only retained for
> backwards compatibility and learning purposes.
>
> The inverse of this attribute, [the `final`
> attribute](final.html) is more functionally interesting than
> `structural` (as `structural` is simply the default)

[RFC 5]: https://rustwasm.github.io/rfcs/005-structural-and-deref.html

The `structural` flag can be added to `method` annotations, indicating that the
method being accessed (or property with getters/setters) should be accessed in a
structural, duck-type-y fashion. Rather than walking the constructor's prototype
chain once at load time and caching the property result, the prototype chain is
dynamically walked on every access.

```rust
#[wasm_bindgen]
extern "C" {
    type Duck;

    #[wasm_bindgen(method, structural)]
    fn quack(this: &Duck);

    #[wasm_bindgen(method, getter, structural)]
    fn is_swimming(this: &Duck) -> bool;
}
```

The constructor for the type here, `Duck`, is not required to exist in
JavaScript (it's not referenced).  Instead `wasm-bindgen` will generate shims
that will access the passed in JavaScript value's `quack` method or its
`is_swimming` property.

```js
// Without `structural`, get the method directly off the prototype at load time:
const Duck_prototype_quack = Duck.prototype.quack;
function quack(duck) {
  Duck_prototype_quack.call(duck);
}

// With `structural`, walk the prototype chain on every access:
function quack(duck) {
  duck.quack();
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/structural.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/raw_module.md
# `raw_module = "blah"`

This attribute performs exactly the same purpose as the [`module`
attribute](module.html) on JS imports, but it does not attempt to interpret
paths starting with `./`, `../`, or `/` as JS snippets. For example:

```rust
#[wasm_bindgen(raw_module = "./some/js/file.js")]
extern "C" {
    fn the_function();
}
```

Note that if you use this attribute with a relative or absolute path, it's
likely up to the final bundler or project to assign meaning to that path. This
typically means that the JS file or module will be resolved relative to the
final location of the Wasm file itself. That means that `raw_module` is likely
unsuitable for libraries on crates.io, but may be usable within end-user
applications.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/raw_module.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/final.md
# `final`

The `final` attribute is the converse of the [`structural`
attribute](structural.html). It configures how `wasm-bindgen` will generate JS
imports to call the imported function. Notably a function imported by `final`
never changes after it was imported, whereas a function imported by default (or
with `structural`) is subject to runtime lookup rules such as walking the
prototype chain of an object. Note that `final` is not suitable for accessing
data descriptor properties of JS objects; to accomplish this, use the `structural`
attribute.

[component-model]: https://github.com/WebAssembly/component-model
[reference-types]: https://github.com/WebAssembly/reference-types

The `final` attribute is intended to be purely related to performance. It
ideally has no user-visible effect, and `structural` imports (the default)
should be able to transparently switch to `final` eventually.

The eventual performance aspect is that with the [component model
proposal][component-model] then `wasm-bindgen` will need to generate far fewer JS
function shims to import than it does today. For example, consider this import
today:

```rust
#[wasm_bindgen]
extern "C" {
    type Foo;
    #[wasm_bindgen(method)]
    fn bar(this: &Foo, argument: &str) -> JsValue;
}
```

**Without the `final` attribute** the generated JS looks like this:

```js
// without `final`
export function __wbg_bar_a81456386e6b526f(arg0, arg1, arg2) {
    let varg1 = getStringFromWasm(arg1, arg2);
    return addHeapObject(getObject(arg0).bar(varg1));
}
```

We can see here that this JS function shim is required, but it's all relatively
self-contained. It does, however, execute the `bar` method in a duck-type-y
fashion in the sense that it never validates `getObject(arg0)` is of type `Foo`
to actually call the `Foo.prototype.bar` method.

If we instead, however, write this:

```rust
#[wasm_bindgen]
extern "C" {
    type Foo;
    #[wasm_bindgen(method, final)] // note the change here
    fn bar(this: &Foo, argument: &str) -> JsValue;
}
```

it generates this JS glue (roughly):

```js
const __wbg_bar_target = Foo.prototype.bar;

export function __wbg_bar_a81456386e6b526f(arg0, arg1, arg2) {
    let varg1 = getStringFromWasm(arg1, arg2);
    return addHeapObject(__wbg_bar_target.call(getObject(arg0), varg1));
}
```

The difference here is pretty subtle, but we can see how the function being
called is hoisted out of the generated shim and is bound to always be
`Foo.prototype.bar`. This then uses the `Function.call` method to invoke that
function with `getObject(arg0)` as the receiver.

But wait, there's still a JS function shim here even with `final`! That's true,
and this is simply a fact of future WebAssembly proposals not being implemented
yet. The semantics, though, match the future [component model
proposal][component-model] because the method being called is determined exactly
once, and it's located on the prototype chain rather than being resolved at
runtime when the function is called.

## Interaction with future proposals

If you're curious to see how our JS function shim will be eliminated entirely,
let's take a look at the generated bindings. We're starting off with this:

```js
const __wbg_bar_target = Foo.prototype.bar;

export function __wbg_bar_a81456386e6b526f(arg0, arg1, arg2) {
    let varg1 = getStringFromWasm(arg1, arg2);
    return addHeapObject(__wbg_bar_target.call(getObject(arg0), varg1));
}
```

... and once the [reference types proposal][reference-types] is implemented then
we won't need some of these pesky functions. That'll transform our generated JS
shim to look like:

```js
const __wbg_bar_target = Foo.prototype.bar;

export function __wbg_bar_a81456386e6b526f(arg0, arg1, arg2) {
    let varg1 = getStringFromWasm(arg1, arg2);
    return __wbg_bar_target.call(arg0, varg1);
}
```

Getting better! Next up we need the component model proposal. Note that the
proposal is undergoing some changes right now so it's tough to link to reference
documentation, but it suffices to say that it'll empower us with at least two
different features.

First, component model promises to provide the concept of "argument conversions".
The `arg1` and `arg2` values here are actually a pointer and a length to a utf-8
encoded string, and with component model we'll be able to annotate that this
import should take those two arguments and convert them to a JS string (that is,
the *host* should do this, the WebAssembly engine). Using that feature we can
further trim this down to:

```js
const __wbg_bar_target = Foo.prototype.bar;

export function __wbg_bar_a81456386e6b526f(arg0, varg1) {
    return __wbg_bar_target.call(arg0, varg1);
}
```

And finally, the second promise of the component model proposal is that we can
flag a function call to indicate the first argument is the `this` binding of the
function call. Today the `this` value of all called imported functions is
`undefined`, and this flag (configured with component model) will indicate the
first argument here is actually the `this`.

With that in mind we can further transform this to:

```js
export const __wbg_bar_a81456386e6b526f = Foo.prototype.bar;
```

and voila! We, with [reference types][reference-types] and [component
model][component-model], now have no JS function shim at all necessary to call
the imported function. Additionally future Wasm proposals to the ES module
system may also mean that don't even need the `export const ...` here too.

It's also worth pointing out that with all these Wasm proposals implemented the
default way to import the `bar` function (aka `structural`) would generate a JS
function shim that looks like:

```js
export function __wbg_bar_a81456386e6b526f(varg1) {
    return this.bar(varg1);
}
```

where this import is still subject to runtime prototype chain lookups and such.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/final.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/vendor_prefix.md
# Vendor-prefixed APIs

On the web new APIs often have vendor prefixes while they're in an experimental
state. For example the `AudioContext` API is known as `webkitAudioContext` in
Safari at the time of this writing. The `vendor_prefix` attribute indicates
these alternative names, which are used if the normal name isn't defined.

For example to use `AudioContext` you might do:

```rust
#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(vendor_prefix = webkit)]
    type AudioContext;

    // methods on `AudioContext` ...
}
```

Whenever `AudioContext` is used it'll use `AudioContext` if the global namespace
defines it or alternatively it'll fall back to `webkitAudioContext`.

Note that `vendor_prefix` cannot be used with `module = "..."` or
`js_namespace = ...`, so it's basically limited to web-platform APIs today.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/vendor_prefix.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/no_deref.md
# `no_deref`

The `no_deref` attribute can be used to say that no `Deref` impl should be
generated for an imported type. If this attribute is not present, a `Deref` impl
will be generated with a `Target` of the type's first `extends` attribute, or
`Target = JsValue` if there are no `extends` attributes.

```rust
#[wasm_bindgen]
extern "C" {
    type Foo;

    #[wasm_bindgen(method)]
    fn baz(this: &Foo)

    #[wasm_bindgen(extends = Foo, no_deref)]
    type Bar;
}

fn do_stuff(bar: &Bar) {
    bar.baz() // Does not compile
}

```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/guide/src/reference/attributes/on-js-imports/no_deref.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/releases/release-announcement-template.md
# Announcing `wasm-bindgen` $TODO_VERSION

`wasm-bindgen` facilitates high-level interactions between Wasm modules and
JavaScript.

* [GitHub][]
* [crates.io][]
* [The `wasm-bindgen` Guide][guide]

Upgrade to this release by updating your `Cargo.toml`:

```toml
wasm-bindgen = "$TODO_VERSION"
```

## Changelog

<insert relevant section of CHANGELOG.md here>

## Friends

Thanks to everyone who contributed to this release!

<insert the output of friends.sh here>

## Contributing

Want to join us? Check out our [The "Contributing" section of the
guide][contributing] and take a look at some of these issues:

* [Issues labeled "good first issue"][good-first-issue]
* [Issues labeled "help wanted"][help-wanted]

[GitHub]: https://github.com/rustwasm/wasm-bindgen
[crates.io]: https://crates.io/crates/wasm-bindgen
[guide]: https://rustwasm.github.io/wasm-bindgen
[contributing]: https://rustwasm.github.io/wasm-bindgen/contributing.md
[good-first-issue]: https://github.com/rustwasm/wasm-bindgen/labels/good%20first%20issue
[help-wanted]: https://github.com/rustwasm/wasm-bindgen/labels/help%20wanted

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/releases/release-announcement-template.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/futures/README.md
# `wasm-bindgen-futures`

[API Documentation][docs]

This crate bridges the gap between a Rust `Future` and a JavaScript
`Promise`. It provides two conversions:

1. From a JavaScript `Promise` into a Rust `Future`.
2. From a Rust `Future` into a JavaScript `Promise`.

Additionally under the feature flag `futures-core-03-stream` there is experimental 
support for `AsyncIterator` to `Stream` conversion.

See the [API documentation][docs] for more info.

[docs]: https://rustwasm.github.io/wasm-bindgen/api/wasm_bindgen_futures/

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/futures/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/test/README.md
# `wasm-bindgen-test`

[**Read the "Testing with `wasm-bindgen-test`" section of the
guide!**](https://rustwasm.github.io/wasm-bindgen/wasm-bindgen-test/index.html)

## Components

The test harness is made of three separate components, but you typically don't
have to worry about most of them. They're documented here for documentation
purposes!

### `wasm-bindgen-test-macro`

This crate, living at `crates/test-macro`, is a procedural macro that defines
the `#[wasm_bindgen_test]` macro. **The normal `#[test]` cannot be used and will
not work.** Eventually it's intended that the `#[wasm_bindgen_test]` attribute
could gain arguments like "run in a browser" or something like a minimum Node
version.

For now though the macro is pretty simple and reexported from the next crate,
`wasm-bindgen-test`.

### `wasm-bindgen-test`

This is the runtime support needed to execute tests. This is basically the same
thing as the `test` crate in the Rust repository, and one day it will likely use
the `test` crate itself! For now though it's a minimal reimplementation that
provides the support for:

* Printing what test cases are running
* Collecting `console.log` and `console.error` output of each test case for
  printing later
* Rendering the failure output of each test case
* Catching JS exceptions so tests can continue to run after a test fails
* Driving execution of all tests

This is the crate which you actually link to in your Wasm test and through which
you import the `#[wasm_bindgen_test]` macro. Otherwise this crate provides a
`console_log!` macro that's a utility like `println!` only using `console.log`.

This crate may grow more functionality in the future, but for now it's somewhat
bare bones!

### `wasm-bindgen-test-runner`

This is where the secret sauce comes into play. We configured Cargo to execute
this binary *instead* of directly executing the `*.wasm` file (which Cargo would
otherwise try to do). This means that whenever a test is executed it executes
this binary with the Wasm file as an argument, allowing it to take full control
over the test process!

The test runner is currently pretty simple, executing a few steps:

* First, it runs the equivalent of `wasm-bindgen`. This'll generate wasm-bindgen
  output in a temporary directory.
* Next, it generates a small shim JS file which imports these
  wasm-bindgen-generated files and executes the test harness.
* Finally, it executes `node` over the generated JS file, executing all of your
  tests.

In essence what happens is that this test runner automatically executes
`wasm-bindgen` and then uses Node to actually execute the Wasm file, meaning
that your Wasm code currently runs in a Node environment.

## Future Work

Things that'd be awesome to support in the future:

* Arguments to `wasm-bindgen-test-runner` which are the same as `wasm-bindgen`,
  for example `--debug` to affect the generated output.
* Running each test in its own Wasm instance to avoid poisoning the environment
  on panic

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/test/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/test/sample/README.md
# Sample test crate

This is a dummy crate used to test changes to the `wasm-bindgen-test` crate,
this'll never be published nor tested on CI, it's intended for human inspection.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/test/sample/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/example-tests/README.md
# example-tests

Tests that none of our examples are broken, by opening them in a browser
and checking that no errors get logged to the console.

This currently only supports Firefox.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/example-tests/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/js-sys/CHANGELOG.md
# `js-sys` Change Log

--------------------------------------------------------------------------------

## 0.2.1

Released 2018-08-13.

### Added

* Added bindings to `Array.prototype.splice`.
* Added bindings to `RegExp`.
* Added bindings to `ArrayBuffer.prototype.byteLength`.
* Started adding the `#[wasm_bindgen(extends = ...)]` attribute to various JS
  types.
* Added bindings to `EvalError`.
* Added bindings to `Promise`. See the new `wasm-bindgen-futures` crate for
  integrating JS `Promise`s into Rust `Future`s.
* Added bindings to `JSON.{parse,stringify}`.
* Added bindings to `Array.of`.
* Added bindings to `Intl.Collator`.
* Added bindings to `Object.assign`.
* Added bindings to `Object.create`.
* Added bindings to `RangeError`.
* Added bindings to `ReferenceError`.
* Added bindings to `Symbol.unscopables`.
* Added bindings to `URIError`.
* Added bindings to `SyntaxError`.
* Added bindings to `TypeError`.

### Changed

* The `Intl` namespace was previously a bound object with static methods hanging
  off of it. It is now a module with free functions, and nested types.

--------------------------------------------------------------------------------

## 0.2.0

Released 2018-07-26.

Initial release!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/js-sys/CHANGELOG.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/js-sys/README.md
# `js-sys`

[API documentation](https://rustwasm.github.io/wasm-bindgen/api/js_sys/)

Raw bindings to JS global APIs for projects using `wasm-bindgen`. This crate is
handwritten and intended to work in *all* JS environments like browsers and
Node.js.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/js-sys/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/macro/README.md
# `wasm-bindgen-macro`

Implementation of the `#[wasm_bindgen]` attribute. See the `wasm-bindgen`
documentation for more information about what this macro does.

## Testing

Testing of this macro is done through "ui tests" in the `ui-tests` subdirectory
of this crate. Each Rust file in this folder is compiled with the `wasm_bindgen`
crate, and the `*.stderr` file sitting next to it is the asserted output of the
compiler. If the output matches, the test passes, and if the output doesn't
match the test fails. Note that it is also considered a failure if a test
actually compiles successfully.

To add a test:

* Create `ui-tests/my-awesome-test.rs`
* Write an invalid `#[wasm_bindgen]` invocation, testing the error you're
  generating
* Execute `cargo test -p wasm-bindgen-macro --test ui`, the test will fail
* From within the `ui-tests` folder, execute `./update-all-references.sh`. This
  should create a `my-awesome-test.stderr` file.

  OR if you are on Windows, set the `TRYBUILD=overwrite` environment variable (this is done as `$env:TRYBUILD="overwrite"` [in powershell](https://stackoverflow.com/a/1333717/7595472)) and run the command again.
* Inspect `my-awesome-test.stderr` to make sure it looks ok
* Rerun `cargo test -p wasm-bindgen-macro --test ui` and your tests should pass!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/macro/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/web-sys/README.md
# `web-sys`

Raw bindings to Web APIs for projects using `wasm-bindgen`.

- [The `web-sys` section of the `wasm-bindgen`
  guide](https://rustwasm.github.io/wasm-bindgen/web-sys/index.html)
- [API Documentation](https://rustwasm.github.io/wasm-bindgen/api/web_sys/)

## Crate features

This crate by default contains very little when compiled as almost all of its
exposed APIs are gated by Cargo features. The exhaustive list of features can be
found in `crates/web-sys/Cargo.toml`, but the rule of thumb for `web-sys` is
that each type has its own cargo feature (named after the type). Using an API
requires enabling the features for all types used in the API, and APIs should
mention in the documentation what features they require.

## How to add an interface

If you don't see a particular web API in `web-sys`, here is how to add it.

1. Copy the WebIDL specification of the API and place it in a new file in the
   `webidls/unstable` folder. You can often find the IDL by going to the MDN
   docs page for the API, scrolling to the bottom, clicking the
   "Specifications" link, and scrolling to the bottom of the specification
   page. For example, the bottom of the [MDN
   docs](https://developer.mozilla.org/en-US/docs/Web/API/MediaSession) on the
   MediaSession API takes you to the
   [spec](https://w3c.github.io/mediasession/#the-mediasession-interface). The
   [very bottom](https://w3c.github.io/mediasession/#idl-index) of _that_ page
   is the IDL.
2. Annotate the functions that can throw with `[Throws]`
3. `cd crates/web-sys`
4. Run `cargo run --release --package wasm-bindgen-webidl -- webidls src/features ./Cargo.toml`
5. Run `git add .` to add all the generated files into git.
6. Add an entry in CHANGELOG.md like the following

   ```md
   ...

   ## Unreleased

   ### Added

   ...

   * Added <your addition>
     [#1234](https://github.com/rustwasm/wasm-bindgen/pull/1234) # <- link to your PR
   ```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/web-sys/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/web-sys/webidls/unavailable_option_primitive/README.md
These webidl files are unavailable because web-sys will fail to build when a function has an 
optional primitive parameter (e.g. `optional short`).

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/web-sys/webidls/unavailable_option_primitive/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/web-sys/webidls/disabled/README.md
These webidl files are intentionally disabled because they have not yet stabilized.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/web-sys/webidls/disabled/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/test-macro/README.md
# wasm-bindgen-test-runner

This is an **experimental** crate for enabling `cargo test --target
wasm32-unknown-unknown`. For more information see the README of
`wasm-bindgen-test`.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/crates/test-macro/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/README.md
# Examples

This directory contains a number of Cargo projects that are all examples of how
to use `wasm-bindgen` in various contexts. More documentation can be [found
online][dox]

[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/index.html

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/weather_report/README.md
# web-sys: Weather report

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/weather_report/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/weather_report.html

You can build the example locally with:

```
$ npm install
$ npm run build
$ npm start
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/weather_report/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/paint/README.md
# Paint Example

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/paint/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/paint.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/paint/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/deno/README.md
# Using deno

You can build the example with

```sh
$ ./build.sh
```

and test it with

```sh
$ deno run --allow-read test.ts
```

The `--allow-read` flag is needed because the Wasm file is read during runtime.
This will be fixed when https://github.com/denoland/deno/issues/2552 is resolved.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/deno/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/char/README.md
# Working with the `char` type

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/char/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/char.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/char/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/hello_world/README.md
# Hello, World!

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/hello_world/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/hello-world.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/hello_world/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/webrtc_datachannel/README.md
# WebRTC DataChannel Example

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/webrtc_datachannel/
[dox]: https://rustwasm.github.io/wasm-bindgen/examples/webrtc_datachannel.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/webrtc_datachannel/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/raytrace-parallel/README.md
# Parallel Raytracing

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/raytrace.html
[compiled]: https://wasm-bindgen.netlify.app/exbuild/raytrace-parallel/

You can build the example locally with:

```
$ python3 run.py
```

and then visiting http://localhost:8000 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/raytrace-parallel/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/wasm-in-wasm-imports/README.md
# js-sys: WebAssembly in WebAssembly

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/wasm-in-wasm/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/wasm-in-wasm.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/wasm-in-wasm-imports/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/webgl/README.md
# WebGL Example

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/webgl/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/webgl.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/webgl/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/explicit-resource-management/README.md
# Using Explicit Resource Management (via Deno)

You can build the example with

```sh
$ ./build.sh
```

and test it with

```sh
$ deno run --allow-read test.ts
```

The `--allow-read` flag is needed because the Wasm file is read during runtime.
This will be fixed when https://github.com/denoland/deno/issues/2552 is resolved.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/explicit-resource-management/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/websockets/README.md
# WebSockets Example

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/websockets/
[dox]: https://rustwasm.github.io/wasm-bindgen/examples/websockets.html

You can build the example locally with:

```
$ wasm-pack build --target web
```

Then serve the statics and navigate to `host:port`

```
# static server from https://crates.io/crates/https
http

# or use python
python2 -m SimpleHTTPServer
python3 -m http.server
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/websockets/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/canvas/README.md
# 2D Canvas

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/canvas/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/2d-canvas.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/canvas/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/todomvc/README.md
# TODO MVC

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/todomvc/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/todomvc.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/todomvc/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/fetch/README.md
# The `fetch` API

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/fetch/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/fetch.html

You have to use: 

```
$ npm install 
```

before running an `npm` package.

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/fetch/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/add/README.md
# Adding numbers (small Wasm files)

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/add.html
[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/add/

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/add/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/webxr/README.md
# WebXR Example

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/webxr/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/webxr.html

You can build the example locally with:

```
# Note: Requires unstable flag whilst WebXR in development
$ RUSTFLAGS=--cfg=web_sys_unstable_apis npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/webxr/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/console_log/README.md
# `console.log`

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/console_log/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/console-log.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/console_log/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/julia_set/README.md
# Julia Set

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/julia_set/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/julia.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/julia_set/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/dom/README.md
# web-sys: DOM hello world

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/dom/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/dom.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/dom/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/wasm-in-wasm/README.md
# js-sys: WebAssembly in WebAssembly

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/wasm-in-wasm/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/wasm-in-wasm.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/wasm-in-wasm/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/request-animation-frame/README.md
# web-sys: `requestAnimationFrame` loop

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/request-animation-frame/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/request-animation-frame.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/request-animation-frame/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/closures/README.md
# web-sys: Closures

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/closures/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/closures.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/closures/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/wasm-audio-worklet/README.md
# wasm-audio-worklet

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/wasm-audio-worklet.html
[compiled]: https://wasm-bindgen.netlify.app/exbuild/wasm-audio-worklet/

You can build the example locally with:

```
$ python3 run.py
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/wasm-audio-worklet/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/performance/README.md
# web-sys: `performance.now`

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/performance/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/performance.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/performance/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/import_js/README.md
# Importing non-browser JS

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/import_js/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/import-js.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/import_js/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/without-a-bundler-no-modules/README.md
# Without a Bundler Using `--target no-modules`

[View documentation for this example online][dox]

[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/without-a-bundler.html#using-the-older---target-no-modules

You can build the example locally with:

```
$ wasm-pack build --target no-modules
```

and then opening `index.html` in a browser should run the example!

Note that this example is in contrast to the [without a bundler][wab] example
which performs a similar purpose except it uses `--target no-modules` instead of
`--target web`. The main difference here is how the shim JS and module are
loaded, where this example uses old-school `script` tags while `--target web`
uses ES modules.

[wab]: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/without-a-bundler

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/without-a-bundler-no-modules/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/duck-typed-interfaces/README.md
# Duck-Typed Interfaces Example

This directory is an example of using duck-typed JS interfaces with `wasm-bindgen`.

You can build and run the example with:

```
$ npm run serve
```

and then opening up `http://localhost:8080/` in a web browser should show a
smiley face drawn on canvas by Rust and WebAssembly.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/duck-typed-interfaces/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/webaudio/README.md
# WebAudio

[View documentation for this example online][dox] or [View compiled example
online][compiled]

[compiled]: https://rustwasm.github.io/wasm-bindgen/exbuild/webaudio/
[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/web-audio.html

You can build the example locally with:

```
$ npm run serve
```

and then visiting http://localhost:8080 in a browser should run the example!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/webaudio/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/without-a-bundler/README.md
# Without a Bundler

[View documentation for this example online][dox]

[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/without-a-bundler.html

You can build the example locally with:

```
$ wasm-pack build --target web
```

Then serve this directory in your favourite webserver and navigate to `host:port`
to open the index.html in your browser:

```
# static server from https://crates.io/crates/https
http

# or use python
python2 -m SimpleHTTPServer
python3 -m http.server
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/without-a-bundler/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/synchronous-instantiation/README.md
# Synchronous Instantiation

[View documentation for this example online][dox]

[dox]: https://rustwasm.github.io/docs/wasm-bindgen/examples/synchronous-instantiation.html

You can build the example locally with:

```
$ wasm-pack build --target web
```

Then serve this directory in your favourite webserver and navigate to `host:port`
to open the index.html in your browser:

```
# static server from https://crates.io/crates/https
http

# or use python
python2 -m SimpleHTTPServer
python3 -m http.server
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/examples/synchronous-instantiation/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/benchmarks/README.md
# Microbenchmarks for `wasm-bindgen`

This folder houses a number of microbenchmarks for `wasm-bindgen`. These, like
all microbenchmarks, should be taken with a grain of salt. They are intended to
help developers understand changes over time, but they are not intended to be a
performance suite for WebAssembly for Rust.

[View benchmarks for `master` branch online][online]

[online]: https://rustwasm.github.io/wasm-bindgen/benchmarks/

## Building and Running

```
$ cd benchmarks
$ cargo build --release --target wasm32-unknown-unknown
$ cargo run --package wasm-bindgen-cli -- --out-dir pkg --target web ../target/wasm32-unknown-unknown/release/wasm_bindgen_benchmark.wasm
```

Next, use your favorite static file server to host the current directory. For
example using the [`https` crate](https://crates.io/crates/https):

```
$ http
```

Then open up a web browser and view http://localhost:8000, for example.

You should be presented a page with lots of `(run)` links, where when you click
them it will execute the benchmark and then display the result.

## Benchmark Architecture

Currently benchmarks are pretty bare bones. They just use benchmark.js to
generate statistics which are then rendered to the screen. Benchmarks are listed
one-by-one in `index.html` where a `td` exists for each benchmark. In `index.js`
each of the `td`'s `id` properties are hooked up to an actual function to
benchmark, depending on what's being benchmarked.

Relevant files are:

* `index.html` - the page showing all benchmarks
* `index.js` - the driver JS for all benchmarks
* `globals.js` - global JS functions imported by all other benchmarks
* `js-bencharks.js` - the JS functions that we're benchmarking
* `src/lib.rs` - the Rust/`wasm-bindgen` functions we're benchmarking
* `raw.wast`/`raw.wasm` - a raw handwritten WebAssembly file used in some
  benchmarks. A compiled version of this is checked into the repository.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/wasm-bindgen/benchmarks/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/README.md
# Icondata
This crate provides SVG icon data from popular and free icon libraries.

A [site](https://carloskiki.github.io/icondata) referencing every icon is available!

## Table of Contents
- [Icondata](#icondata)
- [Table of Contents](#table-of-contents)
- [Usage](#usage)
- [Icon Packages](#icon-packages)
- [Developing](#developing)
- [Contributing](#contributing)

## Usage
Every crate is tied to a specific icon package. You can find the name of the crate corresponding to a package in the [Icon Packages](#icon-packages) section.

Please see the [API documentation](https://docs.rs/icondata/latest/icondata/) to get started.

## Icon Packages
Licenses of the icons provided through these libraries were extracted with best intent,
but must only be taken as a hint. Please check the individual icon repositories for up-to-date license information.

| Icon Library | Version | Source | License | Crate Name |
| ------------ | ------- | ------ | ------- | ---------- |
| Ant Design Icons | 4.4.2 | Git: <https://github.com/ant-design/ant-design-icons> - Branch: master - Commit: f8416b8b99b91cbdcebb5b4450a815f2b8edc16f | MIT,  | icondata_ai |
| BoxIcons | 2.1.4 | Git: <https://github.com/atisawd/boxicons> - Branch: master - Commit: 9ffa9136e8681886bb7bd2145cd4098717ce1c11 | MIT,  | icondata_bi |
| Bootstrap Icons | 1.13.1 | Git: <https://github.com/twbs/icons> - Tag: v1.13.1 | MIT,  | icondata_bs |
| css.gg | 2.1.1 | Git: <https://github.com/astrit/css.gg> - Tag: 2.1.1 | MIT,  | icondata_cg |
| Charm | 0.18.0 | Git: <https://github.com/jaynewey/charm-icons> - Tag: v0.18.0 | MIT,  | icondata_ch |
| Font Awesome | 6.7.2 | Git: <https://github.com/FortAwesome/Font-Awesome> - Tag: 6.7.2 | CC BY 4.0,  | icondata_fa |
| Feather | 4.29.2 | Git: <https://github.com/feathericons/feather> - Tag: v4.29.2 | MIT,  | icondata_fi |
| Heroicons | 2.2.0 | Git: <https://github.com/refactoringui/heroicons> - Tag: v2.2.0 | MIT,  | icondata_hi |
| IcoMoon Free | unknown | Git: <https://github.com/Keyamoon/IcoMoon-Free> - Branch: master - Commit: d006795ede82361e1bac1ee76f215cf1dc51e4ca | CC BY 4.0, GPL,  | icondata_im |
| Ionicons | 8.0.9 | Git: <https://github.com/ionic-team/ionicons> - Tag: v8.0.9 | MIT,  | icondata_io |
| Lucide | 0.513.0 | Git: <https://github.com/lucide-icons/lucide> - Tag: 0.513.0 | ISC,  | icondata_lu |
| Material Design Icons | 7.4.47 | Git: <https://github.com/Templarian/MaterialDesign-SVG> - Tag: v7.4.47 | Apache 2.0,  | icondata_mdi |
| Github Octicons | 19.15.0 | Git: <https://github.com/primer/octicons> - Tag: v19.15.0 | MIT,  | icondata_oc |
| Remix Icon | 4.6.0 | Git: <https://github.com/Remix-Design/RemixIcon> - Tag: v4.6.0 | Apache 2.0,  | icondata_ri |
| Simple Icons | 15.0.0 | Git: <https://github.com/simple-icons/simple-icons> - Tag: 15.0.0 | CC0 1.0 Universal,  | icondata_si |
| Tabler Icons | 3.34.0 | Git: <https://github.com/tabler/tabler-icons> - Tag: v3.34.0 | MIT,  | icondata_tb |
| Typicons | 2.1.2 | Git: <https://github.com/stephenhutchings/typicons.font> - Tag: v2.1.2 | CC BY-SA 3.0,  | icondata_ti |
| VS Code Icons | 0.0.36 | Git: <https://github.com/microsoft/vscode-codicons> - Tag: 0.0.36 | CC BY 4.0,  | icondata_vs |
| Weather Icons | 2.0.12 | Git: <https://github.com/erikflowers/weather-icons> - Tag: 2.0.12 | SIL OFL 1.1,  | icondata_wi |

## Developing
This repository uses Just

Simply call
```bash
just
```
to see a list of available commands.

You may need to install just using

```bash
cargo install just
```

## Contributing
Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_tb/README.md
# Icondata - tb

Icon data from the *Tabler Icons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_tb/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_ri/README.md
# Icondata - ri

Icon data from the *Remix Icon* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_ri/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_cg/README.md
# Icondata - cg

Icon data from the *css.gg* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_cg/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_oc/README.md
# Icondata - oc

Icon data from the *Github Octicons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_oc/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_ch/README.md
# Icondata - ch

Icon data from the *Charm* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_ch/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_io/README.md
# Icondata - io

Icon data from the *Ionicons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_io/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_vs/README.md
# Icondata - vs

Icon data from the *VS Code Icons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_vs/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_wi/README.md
# Icondata - wi

Icon data from the *Weather Icons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_wi/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_mdi/README.md
# Icondata - mdi

Icon data from the *Material Design Icons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_mdi/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_ti/README.md
# Icondata - ti

Icon data from the *Typicons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_ti/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_im/README.md
# Icondata - im

Icon data from the *IcoMoon Free* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_im/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_fi/README.md
# Icondata - fi

Icon data from the *Feather* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_fi/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_lu/README.md
# Icondata - lu

Icon data from the *Lucide* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_lu/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_fa/README.md
# Icondata - fa

Icon data from the *Font Awesome* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_fa/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_ai/README.md
# Icondata - ai

Icon data from the *Ant Design Icons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_ai/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_bs/README.md
# Icondata - bs

Icon data from the *Bootstrap Icons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_bs/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/build/README.md
# Build

This crate is the **generator** of the `icondata` library living alongside this crate.

## Usage

Once inside this directory, trigger a build with

    cargo run

This will use the downloaded icon packages from the previous run, updating them when necessary, and generate the `icondata` library crate along with individual icon crates (i.e. `icondata-*`).

Note that this is the default as this may greatly reduces the runtime of this crate.

If you want to run a clean build, removing previously downloaded content, preferred when generating a new release, use

    cargo run -- --clean

This is the only possible argument right now. You can always check for other arguments with

    cargo run -- --help

## Notes

Each crate is not generated completely from scratch. The following files and directories are touched within each crate.

| Path       | Changes  |
| ---        | ---      |
| src/\*     | Replaced |
| Cargo.toml | Replaced |
| README.md  | Replaced |
| ICONS.md   | Replaced |

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/build/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/build/templates/main_lib/README.md
# Icondata
This crate provides SVG icon data from popular and free icon libraries.

A [site](https://carloskiki.github.io/icondata) referencing every icon is available!

## Table of Contents
- [Icondata](#icondata)
- [Table of Contents](#table-of-contents)
- [Usage](#usage)
- [Icon Packages](#icon-packages)
- [Developing](#developing)
- [Contributing](#contributing)

## Usage
Every crate is tied to a specific icon package. You can find the name of the crate corresponding to a package in the [Icon Packages](#icon-packages) section.

Please see the [API documentation](https://docs.rs/icondata/latest/icondata/) to get started.

## Icon Packages
Licenses of the icons provided through these libraries were extracted with best intent,
but must only be taken as a hint. Please check the individual icon repositories for up-to-date license information.

| Icon Library | Version | Source | License | Crate Name |
| ------------ | ------- | ------ | ------- | ---------- |
{% for (pack_name, version, source, license, short_name) in packages -%}
| {{pack_name}} | {{version}} | {{source}} | {{license}} | icondata_{{short_name}} |
{% endfor %}
## Developing
This repository uses Just

Simply call
```bash
just
```
to see a list of available commands.

You may need to install just using

```bash
cargo install just
```

## Contributing
Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/build/templates/main_lib/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/build/templates/icon_lib/README.md
# Icondata - {{short_name}}

Icon data from the *{{package_name}}* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/build/templates/icon_lib/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_bi/README.md
# Icondata - bi

Icon data from the *BoxIcons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_bi/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_hi/README.md
# Icondata - hi

Icon data from the *Heroicons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_hi/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_core/README.md
# Icondata - core

A simple struct representing svg icon data. Meant to be used with the `icondata` crate.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_core/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_si/README.md
# Icondata - si

Icon data from the *Simple Icons* library.

Visit this [repository](https://github.com/Carlosted/icondata) for in-depth information.

## Contributing

Contributions are more than welcomed!
Do not hesitate add icon libraries, features, etc.
-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/icondata/icondata_si/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/README.md
# Leptos Book

- [Leptos Book](#leptos-book)
  - [Introduction](#introduction)
  - [Building the Book](#building-the-book)
  - [Optional: VSCode Dev Container](#vscode-dev-container)

## Introduction

This project contains the core of a new introductory guide to Leptos. Pull requests for any typos, clarification, or improvements are always welcome.

You can find the live version of this book on the [Leptos Website](https://book.leptos.dev/).

## Building the Book

It is built using [`mdbook`](https://crates.io/crates/mdbook). You can view a local copy by installing `mdbook` with Cargo.

```sh
cargo install mdbook --version 0.4.*
```

This book also uses an mdbook preprocessor called [`mdbook-admonish`](https://crates.io/crates/mdbook-admonish) to style blocks of text like notes, warnings, etc.

```sh
cargo install mdbook-admonish --version 1.*
```


and then run the book with

```sh
mdbook serve
```

It should now be available at [`http://localhost:3000`](http://localhost:3000).

## Optional: VSCode Dev Container

You can optionally build and run it in the example [VSCode Dev Container](https://code.visualstudio.com/docs/devcontainers/containers), which will automatically install all dependencies, build the book, and serve it at [`http://localhost:3000`](http://localhost:3000) with live reloading.

Install Docker and the official [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension, then open the project in VSCode and "Reopen in dev container" when prompted.

For more info, see: https://code.visualstudio.com/remote/advancedcontainers/use-docker-kubernetes

To run Docker commands inside the dev container, see: https://code.visualstudio.com/remote/advancedcontainers/use-docker-kubernetes

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/appendix_life_cycle.md
# Appendix: The Life Cycle of a Signal

Three questions commonly arise at the intermediate level when using Leptos:
1. How can I connect to the component lifecycle, running some code when a component mounts or unmounts?
2. How do I know when signals are disposed, and why do I get an occasional panic when trying to access a disposed signal?
3. How is it possible that signals are `Copy` and can be moved into closures and other structures without being explicitly cloned?

The answers to these three questions are closely inter-related, and are each somewhat complicated. This appendix will try to give you the context for understanding the answers, so that you can reason correctly about your application's code and how it runs.

## The Component Tree vs. The Decision Tree

Consider the following simple Leptos app:

```rust
use leptos::logging::log;
use leptos::prelude::*;

#[component]
pub fn App() -> impl IntoView {
    let (count, set_count) = signal(0);

    view! {
        <button on:click=move |_| *set_count.write() += 1>"+1"</button>
        {move || if count.get() % 2 == 0 {
            view! { <p>"Even numbers are fine."</p> }.into_any()
        } else {
            view! { <InnerComponent count/> }.into_any()
        }}
    }
}

#[component]
pub fn InnerComponent(count: ReadSignal<usize>) -> impl IntoView {
    Effect::new(move |_| {
        log!("count is odd and is {}", count.get());
    });

    view! {
        <OddDuck/>
        <p>{count}</p>
    }
}

#[component]
pub fn OddDuck() -> impl IntoView {
    view! {
        <p>"You're an odd duck."</p>
    }
}
```

All it does is show a counter button, and then one message if it's even, and a different message if it's odd. If it's odd, it also logs the values in the console.

One way to map out this simple application would be to draw a tree of nested components:
```
App 
|_ InnerComponent
   |_ OddDuck
```

Another way would be to draw the tree of decision points:
```
root
|_ is count even?
   |_ yes
   |_ no
```

If you combine the two together, you'll notice that they don't map onto one another perfectly. The decision tree slices the view we created in `InnerComponent` into three pieces, and combines part of `InnerComponent` with the `OddDuck` component:
```
DECISION            COMPONENT           DATA    SIDE EFFECTS
root                <App/>              (count) render <button>
|_ is count even?   <InnerComponent/>
   |_ yes                                       render even <p>
   |_ no                                        start logging the count 
                    <OddDuck/>                  render odd <p> 
                                                render odd <p> (in <InnerComponent/>!)
```

Looking at this table, I notice the following things:
1. The component tree and the decision tree don't match one another: the "is count even?" decision splits `<InnerComponent/>` into three parts (one that never changes, one if even, one if odd), and merges one of these with the `<OddDuck/>` component. 
2. The decision tree and the list of side effects correspond perfectly: each side effect is created at a specific decision point.
3. The decision tree and the tree of data also line up. It's hard to see with only one signal in the table, but unlike a component, which is a function that can include multiple decisions or none, a signal is always created at a specific line in the tree of decisions.

Here's the thing: The structure of your data and the structure of side effects affect the actual functionality of your application. The structure of your components is just a convenience of authoring. You don't care, and you shouldn't care, which component rendered which `<p>` tag, or which component created the effect to log the values. All that matters is that they happen at the right times.

In Leptos, *components do not exist.* That is to say: You can write your application as a tree of components, because that's convenient, and we provide some debugging tools and logging built around components, because that's convenient too. But your components do not exist at runtime: Components are not a unit of change detection or of rendering. They are simply function calls. You can write your whole application in one big component, or split it into a hundred components, and it does not affect the runtime behavior, because components don't really exist.

The decision tree, on the other hand, *does exist*. And it's really important!

## The Decision Tree, Rendering, and Ownership

Every decision point is some kind of reactive statement: a signal or a function that can change over time. When you pass a signal or a function into the renderer, it automatically wraps it in an effect that subscribes to any signals it contains, and updates the view accordingly over time.

This means that when your application is rendered, it creates a tree of nested effects that perfectly mirrors the decision tree. In pseudo-code:
```rust
// root
let button = /* render the <button> once */;

// the renderer wraps an effect around the `move || if count() ...`
Effect::new(|_| {
    if count.get() % 2 == 0 {
        let p = /* render the even <p> */;
    } else {
        // the user created an effect to log the count
        Effect::new(|_| {
            log!("count is odd and is {}", count.get());
        });

        let p1 = /* render the <p> from OddDuck */;
        let p2 = /* render the second <p> */ 

        // the renderer creates an effect to update the second <p>
        Effect::new(|_| {
            // update the content of the <p> with the signal
            p2.set_text_content(count.get());
        });
    }
})
```

Each reactive value is wrapped in its own effect to update the DOM, or run any other side effects of changes to signals. But you don't need these effects to keep running forever. For example, when `count` switches from an odd number back to an even number, the second `<p>` no longer exists, so the effect to keep updating it is no longer useful. Instead of running forever, effects are canceled when the decision that created them changes. In other words, and more precisely: effects are canceled whenever the effect that was running when they were created re-runs. If they were created in a conditional branch, and re-running the effect goes through the same branch, the effect will be created again: if not, it will not.

From the perspective of the reactive system itself, your application's "decision tree" is really a reactive "ownership tree." Simply put, a reactive "owner" is the effect or memo that is currently running. It owns effects created within it, they own their own children, and so on. When an effect is going to re-run, it first "cleans up" its children, then runs again.

So far, this model is shared with the reactive system as it exists in JavaScript frameworks like S.js or Solid, in which the concept of ownership exists to automatically cancel effects.

What Leptos adds is that we add a second, similar meaning to ownership: a reactive owner not only owns its child effects, so that it can cancel them; it also owns its signals (memos, etc.) so that it can dispose of them.

## Ownership and the `Copy` Arena

This is the innovation that allows Leptos to be usable as a Rust UI framework. Traditionally, managing UI state in Rust has been hard, because UI is all about shared mutability. (A simple counter button is enough to see the problem: You need both immutable access to set the text node showing the counter's value, and mutable access in the click handler, and every Rust UI framework is designed around the fact that Rust is designed to prevent exactly that!) Using something like an event handler in Rust traditionally relies on primitives for communicating via shared memory with interior mutability (`Rc<RefCell<_>>`, `Arc<Mutex<_>>`) or for shared memory by communicating via channels, either of which often requires explicit `.clone()`ing to be moved into an event listener. This is kind of fine, but also an enormous inconvenience.

Leptos has always used a form of arena allocation for signals instead. A signal itself is essentially an index into a data structure that's held elsewhere. It's a cheap-to-copy integer type that does not do reference counting on its own, so it can be copied around, moved into event listeners, etc. without explicit cloning.

Instead of Rust lifetimes or reference counting, the life cycles of these signals are determined by the ownership tree.

Just as all effects belong to an owning parent effect, and the children are canceled when the owner reruns, so too all signals belong to an owner, and are disposed of when the parent reruns. 

In most cases, this is completely fine. Imagine that in our example above, `<OddDuck/>` created some other signal that it used to update part of its UI. In most cases, that signal will be used for local state in that component, or maybe passed down as a prop to another component. It's unusual for it to be hoisted up out of the decision tree and used somewhere else in the application. When the `count` switches back to an even number, it is no longer needed and can be disposed.

However, this means there are two possible issues that can arise.

### Signals can be used after they are disposed 

The `ReadSignal` or `WriteSignal` that you hold is just an integer: say, 3 if it's the 3rd signal in the application. (As always, the reality is a bit more complicated, but not much.) You can copy that number all over the place and use it to say, "Hey, get me signal 3." When the owner cleans up, the *value* of signal 3 will be invalidated; but the number 3 that you've copied all over the place can't be invalidated. (Not without a whole garbage collector!) That means that if you push signals back "up" the decision tree, and store them somewhere conceptually "higher" in your application than they were created, they can be accessed after being disposed.

If you try to *update* a signal after it was disposed, nothing bad really happens. The framework will just warn you that you tried to update a signal that no longer exists. But if you try to *access* one, there's no coherent answer other than panicking: there is no value that could be returned. (There are `try_` equivalents to the `.get()` and `.with()` methods that will simply return `None` if a signal has been disposed).

### Signals can be leaked if you create them in a higher scope and never dispose of them

The opposite is also true, and comes up particularly when working with collections of signals, like an `RwSignal<Vec<RwSignal<_>>>`. If you create a signal at a higher level, and pass it down to a component at a lower level, it is not disposed until the higher-up owner is cleaned up. 

For example, if you have a todo app that creates a new `RwSignal<Todo>` for each todo, stores it in an `RwSignal<Vec<RwSignal<Todo>>>`, and then passes it down to a `<Todo/>`, that signal is not automatically disposed when you remove the todo from the list, but must be manually disposed, or it will "leak" for as long as its owner is still alive. (See the [TodoMVC example](https://github.com/leptos-rs/leptos/blob/main/examples/todomvc/src/lib.rs#L77-L85) for more discussion.) 

This is only an issue when you create signals, store them in a collection, and remove them from the collection without manually disposing of them as well.

### Solving these Problems with Reference-Counted Signals

0.7 introduces a reference-counted equivalent for each of our arena-allocated primitive: for every `RwSignal` there is an `ArcRwSignal` (`ArcReadSignal`, `ArcWriteSignal`, `ArcMemo`, and so on).

These have their memory and disposal managed by reference counting, rather than the ownership tree.

This means that they can safely be used in situations in which the arena-allocated equivalents would either be leaked or used after being disposed.

This is especially useful when creating collections of signals: you might create `ArcRwSignal<_>` instead of `RwSignal<_>`, and then convert it into an `RwSignal<_>` in each row of a table, for example.

See the use of `ArcRwSignal<i32>` in the [`counters` example](https://github.com/leptos-rs/leptos/blob/main/examples/counters/src/lib.rs) for a more concrete example.

## Connecting the Dots

The answers to the questions we started with should probably make some sense now.

### Component Life-Cycle

There is no component life-cycle, because components don't really exist. But there is an ownership lifecycle, and you can use it to accomplish the same things:
- *before mount*: simply running code in the body of a component will run it "before the component mounts"
- *on mount*: `create_effect` runs a tick after the rest of the component, so it can be useful for effects that need to wait for the view to be mounted to the DOM. 
- *on unmount*: You can use `on_cleanup` to give the reactive system code that should run while the current owner is cleaning up, before running again. Because an owner is around a "decision," this means that `on_cleanup` will run when your component unmounts: if something can unmount, the renderer must have created an effect that's unmounting it!

### Issues with Disposed Signals

Generally speaking, problems can only arise here if you are creating a signal lower down in the ownership tree and storing it somewhere higher up. If you run into issues here, you should instead "hoist" the signal creation up into the parent, and then pass the created signals down—making sure to dispose of them on removal, if needed!

### `Copy` signals

The whole system of `Copy`able wrapper types (signals, `StoredValue`, and so on) uses the ownership tree as a close approximation of the life-cycle of different parts of your UI. In effect, it parallels the Rust language's system of lifetimes based on blocks of code with a system of lifetimes based on sections of UI. This can't always be perfectly checked at compile time, but overall we think it's a net positive.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/appendix_life_cycle.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/SUMMARY.md
# Summary

- [Introduction](./01_introduction.md)
- [Getting Started](./getting_started/README.md)
  - [Leptos DX](./getting_started/leptos_dx.md)
  - [The Leptos Community and leptos-* Crates](./getting_started/community_crates.md)
- [Part 1: Building User Interfaces](./view/README.md)
  - [A Basic Component](./view/01_basic_component.md)
  - [Dynamic Attributes](./view/02_dynamic_attributes.md)
  - [Components and Props](./view/03_components.md)
  - [Iteration](./view/04_iteration.md)
  - [Iterating over More Complex Data](./view/04b_iteration.md)
  - [Forms and Inputs](./view/05_forms.md)
  - [Control Flow](./view/06_control_flow.md)
  - [Error Handling](./view/07_errors.md)
  - [Parent-Child Communication](./view/08_parent_child.md)
  - [Passing Children to Components](./view/09_component_children.md)
  - [No Macros: The View Builder Syntax](./view/builder.md)
- [Reactivity](./reactivity/README.md)
  - [Working with Signals](./reactivity/working_with_signals.md)
  - [Responding to Changes with Effects](./reactivity/14_create_effect.md)
  - [Interlude: Reactivity and Functions](./reactivity/interlude_functions.md)
- [Testing](./testing.md)
- [Async](./async/README.md)
  - [Loading Data with Resources](./async/10_resources.md)
  - [Suspense](./async/11_suspense.md)
  - [Transition](./async/12_transition.md)
  - [Actions](./async/13_actions.md)
- [Interlude: Projecting Children](./interlude_projecting_children.md)
- [Global State Management](./15_global_state.md)
- [Router](./router/README.md)
  - [Defining `<Routes/>`](./router/16_routes.md)
  - [Nested Routing](./router/17_nested_routing.md)
  - [Params and Queries](./router/18_params_and_queries.md)
  - [`<A/>`](./router/19_a.md)
  - [`<Form/>`](./router/20_form.md)
- [Interlude: Styling](./interlude_styling.md)
- [Metadata](./metadata.md)
- [Integrating with JavaScript: `wasm-bindgen`, `web_sys`, and `HtmlElement`](./web_sys.md)
- [Client-Side Rendering: Wrapping Up](./csr_wrapping_up.md)
- [Part 2: Server Side Rendering](./ssr/README.md)
  - [`cargo-leptos`](./ssr/21_cargo_leptos.md)
  - [The Life of a Page Load](./ssr/22_life_cycle.md)
  - [Async Rendering and SSR “Modes”](./ssr/23_ssr_modes.md)
  - [Hydration Bugs](./ssr/24_hydration_bugs.md)
- [Working with the Server](./server/README.md)
  - [Server Functions](./server/25_server_functions.md)
  - [Extractors](./server/26_extractors.md)
  - [Responses and Redirects](./server/27_response.md)
- [Progressive Enhancement and Graceful Degradation](./progressive_enhancement/README.md)
  - [`<ActionForm/>`](./progressive_enhancement/action_form.md)
- [Deployment](./deployment/README.md)
  - [Deploying CSR Apps](./deployment/csr.md)
  - [Deploying SSR Apps](./deployment/ssr.md)
  - [Optimizing WASM Binary Size](./deployment/binary_size.md)
- [Guide: Islands](./islands.md)

- [Appendix: How Does the Reactive System Work?](./appendix_reactive_graph.md)
- [Appendix: The Life Cycle of a Signal](./appendix_life_cycle.md)


-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/SUMMARY.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/interlude_projecting_children.md
# Projecting Children

As you build components you may occasionally find yourself wanting to “project” children through multiple layers of components.

## The Problem

Consider the following:

```rust
pub fn NestedShow<F, IV>(fallback: F, children: ChildrenFn) -> impl IntoView
where
    F: Fn() -> IV + Send + Sync + 'static,
    IV: IntoView + 'static,
{
    view! {
        <Show
            when=|| todo!()
            fallback=|| ()
        >
            <Show
                when=|| todo!()
                fallback=fallback
            >
                {children()}
            </Show>
        </Show>
    }
}
```

This is pretty straightforward: if the inner condition is `true`, we want to show `children`. If not, we want to show `fallback`. And if the outer condition is `false`, we just render `()`, i.e., nothing.

In other words, we want to pass the children of `<NestedShow/>` _through_ the outer `<Show/>` component to become the children of the inner `<Show/>`. This is what I mean by “projection.”

This won’t compile.

```
error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`
```

Each `<Show/>` needs to be able to construct its `children` multiple times. The first time you construct the outer `<Show/>`’s children, it takes `fallback` and `children` to move them into the invocation of the inner `<Show/>`, but then they're not available for future outer-`<Show/>` children construction.

## The Details

> Feel free to skip ahead to the solution.

If you want to really understand the issue here, it may help to look at the expanded `view` macro. Here’s a cleaned-up version:

```rust
Show(
    ShowProps::builder()
        .when(|| todo!())
        .fallback(|| ())
        .children({
            // children and fallback are moved into a closure here
            ::leptos::children::ToChildren::to_children(move || {
                Show(
                    ShowProps::builder()
                        .when(|| todo!())
                        // fallback is consumed here
                        .fallback(fallback)
                        .children({
                            // children is captured here
                            ::leptos::children::ToChildren::to_children(
                                move || children(),
                            )
                        })
                        .build(),
                )
            })
        })
        .build(),
)
```

All components own their props; so the `<Show/>` in this case can’t be called because it only has captured references to `fallback` and `children`.

## Solution

However, both `<Suspense/>` and `<Show/>` take `ChildrenFn`, i.e., their `children` should implement the `Fn` type so they can be called multiple times with only an immutable reference. This means we don’t need to own `children` or `fallback`; we just need to be able to pass `'static` references to them.

We can solve this problem by using the [`StoredValue`](https://docs.rs/leptos/latest/leptos/reactive/owner/struct.StoredValue.html) primitive. This essentially stores a value in the reactive system, handing ownership off to the framework in exchange for a reference that is, like signals, `Copy` and `'static`, which we can access or modify through certain methods.

In this case, it’s really simple:

```rust
pub fn NestedShow<F, IV>(fallback: F, children: ChildrenFn) -> impl IntoView
where
    F: Fn() -> IV + Send + Sync + 'static,
    IV: IntoView + 'static,
{
    let fallback = StoredValue::new(fallback);
    let children = StoredValue::new(children);

    view! {
        <Show
            when=|| todo!()
            fallback=|| ()
        >
            <Show
                // check whether user is verified
                // by reading from the resource
                when=move || todo!()
                fallback=move || fallback.read_value()()
            >
                {children.read_value()()}
            </Show>
        </Show>
    }
}
```

At the top level, we store both `fallback` and `children` in the reactive scope owned by `NestedShow`. Now we can simply move those references down through the other layers into the `<Show/>` component and call them there.

## A Final Note

Note that this works because `<Show/>` only needs an immutable reference to their children (which `.read_value` can give), not ownership.

In other cases, you may need to project owned props through a function that takes `ChildrenFn` and therefore needs to be called more than once. In this case, you may find the `clone:` helper in the`view` macro helpful.

Consider this example

```rust
#[component]
pub fn App() -> impl IntoView {
    let name = "Alice".to_string();
    view! {
        <Outer>
            <Inner>
                <Inmost name=name.clone()/>
            </Inner>
        </Outer>
    }
}

#[component]
pub fn Outer(children: ChildrenFn) -> impl IntoView {
    children()
}

#[component]
pub fn Inner(children: ChildrenFn) -> impl IntoView {
    children()
}

#[component]
pub fn Inmost(name: String) -> impl IntoView {
    view! {
        <p>{name}</p>
    }
}
```

Even with `name=name.clone()`, this gives the error

```
cannot move out of `name`, a captured variable in an `Fn` closure
```

It’s captured through multiple levels of children that need to run more than once, and there’s no obvious way to clone it _into_ the children.

In this case, the `clone:` syntax comes in handy. Calling `clone:name` will clone `name` _before_ moving it into `<Inner/>`’s children, which solves our ownership issue.

```rust
view! {
	<Outer>
		<Inner clone:name>
			<Inmost name=name.clone()/>
		</Inner>
	</Outer>
}
```

These issues can be a little tricky to understand or debug, because of the opacity of the `view` macro. But in general, they can always be solved.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/interlude_projecting_children.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/01_introduction.md
# Introduction

This book is intended as an introduction to the [Leptos](https://github.com/leptos-rs/leptos) Web framework.
It will walk through the fundamental concepts you need to build applications,
beginning with a simple application rendered in the browser, and building toward a
full-stack application with server-side rendering and hydration.

The guide doesn’t assume you know anything about fine-grained reactivity or the
details of modern Web frameworks. It does assume you are familiar with the Rust
programming language, HTML, CSS, and the DOM and basic Web APIs.

Leptos is most similar to frameworks like [Solid](https://www.solidjs.com) (JavaScript)
and [Sycamore](https://sycamore-rs.netlify.app/) (Rust). There are some similarities
to other frameworks like React (JavaScript), Svelte (JavaScript), Yew (Rust), and
Dioxus (Rust), so knowledge of one of those frameworks may also make it easier to
understand Leptos.

You can find more detailed docs for each part of the API at [Docs.rs](https://docs.rs/leptos/latest/leptos/).

> The source code for the book is available [here](https://github.com/leptos-rs/book). PRs for typos or clarification are always welcome.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/01_introduction.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/csr_wrapping_up.md
# Wrapping Up Part 1: Client-Side Rendering

So far, everything we’ve written has been rendered almost entirely in the browser. When we create an app using Trunk, it’s served using a local development server. If you build it for production and deploy it, it’s served by whatever server or CDN you’re using. In either case, what’s served is an HTML page with

1. the URL of your Leptos app, which has been compiled to WebAssembly (WASM)
2. the URL of the JavaScript used to initialize this WASM blob
3. an empty `<body>` element

When the JS and WASM have loaded, Leptos will render your app into the `<body>`. This means that nothing appears on the screen until JS/WASM have loaded and run. This has some drawbacks:

1. It increases load time, as your user’s screen is blank until additional resources have been downloaded.
2. It’s bad for SEO, as load times are longer and the HTML you serve has no meaningful content.
3. It’s broken for users for whom JS/WASM don’t load for some reason (e.g., they’re on a train and just went into a tunnel before WASM finished loading; they’re using an older device that doesn’t support WASM; they have JavaScript or WASM turned off for some reason; etc.)

These downsides apply across the web ecosystem, but especially to WASM apps.

However, depending on the requirements of your project, you may be fine with these limitations.

If you just want to deploy your Client-Side Rendered website, skip ahead to the chapter on ["Deployment"](https://leptos-rs.github.io/leptos/deployment/index.html) - there, you'll find directions on how best to deploy your Leptos CSR site.


But what do you do if you want to return more than just an empty `<body>` tag in your `index.html` page? Use “Server-Side Rendering”!

Whole books could be (and probably have been) written about this topic, but at its core, it’s really simple: rather than returning an empty `<body>` tag, with SSR, you'll return an initial HTML page that reflects the actual starting state of your app or site, so that while JS/WASM are loading, and until they load, the user can access the plain HTML version.

Part 2 of this book, on Leptos SSR, will cover this topic in some detail!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/csr_wrapping_up.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/testing.md
# Testing Your Components

Testing user interfaces can be relatively tricky, but really important. This article
will discuss a couple principles and approaches for testing a Leptos app.

## 1. Test business logic with ordinary Rust tests

In many cases, it makes sense to pull the logic out of your components and test
it separately. For some simple components, there’s no particular logic to test, but
for many it’s worth using a testable wrapping type and implementing the logic in
ordinary Rust `impl` blocks.

For example, instead of embedding logic in a component directly like this:

```rust
#[component]
pub fn TodoApp() -> impl IntoView {
    let (todos, set_todos) = signal(vec![Todo { /* ... */ }]);
    // ⚠️ this is hard to test because it's embedded in the component
    let num_remaining = move || todos.read().iter().filter(|todo| !todo.completed).sum();
}
```

You could pull that logic out into a separate data structure and test it:

```rust
pub struct Todos(Vec<Todo>);

impl Todos {
    pub fn num_remaining(&self) -> usize {
        self.0.iter().filter(|todo| !todo.completed).sum()
    }
}

#[cfg(test)]
mod tests {
    #[test]
    fn test_remaining() {
        // ...
    }
}

#[component]
pub fn TodoApp() -> impl IntoView {
    let (todos, set_todos) = signal(Todos(vec![Todo { /* ... */ }]));
    // ✅ this has a test associated with it
    let num_remaining = move || todos.read().num_remaining();
}
```

In general, the less of your logic is wrapped into your components themselves, the
more idiomatic your code will feel and the easier it will be to test.

## 2. Test components with end-to-end (`e2e`) testing

Our [`examples`](https://github.com/leptos-rs/leptos/tree/main/examples) directory has several examples with extensive end-to-end testing, using different testing tools.

The easiest way to see how to use these is to take a look at the test examples themselves:

### `wasm-bindgen-test` with [`counter`](https://github.com/leptos-rs/leptos/blob/main/examples/counter/tests/web.rs)

This is a fairly simple manual testing setup that uses the [`wasm-pack test`](https://rustwasm.github.io/wasm-pack/book/commands/test.html) command.

#### Sample Test

```rust
#[wasm_bindgen_test]
async fn clear() {
    let document = document();
    let test_wrapper = document.create_element("section").unwrap();
    let _ = document.body().unwrap().append_child(&test_wrapper);

    // start by rendering our counter and mounting it to the DOM
    // note that we start at the initial value of 10
    let _dispose = mount_to(
        test_wrapper.clone().unchecked_into(),
        || view! { <SimpleCounter initial_value=10 step=1/> },
    );

    // now we extract the buttons by iterating over the DOM
    // this would be easier if they had IDs
    let div = test_wrapper.query_selector("div").unwrap().unwrap();
    let clear = test_wrapper
        .query_selector("button")
        .unwrap()
        .unwrap()
        .unchecked_into::<web_sys::HtmlElement>();

    // now let's click the `clear` button
    clear.click();

    // the reactive system is built on top of the async system, so changes are not reflected
    // synchronously in the DOM
    // in order to detect the changes here, we'll just yield for a brief time after each change,
    // allowing the effects that update the view to run
    tick().await;

    // now let's test the <div> against the expected value
    // we can do this by testing its `outerHTML`
    assert_eq!(div.outer_html(), {
        // it's as if we're creating it with a value of 0, right?
        let (value, _set_value) = signal(0);

        // we can remove the event listeners because they're not rendered to HTML
        view! {
            <div>
                <button>"Clear"</button>
                <button>"-1"</button>
                <span>"Value: " {value} "!"</span>
                <button>"+1"</button>
            </div>
        }
        // Leptos supports multiple backend renderers for HTML elements
        // .into_view() here is just a convenient way of specifying "use the regular DOM renderer"
        .into_view()
        // views are lazy -- they describe a DOM tree but don't create it yet
        // calling .build() will actually build the DOM elements
        .build()
        // .build() returned an ElementState, which is a smart pointer for
        // a DOM element. So we can still just call .outer_html(), which access the outerHTML on
        // the actual DOM element
        .outer_html()
    });

    // There's actually an easier way to do this...
    // We can just test against a <SimpleCounter/> with the initial value 0
    assert_eq!(test_wrapper.inner_html(), {
        let comparison_wrapper = document.create_element("section").unwrap();
        let _dispose = mount_to(
            comparison_wrapper.clone().unchecked_into(),
            || view! { <SimpleCounter initial_value=0 step=1/>},
        );
        comparison_wrapper.inner_html()
    });
}
```

### [Playwright with `counters`](https://github.com/leptos-rs/leptos/tree/main/examples/counters/e2e)

These tests use the common JavaScript testing tool Playwright to run end-to-end tests on the same example, using a library and testing approach familiar to many who have done frontend development before.

#### Sample Test

```js
test.describe("Increment Count", () => {
  test("should increase the total count", async ({ page }) => {
    const ui = new CountersPage(page);
    await ui.goto();
    await ui.addCounter();

    await ui.incrementCount();
    await ui.incrementCount();
    await ui.incrementCount();

    await expect(ui.total).toHaveText("3");
  });
});
```

### [Gherkin/Cucumber Tests with `todo_app_sqlite`](https://github.com/leptos-rs/leptos/blob/main/examples/todo_app_sqlite/e2e/README.md)

You can integrate any testing tool you’d like into this flow. This example uses Cucumber, a testing framework based on natural language.

```
@add_todo
Feature: Add Todo

    Background:
        Given I see the app

    @add_todo-see
    Scenario: Should see the todo
        Given I set the todo as Buy Bread
        When I click the Add button
        Then I see the todo named Buy Bread

    # @allow.skipped
    @add_todo-style
    Scenario: Should see the pending todo
        When I add a todo as Buy Oranges
        Then I see the pending todo
```

The definitions for these actions are defined in Rust code.

```rust
use crate::fixtures::{action, world::AppWorld};
use anyhow::{Ok, Result};
use cucumber::{given, when};

#[given("I see the app")]
#[when("I open the app")]
async fn i_open_the_app(world: &mut AppWorld) -> Result<()> {
    let client = &world.client;
    action::goto_path(client, "").await?;

    Ok(())
}

#[given(regex = "^I add a todo as (.*)$")]
#[when(regex = "^I add a todo as (.*)$")]
async fn i_add_a_todo_titled(world: &mut AppWorld, text: String) -> Result<()> {
    let client = &world.client;
    action::add_todo(client, text.as_str()).await?;

    Ok(())
}

// etc.
```

### Learning More

Feel free to check out the CI setup in the Leptos repo to learn more about how to use these tools in your own application. All of these testing methods are run regularly against actual Leptos example apps.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/testing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/interlude_styling.md
# Interlude: Styling

Anyone creating a website or application soon runs into the question of styling. For a small app, a single CSS file is probably plenty to style your user interface. But as an application grows, many developers find that plain CSS becomes increasingly hard to manage.

Some frontend frameworks (like Angular, Vue, and Svelte) provide built-in ways to scope your CSS to particular components, making it easier to manage styles across a whole application without styles meant to modify one small component having a global effect. Other frameworks (like React or Solid) don’t provide built-in CSS scoping, but rely on libraries in the ecosystem to do it for them. Leptos is in this latter camp: the framework itself has no opinions about CSS at all, but provides a few tools and primitives that allow others to build styling libraries.

Here are a few different approaches to styling your Leptos app, starting with plain CSS.

## Plain CSS

### Client-Side Rendering with Trunk

`trunk` can be used to bundle CSS files and images with your site. To do this, you can add them as Trunk assets by defining them in your `index.html` in the `<head>`. For example, to add a CSS file located at `style.css` you can add the tag `<link data-trunk rel="css" href="./style.css"/>`.

You can find more information in the Trunk documentation for [assets](https://trunkrs.dev/assets/).

### Server-Side Rendering with `cargo-leptos`

The `cargo-leptos` templates are configured by default to use SASS to bundle CSS files and output them at `/pkg/{project_name}.css`. If you want to load additional CSS files, you can do so either by importing them into that `style.scss` file, or by adding them to the `public` directory. (A file at `public/foo.css`, for example, is served at `/foo.css`.)

To load stylesheets in a component, you can use the [`Stylesheet`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Stylesheet.html) component.

## TailwindCSS: Utility-first CSS

[TailwindCSS](https://tailwindcss.com/) is a popular utility-first CSS library. It allows you to style your application by using inline utility classes, with a custom CLI tool that scans your files for Tailwind class names and bundles the necessary CSS.

This allows you to write components like this:

```rust
#[component]
fn Home() -> impl IntoView {
    let (count, set_count) = signal(0);

    view! {
        <main class="my-0 mx-auto max-w-3xl text-center">
            <h2 class="p-6 text-4xl">"Welcome to Leptos with Tailwind"</h2>
            <p class="px-10 pb-10 text-left">"Tailwind will scan your Rust files for Tailwind class names and compile them into a CSS file."</p>
            <button
                class="bg-sky-600 hover:bg-sky-700 px-5 py-3 text-white rounded-lg"
                on:click=move |_| *set_count.write() += 1
            >
                {move || if count.get() == 0 {
                    "Click me!".to_string()
                } else {
                    count.get().to_string()
                }}
            </button>
        </main>
    }
}
```

It can be a little complicated to set up the Tailwind integration at first, but you can check out our two examples of how to use Tailwind with a [client-side-rendered `trunk` application](https://github.com/leptos-rs/leptos/tree/main/examples/tailwind_csr) or with a [server-rendered `cargo-leptos` application](https://github.com/leptos-rs/leptos/tree/main/examples/tailwind_actix). `cargo-leptos` also has some [built-in Tailwind support](https://github.com/leptos-rs/cargo-leptos#site-parameters) that you can use as an alternative to Tailwind’s CLI.

## Stylers: Compile-time CSS Extraction

[Stylers](https://github.com/abishekatp/stylers) is a compile-time scoped CSS library that lets you declare scoped CSS in the body of your component. Stylers will extract this CSS at compile time into CSS files that you can then import into your app, which means that it doesn’t add anything to the WASM binary size of your application.

This allows you to write components like this:

```rust
use stylers::style;

#[component]
pub fn App() -> impl IntoView {
    let styler_class = style! { "App",
        ##two{
            color: blue;
        }
        div.one{
            color: red;
            content: raw_str(r#"\hello"#);
            font: "1.3em/1.2" Arial, Helvetica, sans-serif;
        }
        div {
            border: 1px solid black;
            margin: 25px 50px 75px 100px;
            background-color: lightblue;
        }
        h2 {
            color: purple;
        }
        @media only screen and (max-width: 1000px) {
            h3 {
                background-color: lightblue;
                color: blue
            }
        }
    };

    view! { class = styler_class,
        <div class="one">
            <h1 id="two">"Hello"</h1>
            <h2>"World"</h2>
            <h2>"and"</h2>
            <h3>"friends!"</h3>
        </div>
    }
}
```

## Stylance: Scoped CSS Written in CSS Files

Stylers lets you write CSS inline in your Rust code, extracts it at compile time, and scopes it. [Stylance](https://github.com/basro/stylance-rs) allows you to write your CSS in CSS files alongside your components, import those files into your components, and scope the CSS classes to your components.

This works well with the live-reloading features of `trunk` and `cargo-leptos` because edited CSS files can be updated immediately in the browser.

```rust
import_style!(style, "app.module.scss");

#[component]
fn HomePage() -> impl IntoView {
    view! {
        <div class=style::jumbotron/>
    }
}
```

You can edit the CSS directly without causing a Rust recompile.

```css
.jumbotron {
  background: blue;
}
```

## Contributions Welcome

Leptos has no opinions on how you style your website or app, but we’re very happy to provide support to any tools you’re trying to create to make it easier. If you’re working on a CSS or styling approach that you’d like to add to this list, please let us know!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/interlude_styling.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/metadata.md
# Metadata

So far, everything we’ve rendered has been inside the `<body>` of the HTML document. And this makes sense. After all, everything you can see on a web page lives inside the `<body>`.

However, there are plenty of occasions where you might want to update something inside the `<head>` of the document using the same reactive primitives and component patterns you use for your UI.

That’s where the [`leptos_meta`](https://docs.rs/leptos_meta/latest/leptos_meta/) package comes in.

## Metadata Components

`leptos_meta` provides special components that let you inject data from inside components anywhere in your application into the `<head>`:

[`<Title/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Title.html) allows you to set the document’s title from any component. It also takes a `formatter` function that can be used to apply the same format to the title set by other pages. So, for example, if you put `<Title formatter=|text| format!("{text} — My Awesome Site")/>` in your `<App/>` component, and then `<Title text="Page 1"/>` and `<Title text="Page 2"/>` on your routes, you’ll get `Page 1 — My Awesome Site` and `Page 2 — My Awesome Site`.

[`<Link/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Link.html) injects a `<link>` element into the `<head>`.

[`<Stylesheet/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Stylesheet.html) creates a `<link rel="stylesheet">` with the `href` you give.

[`<Style/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Style.html) creates a `<style>` with the children you pass in (usually a string). You can use this to import some custom CSS from another file at compile time `<Style>{include_str!("my_route.css")}</Style>`.

[`<Meta/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Meta.html) lets you set `<meta>` tags with descriptions and other metadata.

## `<Script/>` and `<script>`

`leptos_meta` also provides a [`<Script/>`](https://docs.rs/leptos_meta/latest/leptos_meta/fn.Script.html) component, and it’s worth pausing here for a second. All of the other components we’ve considered inject `<head>`-only elements in the `<head>`. But a `<script>` can also be included in the body.

There’s a very simple way to determine whether you should use a capital-S `<Script/>` component or a lowercase-s `<script>` element: the `<Script/>` component will be rendered in the `<head>`, and the `<script>` element will be rendered wherever in the `<body>` of your user interface you put it in, alongside other normal HTML elements. These cause JavaScript to load and run at different times, so use whichever is appropriate to your needs.

## `<Body/>` and `<Html/>`

There are even a couple elements designed to make semantic HTML and styling easier. `<Body/>` and `<Html/>` are designed to allow you to add arbitrary attributes to the `<html>` and `<body>` tags on your page. You can add any number of attributes using the usual Leptos syntax after the spread operator (`{..}`) and those will be added directly to the appropriate element.

```rust
<Html
    {..}
    lang="he"
    dir="rtl"
    data-theme="dark"
/>
```

## Metadata and Server Rendering

Now, some of this is useful in any scenario, but some of it is especially important for search-engine optimization (SEO). Making sure you have things like appropriate `<title>` and `<meta>` tags is crucial. Modern search engine crawlers do handle client-side rendering, i.e., apps that are shipped as an empty `index.html` and rendered entirely in JS/WASM. But they prefer to receive pages in which your app has been rendered to actual HTML, with metadata in the `<head>`.

This is exactly what `leptos_meta` is for. And in fact, during server rendering, this is exactly what it does: collect all the `<head>` content you’ve declared by using its components throughout your application, and then inject it into the actual `<head>`.

But I’m getting ahead of myself. We haven’t actually talked about server-side rendering yet. The next chapter will talk about integrating with JavaScript libraries. Then we’ll wrap up the discussion of the client side, and move onto server side rendering.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/metadata.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/islands.md
# Guide: Islands

Leptos 0.5 introduced the new `islands` feature. This guide will walk through the islands feature and core concepts, while implementing a demo app using the islands architecture.

## The Islands Architecture

The dominant JavaScript frontend frameworks (React, Vue, Svelte, Solid, Angular) all originated as frameworks for building client-rendered single-page apps (SPAs). The initial page load is rendered to HTML, then hydrated, and subsequent navigations are handled directly in the client. (Hence “single page”: everything happens from a single page load from the server, even if there is client-side routing later.) Each of these frameworks later added server-side rendering to improve initial load times, SEO, and user experience.

This means that by default, the entire app is interactive. It also means that the entire app has to be shipped to the client as JavaScript in order to be hydrated. Leptos has followed this same pattern.

> You can read more in the chapters on [server-side rendering](./ssr/22_life_cycle.md).

But it’s also possible to work in the opposite direction. Rather than taking an entirely-interactive app, rendering it to HTML on the server, and then hydrating it in the browser, you can begin with a plain HTML page and add small areas of interactivity. This is the traditional format for any website or app before the 2010s: your browser makes a series of requests to the server and returns the HTML for each new page in response. After the rise of “single-page apps” (SPA), this approach has sometimes become known as a “multi-page app” (MPA) by comparison.

The phrase “islands architecture” has emerged recently to describe the approach of beginning with a “sea” of server-rendered HTML pages, and adding “islands” of interactivity throughout the page.

> ### Additional Reading
>
> The rest of this guide will look at how to use islands with Leptos. For more background on the approach in general, check out some of the articles below:
>
> - Jason Miller, [“Islands Architecture”](https://jasonformat.com/islands-architecture/), Jason Miller
> - Ryan Carniato, [“Islands & Server Components & Resumability, Oh My!”](https://dev.to/this-is-learning/islands-server-components-resumability-oh-my-319d)
> - [“Islands Architectures”](https://www.patterns.dev/posts/islands-architecture) on patterns.dev
> - [Astro Islands](https://docs.astro.build/en/concepts/islands/)

## Activating Islands Mode

Let’s start with a fresh `cargo-leptos` app:

```bash
cargo leptos new --git leptos-rs/start-axum
```

> There should be no real differences between Actix and Axum in this example.

I’m just going to run

```bash
cargo leptos build
```

in the background while I fire up my editor and keep writing.

The first thing I’ll do is to add the `islands` feature in my `Cargo.toml`. I only need to add this to the `leptos` crate.

```toml
leptos = { version = "0.7", features = ["islands"] }
```

Next I’m going to modify the `hydrate` function exported from `src/lib.rs`. I’m going to remove the line that calls `leptos::mount::hydrate_body(App)` and replace it with

```rust
leptos::mount::hydrate_islands();
```

Rather than running the whole application and hydrating the view that it creates, this will hydrate each individual island, in order.

In `app.rs`, in the `shell` functions, we’ll also need to add `islands=true` to the `HydrationScripts` component:

```rust
<HydrationScripts options islands=true/>
```

Okay, now fire up your `cargo leptos watch` and go to [`http://localhost:3000`](http://localhost:3000) (or wherever).

Click the button, and...

Nothing happens!

Perfect.

```admonish note
The starter templates include `use app::*;` in their `hydrate()` function definitions. Once you've switched over to islands mode, you are no longer using the imported main `App` function, so you might think you can delete this. (And in fact, Rust lint tools might issue warnings if you don't!)

However, this can cause issues if you are using a workspace setup. We use `wasm-bindgen` to independently export an entrypoint for each function. In my experience, if you are using a workspace setup and nothing in your `frontend` crate actually uses the `app` crate, those bindings will not be generated correctly. [See this discussion for more](https://github.com/leptos-rs/leptos/issues/2083#issuecomment-1868053733).
```

## Using Islands

Nothing happens because we’ve just totally inverted the mental model of our app. Rather than being interactive by default and hydrating everything, the app is now plain HTML by default, and we need to opt into interactivity.

This has a big effect on WASM binary sizes: if I compile in release mode, this app is a measly 24kb of WASM (uncompressed), compared to 274kb in non-islands mode. (274kb is quite large for a “Hello, world!” It’s really just all the code related to client-side routing, which isn’t being used in the demo.)

When we click the button, nothing happens, because our whole page is static.

So how do we make something happen?

Let’s turn the `HomePage` component into an island!

Here was the non-interactive version:

```rust
#[component]
fn HomePage() -> impl IntoView {
    // Creates a reactive value to update the button
    let count = RwSignal::new(0);
    let on_click = move |_| *count.write() += 1;

    view! {
        <h1>"Welcome to Leptos!"</h1>
        <button on:click=on_click>"Click Me: " {count}</button>
    }
}
```

Here’s the interactive version:

```rust
#[island]
fn HomePage() -> impl IntoView {
    // Creates a reactive value to update the button
    let count = RwSignal::new(0);
    let on_click = move |_| *count.write() += 1;

    view! {
        <h1>"Welcome to Leptos!"</h1>
        <button on:click=on_click>"Click Me: " {count}</button>
    }
}
```

Now when I click the button, it works!

The `#[island]` macro works exactly like the `#[component]` macro, except that in islands mode, it designates this as an interactive island. If we check the binary size again, this is 166kb uncompressed in release mode; much larger than the 24kb totally static version, but much smaller than the 355kb fully-hydrated version.

If you open up the source for the page now, you’ll see that your `HomePage` island has been rendered as a special `<leptos-island>` HTML element which specifies which component should be used to hydrate it:

```html
<leptos-island data-component="HomePage_7432294943247405892">
  <h1>Welcome to Leptos!</h1>
  <button>
    Click Me:
    <!>0
  </button>
</leptos-island>
```

Only code for what's inside this `<leptos-island>` is compiled to WASM, only that code runs when hydrating.

## Using Islands Effectively

Remember that _only_ code within an `#[island]` needs to be compiled to WASM and shipped to the browser. This means that islands should be as small and specific as possible. My `HomePage`, for example, would be better broken apart into a regular component and an island:

```rust
#[component]
fn HomePage() -> impl IntoView {
    view! {
        <h1>"Welcome to Leptos!"</h1>
        <Counter/>
    }
}

#[island]
fn Counter() -> impl IntoView {
    // Creates a reactive value to update the button
    let (count, set_count) = signal(0);
    let on_click = move |_| *set_count.write() += 1;

    view! {
        <button on:click=on_click>"Click Me: " {count}</button>
    }
}
```

Now the `<h1>` doesn’t need to be included in the client bundle, or hydrated. This seems like a silly distinction now; but note that you can now add as much inert HTML content as you want to the `HomePage` itself, and the WASM binary size will remain exactly the same.

In regular hydration mode, your WASM binary size grows as a function of the size/complexity of your app. In islands mode, your WASM binary grows as a function of the amount of interactivity in your app. You can add as much non-interactive content as you want, outside islands, and it will not increase that binary size.

## Unlocking Superpowers

So, this 50% reduction in WASM binary size is nice. But really, what’s the point?

The point comes when you combine two key facts:

1. Code inside `#[component]` functions now _only_ runs on the server, unless you use it in an island.\*
2. Children and props can be passed from the server to islands, without being included in the WASM binary.

This means you can run server-only code directly in the body of a component, and pass it directly into the children. Certain tasks that take a complex blend of server functions and Suspense in fully-hydrated apps can be done inline in islands.

> \* This “unless you use it in an island” is important. It is _not_ the case that `#[component]` components only run on the server. Rather, they are “shared components” that are only compiled into the WASM binary if they’re used in the body of an `#[island]`. But if you don’t use them in an island, they won’t run in the browser.

We’re going to rely on a third fact in the rest of this demo:

3. Context can be passed between otherwise-independent islands.

So, instead of our counter demo, let’s make something a little more fun: a tabbed interface that reads data from files on the server.

## Passing Server Children to Islands

One of the most powerful things about islands is that you can pass server-rendered children into an island, without the island needing to know anything about them. Islands hydrate their own content, but not children that are passed to them.

As Dan Abramov of React put it (in the very similar context of RSCs), islands aren’t really islands: they’re donuts. You can pass server-only content directly into the “donut hole,” as it were, allowing you to create tiny atolls of interactivity, surrounded on _both_ sides by the sea of inert server HTML.

> In the demo code included below, I added some styles to show all server content as a light-blue “sea,” and all islands as light-green “land.” Hopefully that will help picture what I’m talking about!

To continue with the demo: I’m going to create a `Tabs` component. Switching between tabs will require some interactivity, so of course this will be an island. Let’s start simple for now:

```rust
#[island]
fn Tabs(labels: Vec<String>) -> impl IntoView {
    let buttons = labels
        .into_iter()
        .map(|label| view! { <button>{label}</button> })
        .collect_view();
    view! {
        <div style="display: flex; width: 100%; justify-content: space-between;">
            {buttons}
        </div>
    }
}
```

Oops. This gives me an error

```
error[E0463]: can't find crate for `serde`
  --> src/app.rs:43:1
   |
43 | #[island]
   | ^^^^^^^^^ can't find crate
```

Easy fix: let’s `cargo add serde --features=derive`. The `#[island]` macro wants to pull in `serde` here because it needs to serialize and deserialize the `labels` prop.

Now let’s update the `HomePage` to use `Tabs`.

```rust
#[component]
fn HomePage() -> impl IntoView {
	// these are the files we’re going to read
    let files = ["a.txt", "b.txt", "c.txt"];
	// the tab labels will just be the file names
	let labels = files.iter().copied().map(Into::into).collect();
    view! {
        <h1>"Welcome to Leptos!"</h1>
        <p>"Click any of the tabs below to read a recipe."</p>
        <Tabs labels/>
    }
}
```

If you take a look in the DOM inspector, you’ll see the island is now something like

```html
<leptos-island
  data-component="Tabs_1030591929019274801"
  data-props='{"labels":["a.txt","b.txt","c.txt"]}'
>
  <div style="display: flex; width: 100%; justify-content: space-between;;">
    <button>a.txt</button>
    <button>b.txt</button>
    <button>c.txt</button>
    <!---->
  </div>
</leptos-island>
```

Our `labels` prop is getting serialized to JSON and stored in an HTML attribute so it can be used to hydrate the island.

Now let’s add some tabs. For the moment, a `Tab` island will be really simple:

```rust
#[island]
fn Tab(index: usize, children: Children) -> impl IntoView {
    view! {
        <div>{children()}</div>
    }
}
```

Each tab, for now will just be a `<div>` wrapping its children.

Our `Tabs` component will also get some children: for now, let’s just show them all.

```rust
#[island]
fn Tabs(labels: Vec<String>, children: Children) -> impl IntoView {
    let buttons = labels
        .into_iter()
        .map(|label| view! { <button>{label}</button> })
        .collect_view();
    view! {
        <div style="display: flex; width: 100%; justify-content: space-around;">
            {buttons}
        </div>
        {children()}
    }
}
```

Okay, now let’s go back into the `HomePage`. We’re going to create the list of tabs to put into our tab box.

```rust
#[component]
fn HomePage() -> impl IntoView {
    let files = ["a.txt", "b.txt", "c.txt"];
    let labels = files.iter().copied().map(Into::into).collect();
	let tabs = move || {
        files
            .into_iter()
            .enumerate()
            .map(|(index, filename)| {
                let content = std::fs::read_to_string(filename).unwrap();
                view! {
                    <Tab index>
                        <h2>{filename.to_string()}</h2>
                        <p>{content}</p>
                    </Tab>
                }
            })
            .collect_view()
    };

    view! {
        <h1>"Welcome to Leptos!"</h1>
        <p>"Click any of the tabs below to read a recipe."</p>
        <Tabs labels>
            <div>{tabs()}</div>
        </Tabs>
    }
}
```

Uh... What?

If you’re used to using Leptos, you know that you just can’t do this. All code in the body of components has to run on the server (to be rendered to HTML) and in the browser (to hydrate), so you can’t just call `std::fs`; it will panic, because there’s no access to the local filesystem (and certainly not to the server filesystem!) in the browser. This would be a security nightmare!

Except... wait. We’re in islands mode. This `HomePage` component _really does_ only run on the server. So we can, in fact, just use ordinary server code like this.

> **Is this a dumb example?** Yes! Synchronously reading from three different local files in a `.map()` is not a good choice in real life. The point here is just to demonstrate that this is, definitely, server-only content.

Go ahead and create three files in the root of the project called `a.txt`, `b.txt`, and `c.txt`, and fill them in with whatever content you’d like.

Refresh the page and you should see the content in the browser. Edit the files and refresh again; it will be updated.

You can pass server-only content from a `#[component]` into the children of an `#[island]`, without the island needing to know anything about how to access that data or render that content.

**This is really important.** Passing server `children` to islands means that you can keep islands small. Ideally, you don’t want to slap an `#[island]` around a whole chunk of your page. You want to break that chunk out into an interactive piece, which can be an `#[island]`, and a bunch of additional server content that can be passed to that island as `children`, so that the non-interactive subsections of an interactive part of the page can be kept out of the WASM binary.

## Passing Context Between Islands

These aren’t really “tabs” yet: they just show every tab, all the time. So let’s add some simple logic to our `Tabs` and `Tab` components.

We’ll modify `Tabs` to create a simple `selected` signal. We provide the read half via context, and set the value of the signal whenever someone clicks one of our buttons.

```rust
#[island]
fn Tabs(labels: Vec<String>, children: Children) -> impl IntoView {
    let (selected, set_selected) = signal(0);
    provide_context(selected);

    let buttons = labels
        .into_iter()
        .enumerate()
        .map(|(index, label)| view! {
            <button on:click=move |_| set_selected.set(index)>
                {label}
            </button>
        })
        .collect_view();
// ...
```

And let’s modify the `Tab` island to use that context to show or hide itself:

```rust
#[island]
fn Tab(index: usize, children: Children) -> impl IntoView {
    let selected = expect_context::<ReadSignal<usize>>();
    view! {
        <div
            style:background-color="lightgreen"
            style:padding="10px"
            style:display=move || if selected.get() == index {
                "block"
            } else {
                "none"
            }
        >
            {children()}
        </div>
    }
}
```

Now the tabs behave exactly as I’d expect. `Tabs` passes the signal via context to each `Tab`, which uses it to determine whether it should be open or not.

> That’s why in `HomePage`, I made `let tabs = move ||` a function, and called it like `{tabs()}`: creating the tabs lazily this way meant that the `Tabs` island would already have provided the `selected` context by the time each `Tab` went looking for it.

Our complete tabs demo is about 200kb uncompressed: not the smallest demo in the world, but still significantly smaller than the “Hello, world” using client side routing that we started with! Just for kicks, I built the same demo without islands mode, using `#[server]` functions and `Suspense`. and it was over 400kb. So again, this was about a 50% savings in binary size. And this app includes quite minimal server-only content: remember that as we add additional server-only components and pages, this 200kb will not grow.

## Overview

This demo may seem pretty basic. It is. But there are a number of immediate takeaways:

- **50% WASM binary size reduction**, which means measurable improvements in time to interactivity and initial load times for clients.
- **Reduced data serialization costs.** Creating a resource and reading it on the client means you need to serialize the data, so it can be used for hydration. If you’ve also read that data to create HTML in a `Suspense`, you end up with “double data,” i.e., the same exact data is both rendered to HTML and serialized as JSON, increasing the size of responses, and therefore slowing them down.
- **Easily use server-only APIs** inside a `#[component]` as if it were a normal, native Rust function running on the server—which, in islands mode, it is!
- **Reduced `#[server]`/`create_resource`/`Suspense` boilerplate** for loading server data.

## Future Exploration

The `islands` feature reflects work at the cutting edge of what frontend web frameworks are exploring right now. As it stands, our islands approach is very similar to Astro (before its recent View Transitions support): it allows you to build a traditional server-rendered, multi-page app and pretty seamlessly integrate islands of interactivity.

There are some small improvements that will be easy to add. For example, we can do something very much like Astro's View Transitions approach:

- add client-side routing for islands apps by fetching subsequent navigations from the server and replacing the HTML document with the new one
- add animated transitions between the old and new document using the View Transitions API
- support explicit persistent islands, i.e., islands that you can mark with unique IDs (something like `persist:searchbar` on the component in the view), which can be copied over from the old to the new document without losing their current state

There are other, larger architectural changes that I’m [not sold on yet](https://github.com/leptos-rs/leptos/issues/1830).

## Additional Information

Check out the [`islands` example](https://github.com/leptos-rs/leptos/blob/main/examples/islands/src/app.rs), [roadmap](https://github.com/leptos-rs/leptos/issues/1830), and [Hackernews demo](https://github.com/leptos-rs/leptos/tree/leptos_0.6/examples/hackernews_islands_axum) for additional discussion.

## Demo Code

```rust
use leptos::prelude::*;

#[component]
pub fn App() -> impl IntoView {
    view! {
        <main style="background-color: lightblue; padding: 10px">
            <HomePage/>
        </main>
    }
}

/// Renders the home page of your application.
#[component]
fn HomePage() -> impl IntoView {
    let files = ["a.txt", "b.txt", "c.txt"];
    let labels = files.iter().copied().map(Into::into).collect();
    let tabs = move || {
        files
            .into_iter()
            .enumerate()
            .map(|(index, filename)| {
                let content = std::fs::read_to_string(filename).unwrap();
                view! {
                    <Tab index>
                        <div style="background-color: lightblue; padding: 10px">
                            <h2>{filename.to_string()}</h2>
                            <p>{content}</p>
                        </div>
                    </Tab>
                }
            })
            .collect_view()
    };

    view! {
        <h1>"Welcome to Leptos!"</h1>
        <p>"Click any of the tabs below to read a recipe."</p>
        <Tabs labels>
            <div>{tabs()}</div>
        </Tabs>
    }
}

#[island]
fn Tabs(labels: Vec<String>, children: Children) -> impl IntoView {
    let (selected, set_selected) = signal(0);
    provide_context(selected);

    let buttons = labels
        .into_iter()
        .enumerate()
        .map(|(index, label)| {
            view! {
                <button on:click=move |_| set_selected.set(index)>
                    {label}
                </button>
            }
        })
        .collect_view();
    view! {
        <div
            style="display: flex; width: 100%; justify-content: space-around;\
            background-color: lightgreen; padding: 10px;"
        >
            {buttons}
        </div>
        {children()}
    }
}

#[island]
fn Tab(index: usize, children: Children) -> impl IntoView {
    let selected = expect_context::<ReadSignal<usize>>();
    view! {
        <div
            style:background-color="lightgreen"
            style:padding="10px"
            style:display=move || if selected.get() == index {
                "block"
            } else {
                "none"
            }
        >
            {children()}
        </div>
    }
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/islands.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/15_global_state.md
# Global State Management

So far, we've only been working with local state in components, and we’ve seen how to coordinate state between parent and child components. On occasion, there are times when people look for a more general solution for global state management that can work throughout an application.

In general, **you do not need this chapter.** The typical pattern is to compose your application out of components, each of which manages its own local state, not to store all state in a global structure. However, there are some cases (like theming, saving user settings, or sharing data between components in different parts of your UI) in which you may want to use some kind of global state management.

The three best approaches to global state are

1. Using the router to drive global state via the URL
2. Passing signals through context
3. Creating a global state struct using stores

## Option #1: URL as Global State

In many ways, the URL is actually the best way to store global state. It can be accessed from any component, anywhere in your tree. There are native HTML elements like `<form>` and `<a>` that exist solely to update the URL. And it persists across page reloads and between devices; you can share a URL with a friend or send it from your phone to your laptop and any state stored in it will be replicated.

The next few sections of the tutorial will be about the router, and we’ll get much more into these topics.

But for now, we'll just look at options #2 and #3.

## Option #2: Passing Signals through Context

In the section on [parent-child communication](view/08_parent_child.md), we saw that you can use `provide_context` to pass signal from a parent component to a child, and `use_context` to read it in the child. But `provide_context` works across any distance. If you want to create a global signal that holds some piece of state, you can provide it and access it via context anywhere in the descendants of the component where you provide it.

A signal provided via context only causes reactive updates where it is read, not in any of the components in between, so it maintains the power of fine-grained reactive updates, even at a distance.

We start by creating a signal in the root of the app and providing it to
all its children and descendants using `provide_context`.

```rust
#[component]
fn App() -> impl IntoView {
    // here we create a signal in the root that can be consumed
    // anywhere in the app.
    let (count, set_count) = signal(0);
    // we'll pass the setter to specific components,
    // but provide the count itself to the whole app via context
    provide_context(count);

    view! {
        // SetterButton is allowed to modify the count
        <SetterButton set_count/>
        // These consumers can only read from it
        // But we could give them write access by passing `set_count` if we wanted
        <FancyMath/>
        <ListItems/>
    }
}
```

`<SetterButton/>` is the kind of counter we’ve written several times now.

`<FancyMath/>` and `<ListItems/>` both consume the signal we’re providing via
`use_context` and do something with it.

```rust
/// A component that does some "fancy" math with the global count
#[component]
fn FancyMath() -> impl IntoView {
    // here we consume the global count signal with `use_context`
    let count = use_context::<ReadSignal<u32>>()
        // we know we just provided this in the parent component
        .expect("there to be a `count` signal provided");
    let is_even = move || count.get() & 1 == 0;

    view! {
        <div class="consumer blue">
            "The number "
            <strong>{count}</strong>
            {move || if is_even() {
                " is"
            } else {
                " is not"
            }}
            " even."
        </div>
    }
}
```

## Option #3: Create a Global State Store

> Some of this content is duplicated from the section on complex iteration with stores [here](../view/04b_iteration.md#option-4-stores). Both sections are intermediate/optional content, so I thought some duplication couldn’t hurt.

Stores are a new reactive primitive, available in Leptos 0.7 through the accompanying `reactive_stores` crate. (This crate is shipped separately for now so we can continue to develop it without requiring a version change to the whole framework.)

Stores allow you to wrap an entire struct, and reactively read from and update individual fields without tracking changes to other fields.

They are used by adding `#[derive(Store)]` onto a struct. (You can `use reactive_stores::Store;` to import the macro.) This creates an extension trait with a getter for each field of the struct, when the struct is wrapped in a `Store<_>`.

```rust
#[derive(Clone, Debug, Default, Store)]
struct GlobalState {
    count: i32,
    name: String,
}
```

This creates a trait named `GlobalStateStoreFields` which adds with methods `count` and `name` to a `Store<GlobalState>`. Each method returns a reactive store *field*.

```rust
#[component]
fn App() -> impl IntoView {
    provide_context(Store::new(GlobalState::default()));

    // etc.
}

/// A component that updates the count in the global state.
#[component]
fn GlobalStateCounter() -> impl IntoView {
    let state = expect_context::<Store<GlobalState>>();

    // this gives us reactive access to the `count` field only
    let count = state.count();

    view! {
        <div class="consumer blue">
            <button
                on:click=move |_| {
                    *count.write() += 1;
                }
            >
                "Increment Global Count"
            </button>
            <br/>
            <span>"Count is: " {move || count.get()}</span>
        </div>
    }
}
```

Clicking this button only updates `state.count`. If we read from `state.name` somewhere else, 
click the button won’t notify it. This allows you to combine the benefits of a top-down
data flow and of fine-grained reactive updates.

Check out the [`stores` example](https://github.com/leptos-rs/leptos/blob/main/examples/stores/src/lib.rs) in the repo for a more extensive example.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/15_global_state.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/web_sys.md
# Integrating with JavaScript: `wasm-bindgen`, `web_sys` and `HtmlElement`

Leptos provides a variety of tools to allow you to build declarative web applications without leaving the world
of the framework. Things like the reactive system, `component` and `view` macros, and router allow you to build
user interfaces without directly interacting with the Web APIs provided by the browser. And they let you do it
all directly in Rust, which is great—assuming you like Rust. (And if you’ve gotten this far in the book, we assume
you like Rust.)

Ecosystem crates like the fantastic set of utilities provided by [`leptos-use`](https://leptos-use.rs/) can take you
even further, by providing Leptos-specific reactive wrappers around many Web APIs.

Nevertheless, in many cases you will need to access JavaScript libraries or Web APIs directly. This chapter can help.

## Using JS Libraries with `wasm-bindgen`

Your Rust code can be compiled to a WebAssembly (WASM) module and loaded to run in the browser. However, WASM does not
have direct access to browser APIs. Instead, the Rust/WASM ecosystem depends on generating bindings from your Rust code
to the JavaScript browser environment that hosts it.

The [`wasm-bindgen`](https://rustwasm.github.io/docs/wasm-bindgen/) crate is at the center of that ecosystem. It provides
both an interface for marking parts of Rust code with annotations telling it how to call JS, and a CLI tool for generating
the necessary JS glue code. You’ve been using this without knowing it all along: both `trunk` and `cargo-leptos` rely on
`wasm-bindgen` under the hood.

If there is a JavaScript library that you want to call from Rust, you should refer to the `wasm-bindgen` docs on
[importing functions from JS](https://rustwasm.github.io/docs/wasm-bindgen/examples/import-js.html). It is relatively
easy to import individual functions, classes, or values from JavaScript to use in your Rust app.

It is not always easy to integrate JS libraries into your app directly. In particular, any library that depends on a
particular JS framework like React may be hard to integrate. Libraries that manipulate DOM state in some way (for example,
rich text editors) should also be used with care: both Leptos and the JS library will probably assume that they are
the ultimate source of truth for the app’s state, so you should be careful to separate their responsibilities.

## Accessing Web APIs with `web-sys`

If you just need to access some browser APIs without pulling in a separate JS library, you can do so using the
[`web_sys`](https://docs.rs/web-sys/latest/web_sys/) crate. This provides bindings for all of the Web APIs provided by
the browser, with 1:1 mappings from browser types and functions to Rust structs and methods.

In general, if you’re asking “how do I _do X_ with Leptos?” where _do X_ is accessing some Web API, looking up a vanilla
JavaScript solution and translating it to Rust using the [`web-sys` docs](https://docs.rs/web-sys/latest/web_sys/) is a
good approach.

> After this section, you might find
> [the `wasm-bindgen` guide chapter on `web-sys`](https://rustwasm.github.io/docs/wasm-bindgen/web-sys/index.html)
> useful for additional reading.

### Enabling features

`web_sys` is heavily feature-gated to keep compile times low. If you would like to use one of its many APIs, you may
need to enable a feature to use it.

The features required to use an item are always listed in its documentation.
For example, to use [`Element::get_bounding_rect_client`](https://docs.rs/web-sys/latest/web_sys/struct.Element.html#method.get_bounding_client_rect), you need to enable the `DomRect` and `Element` features.

Leptos already enables [a whole bunch](https://github.com/leptos-rs/leptos/blob/main/leptos_dom/Cargo.toml#L41) of features - if the required feature is already enabled here, you won't have to enable it in your own app.
Otherwise, add it to your `Cargo.toml` and you’re good to go!

```toml
[dependencies.web-sys]
version = "0.3"
features = ["DomRect"]
```

However, as the JavaScript standard evolves and APIs are being written, you may want to use browser features that are technically not fully stable yet, such as [WebGPU](https://docs.rs/web-sys/latest/web_sys/struct.Gpu.html).
`web_sys` will follow the (potentially frequently changing) standard, which means that no stability guarantees are made.

In order to use this, you need to add `RUSTFLAGS=--cfg=web_sys_unstable_apis` as an environment variable.
This can either be done by adding it to every command, or add it to `.cargo/config.toml` in your repository.

As part of a command:

```sh
RUSTFLAGS=--cfg=web_sys_unstable_apis cargo # ...
```

In `.cargo/config.toml`:

```toml
[env]
RUSTFLAGS = "--cfg=web_sys_unstable_apis"
```

## Accessing raw `HtmlElement`s from your `view`

The declarative style of the framework means that you don’t need to directly manipulate DOM nodes to build up your user interface.
However, in some cases you want direct access to the underlying DOM element that represents part of your view. The section of the book
on [“uncontrolled inputs”](/view/05_forms.html?highlight=NodeRef#uncontrolled-inputs) showed how to do this using the
[`NodeRef`](https://docs.rs/leptos/latest/leptos/tachys/reactive_graph/node_ref/struct.NodeRef.html) type.

`NodeRef::get` returns a correctly-typed
`web-sys` element that can be directly manipulated.

For example, consider the following:

```rust
#[component]
pub fn App() -> impl IntoView {
    let node_ref = NodeRef::<Input>::new();

    Effect::new(move |_| {
        if let Some(node) = node_ref.get() {
            leptos::logging::log!("value = {}", node.value());
        }
    });

    view! {
        <input node_ref=node_ref/>
    }
}
```

Inside the effect here, `node` is simply a `web_sys::HtmlInputElement`. This allows us to call any appropriate methods.

(Note that `.get()` returns an `Option` here, because the `NodeRef` is empty until it is filled when the DOM elements are actually created. Effects run a tick after the component runs, so in most cases the `<input>` will already have been created by the time the effect runs.)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/web_sys.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/appendix_reactive_graph.md
# Appendix: How does the Reactive System Work?

You don’t need to know very much about how the reactive system actually works in order to use the library successfully. But it’s always useful to understand what’s going on behind the scenes once you start working with the framework at an advanced level.

The reactive primitives you use are divided into three sets:

- **Signals** (`ReadSignal`/`WriteSignal`, `RwSignal`, `Resource`, `Trigger`) Values you can actively change to trigger reactive updates.
- **Computations** (`Memo`) Values that depend on signals (or other computations) and derive a new reactive value through some pure computation.
- **Effects** Observers that listen to changes in some signals or computations and run a function, causing some side effect.

Derived signals are a kind of non-primitive computation: as plain closures, they simply allow you to refactor some repeated signal-based computation into a reusable function that can be called in multiple places, but they are not represented in the reactive system itself.

All the other primitives actually exist in the reactive system as nodes in a reactive graph.

Most of the work of the reactive system consists of propagating changes from signals to effects, possibly through some intervening memos.

The assumption of the reactive system is that effects (like rendering to the DOM or making a network request) are orders of magnitude more expensive than things like updating a Rust data structure inside your app.

So the **primary goal** of the reactive system is to **run effects as infrequently as possible**.

Leptos does this through the construction of a reactive graph.

> Leptos’s current reactive system is based heavily on the [Reactively](https://github.com/modderme123/reactively) library for JavaScript. You can read Milo’s article “[Super-Charging Fine-Grained Reactivity](https://dev.to/modderme123/super-charging-fine-grained-reactive-performance-47ph)” for an excellent account of its algorithm, as well as fine-grained reactivity in general—including some beautiful diagrams!

## The Reactive Graph

Signals, memos, and effects all share three characteristics:

- **Value** They have a current value: either the signal’s value, or (for memos and effects) the value returned by the previous run, if any.
- **Sources** Any other reactive primitives they depend on. (For signals, this is an empty set.)
- **Subscribers** Any other reactive primitives that depend on them. (For effects, this is an empty set.)

In reality then, signals, memos, and effects are just conventional names for one generic concept of a “node” in a reactive graph. Signals are always “root nodes,” with no sources/parents. Effects are always “leaf nodes,” with no subscribers. Memos typically have both sources and subscribers.

> In the following examples, I’m going to use the `nightly` syntax, simply for the sake of reducing verbosity in a document that’s intended for you to read, not to copy-and-paste from!

### Simple Dependencies

So imagine the following code:

```rust
// A
let (name, set_name) = signal("Alice");

// B
let name_upper = Memo::new(move |_| name.with(|n| n.to_uppercase()));

// C
Effect::new(move |_| {
	log!("{}", name_upper());
});

set_name("Bob");
```


You can easily imagine the reactive graph here: `name` is the only signal/origin node, the `Effect::new` is the only effect/terminal node, and there’s one intervening memo.

```
A   (name)
|
B   (name_upper)
|
C   (the effect)
```

### Splitting Branches

Let’s make it a little more complex.

```rust
// A
let (name, set_name) = signal("Alice");

// B
let name_upper = Memo::new(move |_| name.with(|n| n.to_uppercase()));

// C
let name_len = Memo::new(move |_| name.len());

// D
Effect::new(move |_| {
	log!("len = {}", name_len());
});

// E
Effect::new(move |_| {
	log!("name = {}", name_upper());
});
```

This is also pretty straightforward: a signal source signal (`name`/`A`) divides into two parallel tracks: `name_upper`/`B` and `name_len`/`C`, each of which has an effect that depends on it.

```
 __A__
|     |
B     C
|     |
E     D
```

Now let’s update the signal.

```rust
set_name("Bob");
```

We immediately log

```
len = 3
name = BOB
```

Let’s do it again.

```rust
set_name("Tim");
```

The log should shows

```
name = TIM
```

`len = 3` does not log again.

Remember: the goal of the reactive system is to run effects as infrequently as possible. Changing `name` from `"Bob"` to `"Tim"` will cause each of the memos to re-run. But they will only notify their subscribers if their value has actually changed. `"BOB"` and `"TIM"` are different, so that effect runs again. But both names have the length `3`, so they do not run again.

### Reuniting Branches

One more example, of what’s sometimes called **the diamond problem**.

```rust
// A
let (name, set_name) = signal("Alice");

// B
let name_upper = Memo::new(move |_| name.with(|n| n.to_uppercase()));

// C
let name_len = Memo::new(move |_| name.len());

// D
Effect::new(move |_| {
	log!("{} is {} characters long", name_upper(), name_len());
});
```

What does the graph look like for this?

```
 __A__
|     |
B     C
|     |
|__D__|
```

You can see why it's called the “diamond problem.” If I’d connected the nodes with straight lines instead of bad ASCII art, it would form a diamond: two memos, each of which depend on a signal, which feed into the same effect.

A naive, push-based reactive implementation would cause this effect to run twice, which would be bad. (Remember, our goal is to run effects as infrequently as we can.) For example, you could implement a reactive system such that signals and memos immediately propagate their changes all the way down the graph, through each dependency, essentially traversing the graph depth-first. In other words, updating `A` would notify `B`, which would notify `D`; then `A` would notify `C`, which would notify `D` again. This is both inefficient (`D` runs twice) and glitchy (`D` actually runs with the incorrect value for the second memo during its first run.)

## Solving the Diamond Problem

Any reactive implementation worth its salt is dedicated to solving this issue. There are a number of different approaches (again, [see Milo’s article](https://dev.to/modderme123/super-charging-fine-grained-reactive-performance-47ph) for an excellent overview).

Here’s how ours works, in brief.

A reactive node is always in one of three states:

- `Clean`: it is known not to have changed
- `Check`: it is possible it has changed
- `Dirty`: it has definitely changed

Updating a signal `Dirty` marks that signal `Dirty`, and marks all its descendants `Check`, recursively. Any of its descendants that are effects are added to a queue to be re-run.

```
    ____A (DIRTY)___
   |               |
B (CHECK)    C (CHECK)
   |               |
   |____D (CHECK)__|
```

Now those effects are run. (All of the effects will be marked `Check` at this point.) Before re-running its computation, the effect checks its parents to see if they are dirty.

- So `D` goes to `B` and checks if it is `Dirty`.
- But `B` is also marked `Check`. So `B` does the same thing:
  - `B` goes to `A`, and finds that it is `Dirty`.
  - This means `B` needs to re-run, because one of its sources has changed.
  - `B` re-runs, generating a new value, and marks itself `Clean`
  - Because `B` is a memo, it then checks its prior value against the new value.
  - If they are the same, `B` returns "no change." Otherwise, it returns "yes, I changed."
- If `B` returned “yes, I changed,” `D` knows that it definitely needs to run and re-runs immediately before checking any other sources.
- If `B` returned “no, I didn’t change,” `D` continues on to check `C` (see process above for `B`.)
- If neither `B` nor `C` has changed, the effect does not need to re-run.
- If either `B` or `C` did change, the effect now re-runs.

Because the effect is only marked `Check` once and only queued once, it only runs once.

If the naive version was a “push-based” reactive system, simply pushing reactive changes all the way down the graph and therefore running the effect twice, this version could be called “push-pull.” It pushes the `Check` status all the way down the graph, but then “pulls” its way back up. In fact, for large graphs it may end up bouncing back up and down and left and right on the graph as it tries to determine exactly which nodes need to re-run.

**Note this important trade-off**: Push-based reactivity propagates signal changes more quickly, at the expense of over-re-running memos and effects. Remember: the reactive system is designed to minimize how often you re-run effects, on the (accurate) assumption that side effects are orders of magnitude more expensive than this kind of cache-friendly graph traversal happening entirely inside the library’s Rust code. The measurement of a good reactive system is not how quickly it propagates changes, but how quickly it propagates changes _without over-notifying_.

## Memos vs. Signals

Note that signals always notify their children; i.e., a signal is always marked `Dirty` when it updates, even if its new value is the same as the old value. Otherwise, we’d have to require `PartialEq` on signals, and this is actually quite an expensive check on some types. (For example, add an unnecessary equality check to something like `some_vec_signal.update(|n| n.pop())` when it’s clear that it has in fact changed.)

Memos, on the other hand, check whether they change before notifying their children. They only run their calculation once, no matter how many times you `.get()` the result, but they run whenever their signal sources change. This means that if the memo’s computation is _very_ expensive, you may actually want to memoize its inputs as well, so that the memo only re-calculates when it is sure its inputs have changed.

## Memos vs. Derived Signals

All of this is cool, and memos are pretty great. But most actual applications have reactive graphs that are quite shallow and quite wide: you might have 100 source signals and 500 effects, but no memos or, in rare case, three or four memos between the signal and the effect. Memos are extremely good at what they do: limiting how often they notify their subscribers that they have changed. But as this description of the reactive system should show, they come with overhead in two forms:

1. A `PartialEq` check, which may or may not be expensive.
2. Added memory cost of storing another node in the reactive system.
3. Added computational cost of reactive graph traversal.

In cases in which the computation itself is cheaper than this reactive work, you should avoid “over-wrapping” with memos and simply use derived signals. Here’s a great example in which you should never use a memo:

```rust
let (a, set_a) = signal(1);
// none of these make sense as memos
let b = move || a() + 2;
let c = move || b() % 2 == 0;
let d = move || if c() { "even" } else { "odd" };

set_a(2);
set_a(3);
set_a(5);
```

Even though memoizing would technically save an extra calculation of `d` between setting `a` to `3` and `5`, these calculations are themselves cheaper than the reactive algorithm.

At the very most, you might consider memoizing the final node before running some expensive side effect:

```rust
let text = Memo::new(move |_| {
    d()
});
Effect::new(move |_| {
    engrave_text_into_bar_of_gold(&text());
});
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/appendix_reactive_graph.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/async/10_resources.md
# Loading Data with Resources

Resources are reactive wrappers for asynchronous tasks, which allow you to integrate an asynchronous `Future` into the synchronous reactive system. 

They effectively allow you to load some async data, and then reactively access it either synchronously or asynchronously. You can `.await` a resource like an ordinary `Future`, and this will track it. But you can also access a resource with `.get()` and other signal access methods, as if a resource were a signal that returns `Some(T)` if it has resolved, and `None` if it’s still pending.

Resources come in two primary flavors: `Resource` and `LocalResource`. If you’re using server-side rendering (which this book will discuss later), you should default to using `Resource`. If you’re using client-side rendering with a `!Send` API (like many of the browser APIs), or if you are using SSR but have some async task that can only be done on the browser (for example, accessing an async browser API) then you should use `LocalResource`.

## Local Resources

`LocalResource::new()` takes a single argument: a “fetcher” function that returns a `Future`.

The `Future` can be an `async` block, the result of an `async fn` call, or any other Rust `Future`. The function will work like a derived signal or the other reactive closures that we’ve seen so far: you can read signals inside it, and whenever the signal changes, the function will run again, creating a new `Future` to run.

```rust
// this count is our synchronous, local state
let (count, set_count) = signal(0);

// tracks `count`, and reloads by calling `load_data`
// whenever it changes
let async_data = LocalResource::new(move || load_data(count.get()));
```

Creating a resource immediately calls its fetcher and begins polling the `Future`. Reading from a resource will return `None` until the async task completes, at which point it will notify its subscribers, and now have `Some(value)`.

You can also `.await` a resource. This might seem pointless—Why would you create a wrapper around a `Future`, only to then `.await` it? We’ll see why in the next chapter.

## Resources

If you’re using SSR, you should be using `Resource` instead of `LocalResource` in most cases.

This API is slightly different. `Resource::new()` takes two functions as its arguments:

1. a source function, which contains the “input.” This input is memoized, and whenever its value changes, the fetcher will be called.
2. a fetcher function, which takes the data from the source function and returns a `Future`

Unlike a `LocalResource`, a `Resource` serializes its value from the server to the client. Then, on the client, when first loading the page, the initial value will be deserialized rather than the async task running again. This is extremely important and very useful: It means that rather than waiting for the client WASM bundle to load and begin running the application, data loading begins on the server. (There will be more to say about this in later chapters.)

This is also why the API is split into two parts: signals in the *source* function are tracked, but signals in the *fetcher* are untracked, because this allows the resource to maintain reactivity without needing to run the fetcher again during initial hydration on the client.

Here’s the same example, using `Resource` instead of `LocalResource`

```rust
// this count is our synchronous, local state
let (count, set_count) = signal(0);

// our resource
let async_data = Resource::new(
    move || count.get(),
    // every time `count` changes, this will run
    |count| load_data(count) 
);
```

Resources also provide a `refetch()` method that allows you to manually reload the data (for example, in response to a button click). 

To create a resource that simply runs once, you can use `OnceResource`, which simply takes a `Future`, and adds some optimizations that come from knowing it will only load once.

```rust
let once = OnceResource::new(load_data(42));
```

## Accessing Resources

Both `LocalResource` and `Resource` implement the various signal access methods (`.read()`, `.with()`, `.get()`), but return `Option<T>` instead of `T`; they will be `None` until the async data has loaded.

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/10-resource-0-7-q5xr9m?file=%2Fsrc%2Fmain.rs%3A7%2C30)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/10-resource-0-7-q5xr9m?file=%2Fsrc%2Fmain.rs%3A7%2C30" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use gloo_timers::future::TimeoutFuture;
use leptos::prelude::*;

// Here we define an async function
// This could be anything: a network request, database read, etc.
// Here, we just multiply a number by 10
async fn load_data(value: i32) -> i32 {
    // fake a one-second delay
    TimeoutFuture::new(1_000).await;
    value * 10
}

#[component]
pub fn App() -> impl IntoView {
    // this count is our synchronous, local state
    let (count, set_count) = signal(0);

    // tracks `count`, and reloads by calling `load_data`
    // whenever it changes
    let async_data = LocalResource::new(move || load_data(count.get()));

    // a resource will only load once if it doesn't read any reactive data
    let stable = LocalResource::new(|| load_data(1));

    // we can access the resource values with .get()
    // this will reactively return None before the Future has resolved
    // and update to Some(T) when it has resolved
    let async_result = move || {
        async_data
            .get()
            .map(|value| format!("Server returned {value:?}"))
            // This loading state will only show before the first load
            .unwrap_or_else(|| "Loading...".into())
    };

    view! {
        <button
            on:click=move |_| *set_count.write() += 1
        >
            "Click me"
        </button>
        <p>
            <code>"stable"</code>": " {move || stable.get()}
        </p>
        <p>
            <code>"count"</code>": " {count}
        </p>
        <p>
            <code>"async_value"</code>": "
            {async_result}
            <br/>
        </p>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/async/10_resources.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/async/README.md
# Working with `async`

So far we’ve only been working with synchronous user interfaces: You provide some input,
the app immediately processes it and updates the interface. This is great, but is a tiny
subset of what web applications do. In particular, most web apps have to deal with some kind of asynchronous data loading, usually loading something from an API.

Asynchronous data is notoriously hard to integrate with the synchronous parts of your code because of problems of “function coloring.”

In the following chapters, we’ll see a few reactive primitives for working with async data. But it’s important to note at the very beginning: If you just want to do some asynchronous work, Leptos provides a cross-platform [`spawn_local`](https://docs.rs/leptos/latest/leptos/task/fn.spawn_local.html) function that makes it easy to run a `Future`. If one of the primitives discussed in the rest of this section doesn’t seem to do what you want, consider combining `spawn_local` with setting a signal.

While the primitives to come are very useful, and even necessary in some cases, people sometimes run into situations in which they really just need to spawn a task and wait for it to finish before doing something else. Use `spawn_local` in those situations!

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/async/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/async/12_transition.md
# `<Transition/>`

You’ll notice in the `<Suspense/>` example that if you keep reloading the data, it keeps flickering back to `"Loading..."`. Sometimes this is fine. For other times, there’s [`<Transition/>`](https://docs.rs/leptos/latest/leptos/suspense/fn.Transition.html).

`<Transition/>` behaves exactly the same as `<Suspense/>`, but instead of falling back every time, it only shows the fallback the first time. On all subsequent loads, it continues showing the old data until the new data are ready. This can be really handy to prevent the flickering effect, and to allow users to continue interacting with your application.

This example shows how you can create a simple tabbed contact list with `<Transition/>`. When you select a new tab, it continues showing the current contact until the new data loads. This can be a much better user experience than constantly falling back to a loading message.

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/12-transition-0-7-ln2hgd?file=%2Fsrc%2Fmain.rs%3A1%2C1-69%2C1&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/12-transition-0-7-ln2hgd?file=%2Fsrc%2Fmain.rs%3A1%2C1-69%2C1&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use gloo_timers::future::TimeoutFuture;
use leptos::prelude::*;

async fn important_api_call(id: usize) -> String {
    TimeoutFuture::new(1_000).await;
    match id {
        0 => "Alice",
        1 => "Bob",
        2 => "Carol",
        _ => "User not found",
    }
    .to_string()
}

#[component]
fn App() -> impl IntoView {
    let (tab, set_tab) = signal(0);
    let (pending, set_pending) = signal(false);

    // this will reload every time `tab` changes
    let user_data = LocalResource::new(move || important_api_call(tab.get()));

    view! {
        <div class="buttons">
            <button
                on:click=move |_| set_tab.set(0)
                class:selected=move || tab.get() == 0
            >
                "Tab A"
            </button>
            <button
                on:click=move |_| set_tab.set(1)
                class:selected=move || tab.get() == 1
            >
                "Tab B"
            </button>
            <button
                on:click=move |_| set_tab.set(2)
                class:selected=move || tab.get() == 2
            >
                "Tab C"
            </button>
        </div>
        <p>
            {move || if pending.get() {
                "Hang on..."
            } else {
                "Ready."
            }}
        </p>
        <Transition
            // the fallback will show initially
            // on subsequent reloads, the current child will
            // continue showing
            fallback=move || view! { <p>"Loading initial data..."</p> }
            // this will be set to `true` whenever the transition is ongoing
            set_pending
        >
            <p>
                {move || user_data.read().as_deref().map(ToString::to_string)}
            </p>
        </Transition>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/async/12_transition.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/async/13_actions.md
# Mutating Data with Actions

We’ve talked about how to load `async` data with resources. Resources immediately load data and work closely with `<Suspense/>` and `<Transition/>` components to show whether data is loading in your app. But what if you just want to call some arbitrary `async` function and keep track of what it’s doing?

Well, you could always use [`spawn_local`](https://docs.rs/leptos/latest/leptos/task/fn.spawn_local.html). This allows you to just spawn an `async` task in a synchronous environment by handing the `Future` off to the browser (or, on the server, Tokio or whatever other runtime you’re using). But how do you know if it’s still pending? Well, you could just set a signal to show whether it’s loading, and another one to show the result...

All of this is true. Or you could use the final `async` primitive: [`Action`](https://docs.rs/leptos/latest/leptos/reactive/actions/struct.Action.html).

Actions and resources seem similar, but they represent fundamentally different things. If you’re trying to load data by running an `async` function, either once or when some other value changes, you probably want to use a resource. If you’re trying to occasionally run an `async` function in response to something like a user clicking a button, you probably want to use an `Action`.

Say we have some `async` function we want to run.

```rust
async fn add_todo_request(new_title: &str) -> Uuid {
    /* do some stuff on the server to add a new todo */
}
```

`Action::new()` takes an `async` function that takes a reference to a single argument, which you could think of as its “input type.”

> The input is always a single type. If you want to pass in multiple arguments, you can do it with a struct or tuple.
>
> ```rust
> // if there's a single argument, just use that
> let action1 = Action::new(|input: &String| {
>    let input = input.clone();
>    async move { todo!() }
> });
>
> // if there are no arguments, use the unit type `()`
> let action2 = Action::new(|input: &()| async { todo!() });
>
> // if there are multiple arguments, use a tuple
> let action3 = Action::new(
>   |input: &(usize, String)| async { todo!() }
> );
> ```
>
> Because the action function takes a reference but the `Future` needs to have a `'static` lifetime, you’ll usually need to clone the value to pass it into the `Future`. This is admittedly awkward but it unlocks some powerful features like optimistic UI. We’ll see a little more about that in future chapters.

So in this case, all we need to do to create an action is

```rust
let add_todo_action = Action::new(|input: &String| {
    let input = input.to_owned();
    async move { add_todo_request(&input).await }
});
```

Rather than calling `add_todo_action` directly, we’ll call it with `.dispatch()`, as in

```rust
add_todo_action.dispatch("Some value".to_string());
```

You can do this from an event listener, a timeout, or anywhere; because `.dispatch()` isn’t an `async` function, it can be called from a synchronous context.

Actions provide access to a few signals that synchronize between the asynchronous action you’re calling and the synchronous reactive system:

```rust
let submitted = add_todo_action.input(); // RwSignal<Option<String>>
let pending = add_todo_action.pending(); // ReadSignal<bool>
let todo_id = add_todo_action.value(); // RwSignal<Option<Uuid>>
```

This makes it easy to track the current state of your request, show a loading indicator, or do “optimistic UI” based on the assumption that the submission will succeed.

```rust
let input_ref = NodeRef::<Input>::new();

view! {
    <form
        on:submit=move |ev| {
            ev.prevent_default(); // don't reload the page...
            let input = input_ref.get().expect("input to exist");
            add_todo_action.dispatch(input.value());
        }
    >
        <label>
            "What do you need to do?"
            <input type="text"
                node_ref=input_ref
            />
        </label>
        <button type="submit">"Add Todo"</button>
    </form>
    // use our loading state
    <p>{move || pending.get().then_some("Loading...")}</p>
}
```

Now, there’s a chance this all seems a little over-complicated, or maybe too restricted. I wanted to include actions here, alongside resources, as the missing piece of the puzzle. In a real Leptos app, you’ll actually most often use actions alongside server functions, [`ServerAction`](https://docs.rs/leptos/latest/leptos/server/struct.ServerAction.html), and the [`<ActionForm/>`](https://docs.rs/leptos/latest/leptos/form/fn.ActionForm.html) component to create really powerful progressively-enhanced forms. So if this primitive seems useless to you... Don’t worry! Maybe it will make sense later. (Or check out our [`todo_app_sqlite`](https://github.com/leptos-rs/leptos/blob/main/examples/todo_app_sqlite/src/todo.rs) example now.)

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/13-action-0-7-g73rl9?file=%2Fsrc%2Fmain.rs)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/13-action-0-7-g73rl9?file=%2Fsrc%2Fmain.rs" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use gloo_timers::future::TimeoutFuture;
use leptos::{html::Input, prelude::*};
use uuid::Uuid;

// Here we define an async function
// This could be anything: a network request, database read, etc.
// Think of it as a mutation: some imperative async action you run,
// whereas a resource would be some async data you load
async fn add_todo(text: &str) -> Uuid {
    _ = text;
    // fake a one-second delay
    // SendWrapper allows us to use this !Send browser API; don't worry about it
    send_wrapper::SendWrapper::new(TimeoutFuture::new(1_000)).await;
    // pretend this is a post ID or something
    Uuid::new_v4()
}

#[component]
pub fn App() -> impl IntoView {
    // an action takes an async function with single argument
    // it can be a simple type, a struct, or ()
    let add_todo = Action::new(|input: &String| {
        // the input is a reference, but we need the Future to own it
        // this is important: we need to clone and move into the Future
        // so it has a 'static lifetime
        let input = input.to_owned();
        async move { add_todo(&input).await }
    });

    // actions provide a bunch of synchronous, reactive variables
    // that tell us different things about the state of the action
    let submitted = add_todo.input();
    let pending = add_todo.pending();
    let todo_id = add_todo.value();

    let input_ref = NodeRef::<Input>::new();

    view! {
        <form
            on:submit=move |ev| {
                ev.prevent_default(); // don't reload the page...
                let input = input_ref.get().expect("input to exist");
                add_todo.dispatch(input.value());
            }
        >
            <label>
                "What do you need to do?"
                <input type="text"
                    node_ref=input_ref
                />
            </label>
            <button type="submit">"Add Todo"</button>
        </form>
        <p>{move || pending.get().then_some("Loading...")}</p>
        <p>
            "Submitted: "
            <code>{move || format!("{:#?}", submitted.get())}</code>
        </p>
        <p>
            "Pending: "
            <code>{move || format!("{:#?}", pending.get())}</code>
        </p>
        <p>
            "Todo ID: "
            <code>{move || format!("{:#?}", todo_id.get())}</code>
        </p>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/async/13_actions.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/async/11_suspense.md
# `<Suspense/>`

In the previous chapter, we showed how you can create a simple loading screen to show some fallback while a resource is loading.

```rust
let (count, set_count) = signal(0);
let once = Resource::new(move || count.get(), |count| async move { load_a(count).await });

view! {
    <h1>"My Data"</h1>
    {move || match once.get() {
        None => view! { <p>"Loading..."</p> }.into_any(),
        Some(data) => view! { <ShowData data/> }.into_any()
    }}
}
```

But what if we have two resources, and want to wait for both of them?

```rust
let (count, set_count) = signal(0);
let (count2, set_count2) = signal(0);
let a = Resource::new(move || count.get(), |count| async move { load_a(count).await });
let b = Resource::new(move || count2.get(), |count| async move { load_b(count).await });

view! {
    <h1>"My Data"</h1>
    {move || match (a.get(), b.get()) {
        (Some(a), Some(b)) => view! {
            <ShowA a/>
            <ShowA b/>
        }.into_any(),
        _ => view! { <p>"Loading..."</p> }.into_any()
    }}
}
```

That’s not _so_ bad, but it’s kind of annoying. What if we could invert the flow of control?

The [`<Suspense/>`](https://docs.rs/leptos/latest/leptos/suspense/fn.Suspense.html) component lets us do exactly that. You give it a `fallback` prop and children, one or more of which usually involves reading from a resource. Reading from a resource “under” a `<Suspense/>` (i.e., in one of its children) registers that resource with the `<Suspense/>`. If it’s still waiting for resources to load, it shows the `fallback`. When they’ve all loaded, it shows the children.

```rust
let (count, set_count) = signal(0);
let (count2, set_count2) = signal(0);
let a = Resource::new(count, |count| async move { load_a(count).await });
let b = Resource::new(count2, |count| async move { load_b(count).await });

view! {
    <h1>"My Data"</h1>
    <Suspense
        fallback=move || view! { <p>"Loading..."</p> }
    >
        <h2>"My Data"</h2>
        <h3>"A"</h3>
        {move || {
            a.get()
                .map(|a| view! { <ShowA a/> })
        }}
        <h3>"B"</h3>
        {move || {
            b.get()
                .map(|b| view! { <ShowB b/> })
        }}
    </Suspense>
}
```

Every time one of the resources is reloading, the `"Loading..."` fallback will show again.

This inversion of the flow of control makes it easier to add or remove individual resources, as you don’t need to handle the matching yourself. It also unlocks some massive performance improvements during server-side rendering, which we’ll talk about during a later chapter.

Using `<Suspense/>` also gives us access to a useful way to directly `.await` resources, allowing us to remove a level of nesting, above. The `Suspend` type lets us create a renderable `Future` which can be used in the view:

```rust
view! {
    <h1>"My Data"</h1>
    <Suspense
        fallback=move || view! { <p>"Loading..."</p> }
    >
        <h2>"My Data"</h2>
        {move || Suspend::new(async move {
            let a = a.await;
            let b = b.await;
            view! {
                <h3>"A"</h3>
                <ShowA a/>
                <h3>"B"</h3>
                <ShowB b/>
            }
        })}
    </Suspense>
}
```

`Suspend` allows us to avoid null-checking each resource, and removes some additional complexity from the code.

## `<Await/>`

If you’re simply trying to wait for some `Future` to resolve before rendering, you may find the `<Await/>` component helpful in reducing boilerplate. `<Await/>` essentially combines a `OnceResource` with a `<Suspense/>` with no fallback.

In other words:

1. It only polls the `Future` once, and does not respond to any reactive changes.
2. It does not render anything until the `Future` resolves.
3. After the `Future` resolves, it binds its data to whatever variable name you choose and then renders its children with that variable in scope.

```rust
async fn fetch_monkeys(monkey: i32) -> i32 {
    // maybe this didn't need to be async
    monkey * 2
}
view! {
    <Await
        // `future` provides the `Future` to be resolved
        future=fetch_monkeys(3)
        // the data is bound to whatever variable name you provide
        let:data
    >
        // you receive the data by reference and can use it in your view here
        <p>{*data} " little monkeys, jumping on the bed."</p>
    </Await>
}
```

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/11-suspense-0-7-sr2srk?file=%2Fsrc%2Fmain.rs%3A1%2C1-55%2C1)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/11-suspense-0-7-sr2srk?file=%2Fsrc%2Fmain.rs%3A1%2C1-55%2C1" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use gloo_timers::future::TimeoutFuture;
use leptos::prelude::*;

async fn important_api_call(name: String) -> String {
    TimeoutFuture::new(1_000).await;
    name.to_ascii_uppercase()
}

#[component]
pub fn App() -> impl IntoView {
    let (name, set_name) = signal("Bill".to_string());

    // this will reload every time `name` changes
    let async_data = LocalResource::new(move || important_api_call(name.get()));

    view! {
        <input
            on:change:target=move |ev| {
                set_name.set(ev.target().value());
            }
            prop:value=name
        />
        <p><code>"name:"</code> {name}</p>
        <Suspense
            // the fallback will show whenever a resource
            // read "under" the suspense is loading
            fallback=move || view! { <p>"Loading..."</p> }
        >
            // Suspend allows you use to an async block in the view
            <p>
                "Your shouting name is "
                {move || Suspend::new(async move {
                    async_data.await
                })}
            </p>
        </Suspense>
        <Suspense
            // the fallback will show whenever a resource
            // read "under" the suspense is loading
            fallback=move || view! { <p>"Loading..."</p> }
        >
            // the children will be rendered once initially,
            // and then whenever any resources has been resolved
            <p>
                "Which should be the same as... "
                {move || async_data.get().as_deref().map(ToString::to_string)}
            </p>
        </Suspense>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/async/11_suspense.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/server/27_response.md
# Responses and Redirects

Extractors provide an easy way to access request data inside server functions. Leptos also provides a way to modify the HTTP response, using the `ResponseOptions` type (see docs for [Actix](https://docs.rs/leptos_actix/latest/leptos_actix/struct.ResponseOptions.html) or [Axum](https://docs.rs/leptos_axum/latest/leptos_axum/struct.ResponseOptions.html) types) and the `redirect` helper function (see docs for [Actix](https://docs.rs/leptos_actix/latest/leptos_actix/fn.redirect.html) or [Axum](https://docs.rs/leptos_axum/latest/leptos_axum/fn.redirect.html)).

## `ResponseOptions`

`ResponseOptions` is provided via context during the initial server rendering response and during any subsequent server function call. It allows you to easily set the status code for the HTTP response, or to add headers to the HTTP response, e.g., to set cookies.

```rust
#[server]
pub async fn tea_and_cookies() -> Result<(), ServerFnError> {
    use actix_web::{
        cookie::Cookie,
        http::header::HeaderValue,
        http::{header, StatusCode},
    };
    use leptos_actix::ResponseOptions;

    // pull ResponseOptions from context
    let response = expect_context::<ResponseOptions>();

    // set the HTTP status code
    response.set_status(StatusCode::IM_A_TEAPOT);

    // set a cookie in the HTTP response
    let cookie = Cookie::build("biscuits", "yes").finish();
    if let Ok(cookie) = HeaderValue::from_str(&cookie.to_string()) {
        response.insert_header(header::SET_COOKIE, cookie);
    }
    Ok(())
}
```

## `redirect`

One common modification to an HTTP response is to redirect to another page. The Actix and Axum integrations provide a `redirect` function to make this easy to do.

```rust
#[server]
pub async fn login(
    username: String,
    password: String,
    remember: Option<String>,
) -> Result<(), ServerFnError> {
    // pull the DB pool and auth provider from context
    let pool = pool()?;
    let auth = auth()?;

    // check whether the user exists
    let user: User = User::get_from_username(username, &pool)
        .await
        .ok_or_else(|| {
            ServerFnError::ServerError("User does not exist.".into())
        })?;

    // check whether the user has provided the correct password
    match verify(password, &user.password)? {
        // if the password is correct...
        true => {
            // log the user in
            auth.login_user(user.id);
            auth.remember_user(remember.is_some());

            // and redirect to the home page
            leptos_axum::redirect("/");
            Ok(())
        }
        // if not, return an error
        false => Err(ServerFnError::ServerError(
            "Password does not match.".to_string(),
        )),
    }
}
```

This server function can then be used from your application. This `redirect` works well with the progressively-enhanced `<ActionForm/>` component: without JS/WASM, the server response will redirect because of the status code and header. With JS/WASM, the `<ActionForm/>` will detect the redirect in the server function response, and use client-side navigation to redirect to the new page.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/server/27_response.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/server/README.md
# Working with the Server

The previous section described the process of server-side rendering, using the server to generate an HTML version of the page that will become interactive in the browser. So far, everything has been “isomorphic”; in other words, your app has had the “same (_iso_) shape (_morphe_)” on the client and the server.

But a server can do a lot more than just render HTML! In fact, a server can do a whole bunch of things your browser _can’t,_ like reading from and writing to a SQL database.

If you’re used to building JavaScript frontend apps, you’re probably used to calling out to some kind of REST API to do this sort of server work. If you’re used to building sites with PHP or Python or Ruby (or Java or C# or...), this server-side work is your bread and butter, and it’s the client-side interactivity that tends to be an afterthought.

With Leptos, you can do both: not only in the same language, not only sharing the same types, but even in the same files!

This section will talk about how to build the uniquely-server-side parts of your application.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/server/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/server/26_extractors.md
# Extractors

The server functions we looked at in the last chapter showed how to run code on the server, and integrate it with the user interface you’re rendering in the browser. But they didn’t show you much about how to actually use your server to its full potential.

## Server Frameworks

We call Leptos a “full-stack” framework, but “full-stack” is always a misnomer (after all, it never means everything from the browser to your power company.) For us, “full stack” means that your Leptos app can run in the browser, and can run on the server, and can integrate the two, drawing together the unique features available in each; as we’ve seen in the book so far, a button click on the browser can drive a database read on the server, both written in the same Rust module. But Leptos itself doesn’t provide the server (or the database, or the operating system, or the firmware, or the electrical cables...)

Instead, Leptos provides integrations for the two most popular Rust web server frameworks, Actix Web ([`leptos_actix`](https://docs.rs/leptos_actix/latest/leptos_actix/)) and Axum ([`leptos_axum`](https://docs.rs/leptos_axum/latest/leptos_axum/)). We’ve built integrations with each server’s router so that you can simply plug your Leptos app into an existing server with `.leptos_routes()`, and easily handle server function calls.

> If you haven’t seen our [Actix](https://github.com/leptos-rs/start) and [Axum](https://github.com/leptos-rs/start-axum) templates, now’s a good time to check them out.

## Using Extractors

Both Actix and Axum handlers are built on the same powerful idea of **extractors**. Extractors “extract” typed data from an HTTP request, allowing you to access server-specific data easily.

Leptos provides `extract` helper functions to let you use these extractors directly in your server functions, with a convenient syntax very similar to handlers for each framework.

### Actix Extractors

The [`extract` function in `leptos_actix`](https://docs.rs/leptos_actix/latest/leptos_actix/fn.extract.html) takes a handler function as its argument. The handler follows similar rules to an Actix handler: it is an async function that receives arguments that will be extracted from the request and returns some value. The handler function receives that extracted data as its arguments, and can do further `async` work on them inside the body of the `async move` block. It returns whatever value you return back out into the server function.

```rust
use serde::Deserialize;

#[derive(Deserialize, Debug)]
struct MyQuery {
    foo: String,
}

#[server]
pub async fn actix_extract() -> Result<String, ServerFnError> {
    use actix_web::dev::ConnectionInfo;
    use actix_web::web::Query;
    use leptos_actix::extract;

    let (Query(search), connection): (Query<MyQuery>, ConnectionInfo) = extract().await?;
    Ok(format!("search = {search:?}\nconnection = {connection:?}",))
}
```

### Axum Extractors

The syntax for the [`leptos_axum::extract`](https://docs.rs/leptos_axum/latest/leptos_axum/fn.extract.html) function is very similar.

```rust
use serde::Deserialize;

#[derive(Deserialize, Debug)]
struct MyQuery {
    foo: String,
}

#[server]
pub async fn axum_extract() -> Result<String, ServerFnError> {
    use axum::{extract::Query, http::Method};
    use leptos_axum::extract;

    let (method, query): (Method, Query<MyQuery>) = extract().await?;

    Ok(format!("{method:?} and {query:?}"))
}
```

These are relatively simple examples accessing basic data from the server. But you can use extractors to access things like headers, cookies, database connection pools, and more, using the exact same `extract()` pattern.

The Axum `extract` function only supports extractors for which the state is `()`. If you need an extractor that uses `State`, you should use [`extract_with_state`](https://docs.rs/leptos_axum/latest/leptos_axum/fn.extract_with_state.html). This requires you to provide the state. You can do this by extending the existing `LeptosOptions` state using the Axum `FromRef` pattern, which providing the state as context during render and server functions with custom handlers.

```rust
use axum::extract::FromRef;

/// Derive FromRef to allow multiple items in state, using Axum’s
/// SubStates pattern.
#[derive(FromRef, Debug, Clone)]
pub struct AppState{
    pub leptos_options: LeptosOptions,
    pub pool: SqlitePool
}
```

[Click here for an example of providing context in custom handlers](https://github.com/leptos-rs/leptos/blob/19ea6fae6aec2a493d79cc86612622d219e6eebb/examples/session_auth_axum/src/main.rs#L24-L44).

#### Axum State

Axum's typical pattern for dependency injection is to provide a `State`, which can then be extracted in your route handler. Leptos provides its own method of dependency injection via context. Context can often be used instead of `State` to provide shared server data (for example, a database connection pool).

```rust
let connection_pool = /* some shared state here */;

let app = Router::new()
    .leptos_routes_with_context(
        &app_state,
        routes,
        move || provide_context(connection_pool.clone()),
        App,
    )
    // etc.
```

This context can then be accessed with a simple `use_context::<T>()` inside your server functions.

If you _need_ to use `State` in a server function—for example, if you have an existing Axum extractor that requires `State`—that is also possible using Axum's [`FromRef`](https://docs.rs/axum/latest/axum/extract/derive.FromRef.html) pattern and [`extract_with_state`](https://docs.rs/leptos_axum/latest/leptos_axum/fn.extract_with_state.html). Essentially you'll need to provide the state both via context and via Axum router state:

```rust
#[derive(FromRef, Debug, Clone)]
pub struct MyData {
    pub value: usize,
    pub leptos_options: LeptosOptions,
}

let app_state = MyData {
    value: 42,
    leptos_options,
};

// build our application with a route
let app = Router::new()
    .leptos_routes_with_context(
        &app_state,
        routes,
        {
            let app_state = app_state.clone();
            move || provide_context(app_state.clone())
        },
        App,
    )
    .fallback(file_and_error_handler)
    .with_state(app_state);

// ...
#[server]
pub async fn uses_state() -> Result<(), ServerFnError> {
    let state = expect_context::<AppState>();
    let SomeStateExtractor(data) = extract_with_state(&state).await?;
    // todo
}
```

## A Note about Data-Loading Patterns

Because Actix and (especially) Axum are built on the idea of a single round-trip HTTP request and response, you typically run extractors near the “top” of your application (i.e., before you start rendering) and use the extracted data to determine how that should be rendered. Before you render a `<button>`, you load all the data your app could need. And any given route handler needs to know all the data that will need to be extracted by that route.

But Leptos integrates both the client and the server, and it’s important to be able to refresh small pieces of your UI with new data from the server without forcing a full reload of all the data. So Leptos likes to push data loading “down” in your application, as far towards the leaves of your user interface as possible. When you click a `<button>`, it can refresh just the data it needs. This is exactly what server functions are for: they give you granular access to data to be loaded and reloaded.

The `extract()` functions let you combine both models by using extractors in your server functions. You get access to the full power of route extractors, while decentralizing knowledge of what needs to be extracted down to your individual components. This makes it easier to refactor and reorganize routes: you don’t need to specify all the data a route needs up front.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/server/26_extractors.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/server/25_server_functions.md
# Server Functions

If you’re creating anything beyond a toy app, you’ll need to run code on the server all the time: reading from or writing to a database that only runs on the server, running expensive computations using libraries you don’t want to ship down to the client, accessing APIs that need to be called from the server rather than the client for CORS reasons or because you need a secret API key that’s stored on the server and definitely shouldn’t be shipped down to a user’s browser.

Traditionally, this is done by separating your server and client code, and by setting up something like a REST API or GraphQL API to allow your client to fetch and mutate data on the server. This is fine, but it requires you to write and maintain your code in multiple separate places (client-side code for fetching, server-side functions to run), as well as creating a third thing to manage, which is the API contract between the two.

Leptos is one of a number of modern frameworks that introduce the concept of **server functions**. Server functions have two key characteristics:

1. Server functions are **co-located** with your component code, so that you can organize your work by feature, not by technology. For example, you might have a “dark mode” feature that should persist a user’s dark/light mode preference across sessions, and be applied during server rendering so there’s no flicker. This requires a component that needs to be interactive on the client, and some work to be done on the server (setting a cookie, maybe even storing a user in a database.) Traditionally, this feature might end up being split between two different locations in your code, one in your “frontend” and one in your “backend.” With server functions, you’ll probably just write them both in one `dark_mode.rs` and forget about it.
2. Server functions are **isomorphic**, i.e., they can be called either from the server or the browser. This is done by generating code differently for the two platforms. On the server, a server function simply runs. In the browser, the server function’s body is replaced with a stub that actually makes a fetch request to the server, serializing the arguments into the request and deserializing the return value from the response. But on either end, the function can simply be called: you can create an `add_todo` function that writes to your database, and simply call it from a click handler on a button in the browser!

## Using Server Functions

Actually, I kind of like that example. What would it look like? It’s pretty simple, actually.

```rust
// todo.rs

#[server]
pub async fn add_todo(title: String) -> Result<(), ServerFnError> {
    let mut conn = db().await?;

    match sqlx::query("INSERT INTO todos (title, completed) VALUES ($1, false)")
        .bind(title)
        .execute(&mut conn)
        .await
    {
        Ok(_row) => Ok(()),
        Err(e) => Err(ServerFnError::ServerError(e.to_string())),
    }
}

#[component]
pub fn BusyButton() -> impl IntoView {
	view! {
        <button on:click=move |_| {
            spawn_local(async {
                add_todo("So much to do!".to_string()).await;
            });
        }>
            "Add Todo"
        </button>
	}
}
```

You’ll notice a couple things here right away:

- Server functions can use server-only dependencies, like `sqlx`, and can access server-only resources, like our database.
- Server functions are `async`. Even if they only did synchronous work on the server, the function signature would still need to be `async`, because calling them from the browser _must_ be asynchronous.
- Server functions return `Result<T, ServerFnError>`. Again, even if they only do infallible work on the server, this is true, because `ServerFnError`’s variants include the various things that can be wrong during the process of making a network request.
- Server functions can be called from the client. Take a look at our click handler. This is code that will _only ever_ run on the client. But it can call the function `add_todo` (using `spawn_local` to run the `Future`) as if it were an ordinary async function:

```rust
move |_| {
	spawn_local(async {
		add_todo("So much to do!".to_string()).await;
	});
}
```

- Server functions are top-level functions defined with `fn`. Unlike event listeners, derived signals, and most everything else in Leptos, they are not closures! As `fn` calls, they have no access to the reactive state of your app or anything else that is not passed in as an argument. And again, this makes perfect sense: When you make a request to the server, the server doesn’t have access to client state unless you send it explicitly. (Otherwise we’d have to serialize the whole reactive system and send it across the wire with every request. This would not be a great idea.)
- Server function arguments and return values both need to be serializable. Again, hopefully this makes sense: while function arguments in general don’t need to be serialized, calling a server function from the browser means serializing the arguments and sending them over HTTP.

There are a few things to note about the way you define a server function, too.

- Server functions are created by using the [`#[server]` macro](https://docs.rs/leptos/latest/leptos/attr.server.html) to annotate a top-level function, which can be defined anywhere.

Server functions work by using conditional compilation. On the server, the server function creates an HTTP endpoint that receives its arguments as an HTTP request, and returns its result as an HTTP response. For the client-side/browser build, the body of the server function is stubbed out with an HTTP request.

```admonish warning
### An Important Note about Security

Server functions are a cool technology, but it’s very important to remember. **Server functions are not magic; they’re syntax sugar for defining a public API.** The _body_ of a server function is never made public; it’s just part of your server binary. But the server function is a publicly accessible API endpoint, and its return value is just a JSON or similar blob. Do not return information from a server function unless it is public, or you've implemented proper security procedures. These procedures might include authenticating incoming requests, ensuring proper encryption, rate limiting access, and more.
```

## Customizing Server Functions

By default, server functions encode their arguments as an HTTP POST request (using `serde_qs`) and their return values as JSON (using `serde_json`). This default is intended to promote compatibility with the `<form>` element, which has native support for making POST requests, even when WASM is disabled, unsupported, or has not yet loaded. They mount their endpoints at a hashed URL intended to prevent name collisions.

However, there are many ways to customize server functions, with a variety of supported input and output encodings, the ability to set specific endpoints, and so on.

Take a look at the docs for the [`#[server]` macro](https://docs.rs/leptos/latest/leptos/attr.server.html) and [`server_fn` crate](https://docs.rs/server_fn/latest/server_fn/), and the extensive [`server_fns_axum` example](https://github.com/leptos-rs/leptos/blob/main/examples/server_fns_axum/src/app.rs) in the repo for more information and examples.

## Using Custom Errors

Server functions can return any kind of errors that implement the `FromServerFnError` trait.
This makes error handling much more ergonomic and allows you to provide domain-specific error information to your clients:

```rust
use leptos::prelude::*;
use server_fn::codec::JsonEncoding;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Deserialize, Serialize)]
pub enum AppError {
    ServerFnError(ServerFnErrorErr),
    DbError(String),
}

impl FromServerFnError for AppError {
    type Encoder = JsonEncoding;

    fn from_server_fn_error(value: ServerFnErrorErr) -> Self {
        AppError::ServerFnError(value)
    }
}

#[server]
pub async fn create_user(name: String, email: String) -> Result<User, AppError> {
    // Try to create user in database
    match insert_user_into_db(&name, &email).await {
        Ok(user) => Ok(user),
        Err(e) => Err(AppError::DbError(e.to_string())),
    }
}
```

## Integrating Server Functions with Leptos

So far, everything I’ve said is actually framework agnostic. (And in fact, the Leptos server function crate has been integrated into Dioxus as well!) Server functions are simply a way of defining a function-like RPC call that leans on Web standards like HTTP requests and URL encoding.

But in a way, they also provide the last missing primitive in our story so far. Because a server function is just a plain Rust async function, it integrates perfectly with the async Leptos primitives we discussed [earlier](../async/index.html). So you can easily integrate your server functions with the rest of your applications:

- Create **resources** that call the server function to load data from the server
- Read these resources under `<Suspense/>` or `<Transition/>` to enable streaming SSR and fallback states while data loads.
- Create **actions** that call the server function to mutate data on the server

The final section of this book will make this a little more concrete by introducing patterns that use progressively-enhanced HTML forms to run these server actions.

But in the next few chapters, we’ll actually take a look at some of the details of what you might want to do with your server functions, including the best ways to integrate with the powerful extractors provided by the Actix and Axum server frameworks.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/server/25_server_functions.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/ssr/21_cargo_leptos.md
# Introducing `cargo-leptos`

So far, we’ve just been running code in the browser and using Trunk to coordinate the build process and run a local development process. If we’re going to add server-side rendering, we’ll need to run our application code on the server as well. This means we’ll need to build two separate binaries, one compiled to native code and running the server, the other compiled to WebAssembly (WASM) and running in the user’s browser. Additionally, the server needs to know how to serve this WASM version (and the JavaScript required to initialize it) to the browser.

This is not an insurmountable task but it adds some complication. For convenience and an easier developer experience, we built the [`cargo-leptos`](https://github.com/leptos-rs/cargo-leptos) build tool. `cargo-leptos` basically exists to coordinate the build process for your app, handling recompiling the server and client halves when you make changes, and adding some built-in support for things like Tailwind, SASS, and testing.

Getting started is pretty easy. Just run

```bash
cargo install --locked cargo-leptos
```

And then to create a new project, you can run either

```bash
# for an Actix template
cargo leptos new --git https://github.com/leptos-rs/start-actix
```

or

```bash
# for an Axum template
cargo leptos new --git https://github.com/leptos-rs/start-axum
```

Make sure you've added the wasm32-unknown-unknown target so that Rust can compile your code to WebAssembly to run in the browser.
```bash
rustup target add wasm32-unknown-unknown
```

Now `cd` into the directory you’ve created and run

```bash
cargo leptos watch
```

Once your app has compiled you can open up your browser to [`http://localhost:3000`](http://localhost:3000) to see it.

`cargo-leptos` has lots of additional features and built in tools. You can learn more [in its `README`](https://github.com/leptos-rs/cargo-leptos/blob/main/README.md).

But what exactly is happening when you open your browser to `localhost:3000`? Well, read on to find out.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/ssr/21_cargo_leptos.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/ssr/24_hydration_bugs.md
# Hydration Bugs _(and how to avoid them)_

## A Thought Experiment

Let’s try an experiment to test your intuitions. Open up an app you’re server-rendering with `cargo-leptos`. (If you’ve just been using `trunk` so far to play with examples, go [clone a `cargo-leptos` template](./21_cargo_leptos.md) just for the sake of this exercise.)

Put a log somewhere in your root component. (I usually call mine `<App/>`, but anything will do.)

```rust
#[component]
pub fn App() -> impl IntoView {
	logging::log!("where do I run?");
	// ... whatever
}
```

And let’s fire it up

```bash
cargo leptos watch
```

Where do you expect `where do I run?` to log?

- In the command line where you’re running the server?
- In the browser console when you load the page?
- Neither?
- Both?

Try it out.

...

...

...

Okay, consider the spoiler alerted.

You’ll notice of course that it logs in both places, assuming everything goes according to plan. In fact on the server it logs twice—first during the initial server startup, when Leptos renders your app once to extract the route tree, then a second time when you make a request. Each time you reload the page, `where do I run?` should log once on the server and once on the client.

If you think about the description in the last couple sections, hopefully this makes sense. Your application runs once on the server, where it builds up a tree of HTML which is sent to the client. During this initial render, `where do I run?` logs on the server.

Once the WASM binary has loaded in the browser, your application runs a second time, walking over the same user interface tree and adding interactivity.

> Does that sound like a waste? It is, in a sense. But reducing that waste is a genuinely hard problem. It’s what some JS frameworks like Qwik are intended to solve, although it’s probably too early to tell whether it’s a net performance gain as opposed to other approaches.

## The Potential for Bugs

Okay, hopefully all of that made sense. But what does it have to do with the title of this chapter, which is “Hydration bugs (and how to avoid them)”?

Remember that the application needs to run on both the server and the client. This generates a few different sets of potential issues you need to know how to avoid.

### Mismatches between server and client code

One way to create a bug is by creating a mismatch between the HTML that’s sent down by the server and what’s rendered on the client. It’s actually fairly hard to do this unintentionally, I think (at least judging by the bug reports I get from people.) But imagine I do something like this

```rust
#[component]
pub fn App() -> impl IntoView {
    let data = if cfg!(target_arch = "wasm32") {
        vec![0, 1, 2]
    } else {
        vec![]
    };
    data.into_iter()
        .map(|value| view! { <span>{value}</span> })
        .collect_view()
}
```

In other words, if this is being compiled to WASM, it has three items; otherwise it’s empty.

When I load the page in the browser, I see nothing. If I open the console I see a panic:

```
ssr_modes.js:423 panicked at /.../tachys/src/html/element/mod.rs:352:14:
called `Option::unwrap()` on a `None` value
```

The WASM version of your app, running in the browser, is expecting to find an element (in fact, it’s expecting three elements!) But the HTML sent from the server has none.

#### Solution

It’s pretty rare that you do this intentionally, but it could happen from somehow running different logic on the server and in the browser. If you’re seeing warnings like this and you don’t think it’s your fault, it’s much more likely that it’s a bug with `<Suspense/>` or something. Feel free to go ahead and open an [issue](https://github.com/leptos-rs/leptos/issues) or [discussion](https://github.com/leptos-rs/leptos/discussions) on GitHub for help.

### Invalid/edge-case HTML, and mismatches between HTML and the DOM

Servers respond to requests with HTML. The browser then parses that HTML into a tree called the Document Object Model (DOM). During hydration, Leptos walks over the view tree of your application, hydrating an element, then moving into its children, hydrating the first child, then moving to its siblings, and so on. This assumes that the tree of HTML produced by the your application on the server maps directly onto the DOM tree into which the browser parses that HTML.

There are a few cases to be aware of in which the tree of HTML created by your `view` and the DOM tree might not correspond exactly: these can cause hydration errors.

#### Invalid HTML

Here’s a very simple application that causes a hydration error:
```rust
#[component]
pub fn App() -> impl IntoView {
    let count = RwSignal::new(0);

    view! {
        <p>
            <div class:blue=move || count.get() == 2>
                 "First"
            </div>
        </p>
    }
}
```

This will give an error message like 
```
A hydration error occurred while trying to hydrate an element defined at src/app.rs:6:14.

The framework expected a text node, but found this instead:  <p></p>

The hydration mismatch may have occurred slightly earlier, but this is the first time the framework found a node of an unexpected type.
```

(In most browser devtools, you can right-click on that `<p></p>` to show where it appears in the DOM, which is handy.)

If you look in the DOM inspector, you’ll see that it instead of a `<div>` inside a `<p>`, it shows:
```html
<p></p>
<div>First</div>
<p></p>
```
That’s because this is invalid HTML! A `<div>` cannot go inside a `<p>`. When the browser parses that `<div>`, it actually closes the preceding `<p>`, then opens the `<div>`; then, when it sees the (now-unmatched) closing `</p>`, it treats it as a new, empty `<p>`.

As a result, our DOM tree no longer matches the expected view tree, and a hydration error ensues.

Unfortunately, it is difficult to ensure the validity of HTML in the view at compile time using our current model, and without an effect on compile times across the board. For now, if you run into issues like this, consider running the HTML output through a validator. (In the case above, the W3C HTML Validator does in fact show an error!)

```admonish info
You may notice some bugs of this arise when migrating from 0.6 to 0.7. This is due to a change in how hydration works.

Leptos 0.1-0.6 used a method of hydration in which each HTML element was given a unique ID, which was then used to find it in the DOM by ID. Leptos 0.7 instead began walking over the DOM directly, hydrating each element as it came. This has much better performance characteristics (shorter, cleaner HTML output and faster hydration times) but is less resilient to the invalid or edge-case HTML examples above. Perhaps more importantly, this approach also fixes a number of *other* edge cases and bugs in hydration, making the framework more resilient on net.
```

#### `<table>` without `<tbody>`

There’s one additional edge case I’m aware of, in which *valid* HTML produces a DOM tree that differs from the view tree, and that’s `<table>`. When (most) browsers parse an HTML `<table>`, they insert a `<tbody>` into the DOM, whether you included one or not.

```rust
#[component]
pub fn App() -> impl IntoView {
    let count = RwSignal::new(0);

    view! {
        <table>
            <tr>
                <td class:blue=move || count.get() == 0>"First"</td>
            </tr>
        </table>
    }
}
```

Again, this generates a hydration error, because the browser has inserted an additional `<tbody>` into the DOM tree that was not in your view.

Here, the fix is simple: adding `<tbody>`:
```rust
#[component]
pub fn App() -> impl IntoView {
    let count = RwSignal::new(0);

    view! {
        <table>
            <tbody>
                <tr>
                    <td class:blue=move || count.get() == 0>"First"</td>
                </tr>
            </tbody>
        </table>
    }
}
```

(It would be worth exploring in the future whether we can lint for this particular quirk more easily than linting for valid HTML.)

#### General Advice

These kind of mismatches can be tricky. In general, my recommendation for debugging:
1. Right-click on the element in the message to see where the framework first *notices* the problem.
2. Compare the DOM at that point and above it, checking for mismatches with your view tree. Are there extra elements? Missing elements?


### Not all client code can run on the server

Imagine you happily import a dependency like `gloo-net` that you’ve been used to using to make requests in the browser, and use it in a `create_resource` in a server-rendered app.

You’ll probably instantly see the dreaded message

```
panicked at 'cannot call wasm-bindgen imported functions on non-wasm targets'
```

Uh-oh.

But of course this makes sense. We’ve just said that your app needs to run on the client and the server.

#### Solution

There are a few ways to avoid this:

1. Only use libraries that can run on both the server and the client. [`reqwest`](https://docs.rs/reqwest/latest/reqwest/), for example, works for making HTTP requests in both settings.
2. Use different libraries on the server and the client, and gate them using the `#[cfg]` macro. ([Click here for an example](https://github.com/leptos-rs/leptos/blob/main/examples/hackernews/src/api.rs).)
3. Wrap client-only code in `Effect::new`. Because effects only run on the client, this can be an effective way to access browser APIs that are not needed for initial rendering.

For example, say that I want to store something in the browser’s `localStorage` whenever a signal changes.

```rust
#[component]
pub fn App() -> impl IntoView {
    use gloo_storage::Storage;
	let storage = gloo_storage::LocalStorage::raw();
	logging::log!("{storage:?}");
}
```

This panics because I can’t access `LocalStorage` during server rendering.

But if I wrap it in an effect...

```rust
#[component]
pub fn App() -> impl IntoView {
    use gloo_storage::Storage;
    Effect::new(move |_| {
        let storage = gloo_storage::LocalStorage::raw();
		log!("{storage:?}");
    });
}
```

It’s fine! This will render appropriately on the server, ignoring the client-only code, and then access the storage and log a message on the browser.

### Not all server code can run on the client

WebAssembly running in the browser is a pretty limited environment. You don’t have access to a file-system or to many of the other things the standard library may be used to having. Not every crate can even be compiled to WASM, let alone run in a WASM environment.

In particular, you’ll sometimes see errors about the crate `mio` or missing things from `core`. This is generally a sign that you are trying to compile something to WASM that can’t be compiled to WASM. If you’re adding server-only dependencies, you’ll want to mark them `optional = true` in your `Cargo.toml` and then enable them in the `ssr` feature definition. (Check out one of the template `Cargo.toml` files to see more details.)

You can create an [`Effect`](https://docs.rs/leptos/latest/leptos/prelude/struct.Effect.html) to specify that something should only run on the client, and not on the server. Is there a way to specify that something should run only on the server, and not the client?

In fact, there is. The next chapter will cover the topic of server functions in some detail. (In the meantime, you can check out their docs [here](https://docs.rs/leptos/latest/leptos/attr.server.html).)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/ssr/24_hydration_bugs.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/ssr/22_life_cycle.md
# The Life of a Page Load

Before we get into the weeds it might be helpful to have a higher-level overview. What exactly happens between the moment you type in the URL of a server-rendered Leptos app, and the moment you click a button and a counter increases?

I’m assuming some basic knowledge of how the Internet works here, and won’t get into the weeds about HTTP or whatever. Instead, I’ll try to show how different parts of the Leptos APIs map onto each part of the process.

This description also starts from the premise that your app is being compiled for two separate targets:

1. A server version, often running on Actix or Axum, compiled with the Leptos `ssr` feature
2. A browser version, compiled to WebAssembly (WASM) with the Leptos `hydrate` feature

The [`cargo-leptos`](https://github.com/leptos-rs/cargo-leptos) build tool exists to coordinate the process of compiling your app for these two different targets.

## On the Server

- Your browser makes a `GET` request for that URL to your server. At this point, the browser knows almost nothing about the page that’s going to be rendered. (The question “How does the browser know where to ask for the page?” is an interesting one, but out of the scope of this tutorial!)
- The server receives that request, and checks whether it has a way to handle a `GET` request at that path. This is what the `.leptos_routes()` methods in [`leptos_axum`](https://docs.rs/leptos_axum/latest/leptos_axum/trait.LeptosRoutes.html) and [`leptos_actix`](https://docs.rs/leptos_actix/latest/leptos_actix/trait.LeptosRoutes.html) are for. When the server starts up, these methods walk over the routing structure you provide in `<Routes/>`, generating a list of all possible routes your app can handle and telling the server’s router “for each of these routes, if you get a request... hand it off to Leptos.”
- The server sees that this route can be handled by Leptos. So it renders your root component (often called something like `<App/>`), providing it with the URL that’s being requested and some other data like the HTTP headers and request metadata.
- Your application runs once on the server, building up an HTML version of the component tree that will be rendered at that route. (There’s more to be said here about resources and `<Suspense/>` in the next chapter.)
- The server returns this HTML page, also injecting information on how to load the version of your app that has been compiled to WASM so that it can run in the browser.

> The HTML page that’s returned is essentially your app, “dehydrated” or “freeze-dried”: it is HTML without any of the reactivity or event listeners you’ve added. The browser will “rehydrate” this HTML page by adding the reactive system and attaching event listeners to that server-rendered HTML. Hence the two feature flags that apply to the two halves of this process: `ssr` on the server for “server-side rendering”, and `hydrate` in the browser for that process of rehydration.

## In the Browser

- The browser receives this HTML page from the server. It immediately goes back to the server to begin loading the JS and WASM necessary to run the interactive, client side version of the app.
- In the meantime, it renders the HTML version.
- When the WASM version has reloaded, it does the same route-matching process that the server did. Because the `<Routes/>` component is identical on the server and in the client, the browser version will read the URL and render the same page that was already returned by the server.
- During this initial “hydration” phase, the WASM version of your app doesn’t re-create the DOM nodes that make up your application. Instead, it walks over the existing HTML tree, “picking up” existing elements and adding the necessary interactivity.

> Note that there are some trade-offs here. Before this hydration process is complete, the page will _appear_ interactive but won’t actually respond to interactions. For example, if you have a counter button and click it before WASM has loaded, the count will not increment, because the necessary event listeners and reactivity have not been added yet. We’ll look at some ways to build in “graceful degradation” in future chapters.

## Client-Side Navigation

The next step is very important. Imagine that the user now clicks a link to navigate to another page in your application.

The browser will _not_ make another round trip to the server, reloading the full page as it would for navigating between plain HTML pages or an application that uses server rendering (for example with PHP) but without a client-side half.

Instead, the WASM version of your app will load the new page, right there in the browser, without requesting another page from the server. Essentially, your app upgrades itself from a server-loaded “multi-page app” into a browser-rendered “single-page app.” This yields the best of both worlds: a fast initial load time due to the server-rendered HTML, and fast secondary navigations because of the client-side routing.

Some of what will be described in the following chapters—like the interactions between server functions, resources, and `<Suspense/>`—may seem overly complicated. You might find yourself asking, “If my page is being rendered to HTML on the server, why can’t I just `.await` this on the server? If I can just call library X in a server function, why can’t I call it in my component?” The reason is pretty simple: to enable the upgrade from server rendering to client rendering, everything in your application must be able to run on both the client and the server.

This is not the only way to create a website or web framework, of course. But it’s the most common way, and we happen to think it’s quite a good way, to create the smoothest possible experience for your users.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/ssr/22_life_cycle.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/ssr/23_ssr_modes.md
# Async Rendering and SSR “Modes”

Server-rendering a page that uses only synchronous data is pretty simple: You just walk down the component tree, rendering each element to an HTML string. But this is a pretty big caveat: it doesn’t answer the question of what we should do with pages that includes asynchronous data, i.e., the sort of stuff that would be rendered under a `<Suspense/>` node on the client.

When a page loads async data that it needs to render, what should we do? Should we wait for all the async data to load, and then render everything at once? (Let’s call this “async” rendering) Should we go all the way in the opposite direction, just sending the HTML we have immediately down to the client and letting the client load the resources and fill them in? (Let’s call this “synchronous” rendering) Or is there some middle-ground solution that somehow beats them both? (Hint: There is.)

If you’ve ever listened to streaming music or watched a video online, I’m sure you realize that HTTP supports streaming, allowing a single connection to send chunks of data one after another without waiting for the full content to load. You may not realize that browsers are also really good at rendering partial HTML pages. Taken together, this means that you can actually enhance your users’ experience by **streaming HTML**: and this is something that Leptos supports out of the box, with no configuration at all. And there’s actually more than one way to stream HTML: you can stream the chunks of HTML that make up your page in order, like frames of a video, or you can stream them... well, out of order.

Let me say a little more about what I mean.

Leptos supports all the major ways of rendering HTML that includes asynchronous data:

1. [Synchronous Rendering](#synchronous-rendering)
1. [Async Rendering](#async-rendering)
1. [In-Order streaming](#in-order-streaming)
1. [Out-of-Order Streaming](#out-of-order-streaming) (and a partially-blocked variant)

## Synchronous Rendering

1. **Synchronous**: Serve an HTML shell that includes `fallback` for any `<Suspense/>`. Load data on the client using `create_local_resource`, replacing `fallback` once resources are loaded.

- _Pros_: App shell appears very quickly: great TTFB (time to first byte).
- _Cons_
  - Resources load relatively slowly; you need to wait for JS + WASM to load before even making a request.
  - No ability to include data from async resources in the `<title>` or other `<meta>` tags, hurting SEO and things like social media link previews.

If you’re using server-side rendering, the synchronous mode is almost never what you actually want, from a performance perspective. This is because it misses out on an important optimization. If you’re loading async resources during server rendering, you can actually begin loading the data on the server. Rather than waiting for the client to receive the HTML response, then loading its JS + WASM, _then_ realize it needs the resources and begin loading them, server rendering can actually begin loading the resources when the client first makes the response. In this sense, during server rendering an async resource is like a `Future` that begins loading on the server and resolves on the client. As long as the resources are actually serializable, this will always lead to a faster total load time.

> This is why a `Resource` needs its data to be serializable, and why you should use `LocalResource` for any async data that is not serializable and should therefore only be loaded in the browser itself. Creating a local resource when you could create a serializable resource is always a deoptimization.

## Async Rendering

<video controls>
	<source src="https://github.com/leptos-rs/leptos/blob/main/docs/video/async.mov?raw=true" type="video/mp4">
</video>

2. **`async`**: Load all resources on the server. Wait until all data are loaded, and render HTML in one sweep.

- _Pros_: Better handling for meta tags (because you know async data even before you render the `<head>`). Faster complete load than **synchronous** because async resources begin loading on server.
- _Cons_: Slower load time/TTFB: you need to wait for all async resources to load before displaying anything on the client. The page is totally blank until everything is loaded.

## In-Order Streaming

<video controls>
	<source src="https://github.com/leptos-rs/leptos/blob/main/docs/video/in-order.mov?raw=true" type="video/mp4">
</video>

3. **In-order streaming**: Walk through the component tree, rendering HTML until you hit a `<Suspense/>`. Send down all the HTML you’ve got so far as a chunk in the stream, wait for all the resources accessed under the `<Suspense/>` to load, then render it to HTML and keep walking until you hit another `<Suspense/>` or the end of the page.

- _Pros_: Rather than a blank screen, shows at least _something_ before the data are ready.
- _Cons_
  - Loads the shell more slowly than synchronous rendering (or out-of-order streaming) because it needs to pause at every `<Suspense/>`.
  - Unable to show fallback states for `<Suspense/>`.
  - Can’t begin hydration until the entire page has loaded, so earlier pieces of the page will not be interactive until the suspended chunks have loaded.

## Out-of-Order Streaming

<video controls>
	<source src="https://github.com/leptos-rs/leptos/blob/main/docs/video/out-of-order.mov?raw=true" type="video/mp4">
</video>

4. **Out-of-order streaming**: Like synchronous rendering, serve an HTML shell that includes `fallback` for any `<Suspense/>`. But load data on the **server**, streaming it down to the client as it resolves, and streaming down HTML for `<Suspense/>` nodes, which is swapped in to replace the fallback.

- _Pros_: Combines the best of **synchronous** and **`async`**.
  - Fast initial response/TTFB because it immediately sends the whole synchronous shell
  - Fast total time because resources begin loading on the server.
  - Able to show the fallback loading state and dynamically replace it, instead of showing blank sections for un-loaded data.
- _Cons_: Requires JavaScript to be enabled for suspended fragments to appear in correct order. (This small chunk of JS streamed down in a `<script>` tag alongside the `<template>` tag that contains the rendered `<Suspense/>` fragment, so it does not need to load any additional JS files.)

5. **Partially-blocked streaming**: “Partially-blocked” streaming is useful when you have multiple separate `<Suspense/>` components on the page.  It is triggered by setting `ssr=SsrMode::PartiallyBlocked` on a route, and depending on blocking resources within the view.   If one of the `<Suspense/>` components reads from one or more “blocking resources” (see below), the fallback will not be sent; rather, the server will wait until that `<Suspense/>` has resolved and then replace the fallback with the resolved fragment on the server, which means that it is included in the initial HTML response and appears even if JavaScript is disabled or not supported. Other `<Suspense/>` stream in out of order, similar to the `SsrMode::OutOfOrder` default.

This is useful when you have multiple `<Suspense/>` on the page, and one is more important than the other: think of a blog post and comments, or product information and reviews. It is _not_ useful if there’s only one `<Suspense/>`, or if every `<Suspense/>` reads from blocking resources. In those cases it is a slower form of `async` rendering.

- _Pros_: Works if JavaScript is disabled or not supported on the user’s device.
- _Cons_
  - Slower initial response time than out-of-order.
  - Marginally overall response due to additional work on the server.
  - No fallback state shown.

## Using SSR Modes

Because it offers the best blend of performance characteristics, Leptos defaults to out-of-order streaming. But it’s really simple to opt into these different modes. You do it by adding an `ssr` property onto one or more of your `<Route/>` components, like in the [`ssr_modes` example](https://github.com/leptos-rs/leptos/blob/main/examples/ssr_modes/src/app.rs).

```rust
<Routes fallback=|| "Not found.">
	// We’ll load the home page with out-of-order streaming and <Suspense/>
	<Route path=path!("") view=HomePage/>

	// We'll load the posts with async rendering, so they can set
	// the title and metadata *after* loading the data
	<Route
		path=path!("/post/:id")
		view=Post
		ssr=SsrMode::Async
	/>
</Routes>
```

For a path that includes multiple nested routes, the most restrictive mode will be used: i.e., if even a single nested route asks for `async` rendering, the whole initial request will be rendered `async`. `async` is the most restricted requirement, followed by in-order, and then out-of-order. (This probably makes sense if you think about it for a few minutes.)

## Blocking Resources

Blocking resources can be created with `Resource::new_blocking`. A blocking resource still loads asynchronously like any other `async`/`.await` in Rust. It doesn’t block a server thread, or anything like that. Instead, reading from a blocking resource under a `<Suspense/>` blocks the HTML _stream_ from returning anything, including its initial synchronous shell, until that `<Suspense/>` has resolved.

From a performance perspective, this is not ideal. None of the synchronous shell for your page will load until that resource is ready. However, rendering nothing means that you can do things like set the `<title>` or `<meta>` tags in your `<head>` in actual HTML. This sounds a lot like `async` rendering, but there’s one big difference: if you have multiple `<Suspense/>` sections, you can block on _one_ of them but still render a placeholder and then stream in the other.

For example, think about a blog post. For SEO and for social sharing, I definitely want my blog post’s title and metadata in the initial HTML `<head>`. But I really don’t care whether comments have loaded yet or not; I’d like to load those as lazily as possible.

With blocking resources, I can do something like this:

```rust
#[component]
pub fn BlogPost() -> impl IntoView {
    let post_data = Resource::new_blocking(/* load blog post */);
    let comments_data = Resource::new(/* load blog comments */);
    view! {
        <Suspense fallback=|| ()>
            {move || Suspend::new(async move {
                let data = post_data.await;
                view! {
                    <Title text=data.title/>
                    <Meta name="description" content=data.excerpt/>
                    <article>
                        /* render the post content */
                    </article>
                }
            })}
        </Suspense>
        <Suspense fallback=|| "Loading comments...">
            {move || Suspend::new(async move {
                let comments = comments_data.await;
                todo!()
            })}
        </Suspense>
    }
}
```

The first `<Suspense/>`, with the body of the blog post, will block my HTML stream, because it reads from a blocking resource.  Meta tags and other head elements awaiting the blocking resource will be rendered before the stream is sent.

Combined with the following route definition, which uses `SsrMode::PartiallyBlocked`, the blocking resource will be fully rendered on the server side, making it accessible to users who disable WebAssembly or JavaScript.

```rust
<Routes fallback=|| "Not found.">
	// We’ll load the home page with out-of-order streaming and <Suspense/>
	<Route path=path!("") view=HomePage/>

	// We'll load the posts with async rendering, so they can set
	// the title and metadata *after* loading the data
	<Route
		path=path!("/post/:id")
		view=Post
		ssr=SsrMode::PartiallyBlocked
	/>
</Routes>
```

The second `<Suspense/>`, with the comments, will not block the stream. Blocking resources gave me exactly the power and granularity I needed to optimize my page for SEO and user experience.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/ssr/23_ssr_modes.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/progressive_enhancement/action_form.md
# `<ActionForm/>`

[`<ActionForm/>`](https://docs.rs/leptos/latest/leptos/form/fn.ActionForm.html) is a specialized `<Form/>` that takes a server action, and automatically dispatches it on form submission. This allows you to call a server function directly from a `<form>`, even without JS/WASM.

The process is simple:

1. Define a server function using the [`#[server]` macro](https://docs.rs/leptos/latest/leptos/attr.server.html) (see [Server Functions](../server/25_server_functions.md).)
2. Create an action using [`ServerAction::new()`](https://docs.rs/leptos/latest/leptos/server/struct.ServerAction.html), specifying the type of the server function you’ve defined.
3. Create an `<ActionForm/>`, providing the server action in the `action` prop.
4. Pass the named arguments to the server function as form fields with the same names.

> **Note:** `<ActionForm/>` only works with the default URL-encoded `POST` encoding for server functions, to ensure graceful degradation/correct behavior as an HTML form.

```rust
#[server]
pub async fn add_todo(title: String) -> Result<(), ServerFnError> {
    todo!()
}

#[component]
fn AddTodo() -> impl IntoView {
    let add_todo = ServerAction::<AddTodo>::new();
    // holds the latest *returned* value from the server
    let value = add_todo.value();
    // check if the server has returned an error
    let has_error = move || value.with(|val| matches!(val, Some(Err(_))));

    view! {
        <ActionForm action=add_todo>
            <label>
                "Add a Todo"
                // `title` matches the `title` argument to `add_todo`
                <input type="text" name="title"/>
            </label>
            <input type="submit" value="Add"/>
        </ActionForm>
    }
}
```

It’s really that easy. With JS/WASM, your form will submit without a page reload, storing its most recent submission in the `.input()` signal of the action, its pending status in `.pending()`, and so on. (See the [`Action`](https://docs.rs/leptos/latest/leptos/reactive/actions/struct.Action.html) docs for a refresher, if you need.) Without JS/WASM, your form will submit with a page reload. If you call a `redirect` function (from `leptos_axum` or `leptos_actix`) it will redirect to the correct page. By default, it will redirect back to the page you’re currently on. The power of HTML, HTTP, and isomorphic rendering mean that your `<ActionForm/>` simply works, even with no JS/WASM.

## Client-Side Validation

Because the `<ActionForm/>` is just a `<form>`, it fires a `submit` event. You can use either HTML validation, or your own client-side validation logic in an `on:submit:capture` handler. Just call `ev.prevent_default()` to prevent submission.

The [`FromFormData`](https://docs.rs/leptos/latest/leptos/form/trait.FromFormData.html) trait can be helpful here, for attempting to parse your server function’s data type from the submitted form.

```rust
let on_submit = move |ev| {
	let data = AddTodo::from_event(&ev);
	// silly example of validation: if the todo is "nope!", nope it
	if data.is_err() || data.unwrap().title == "nope!" {
		// ev.prevent_default() will prevent form submission
		ev.prevent_default();
	}
}
```

```admonish note
Note the use of `on:submit:capture` rather than `on:submit`. This adds an event listener that will fire during the browser’s “capture” phase of event handling, rather than during the “bubble” phase, which means that your event handler will run before the built-in `submit` handler of the `ActionForm`. For more information, check out [this issue](https://github.com/leptos-rs/leptos/issues/3872).
```

## Complex Inputs

Server function arguments that are structs with nested serializable fields should make use of indexing notation of `serde_qs`.

```rust
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone)]
struct HeftyData {
    first_name: String,
    last_name: String,
}

#[component]
fn ComplexInput() -> impl IntoView {
    let submit = ServerAction::<VeryImportantFn>::new();

    view! {
      <ActionForm action=submit>
        <input type="text" name="hefty_arg[first_name]" value="leptos"/>
        <input
          type="text"
          name="hefty_arg[last_name]"
          value="closures-everywhere"
        />
        <input type="submit"/>
      </ActionForm>
    }
}

#[server]
async fn very_important_fn(hefty_arg: HeftyData) -> Result<(), ServerFnError> {
    assert_eq!(hefty_arg.first_name.as_str(), "leptos");
    assert_eq!(hefty_arg.last_name.as_str(), "closures-everywhere");
    Ok(())
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/progressive_enhancement/action_form.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/progressive_enhancement/README.md
# Progressive Enhancement (and Graceful Degradation)

I’ve been driving around Boston for about fifteen years. If you don’t know Boston, let me tell you: Massachusetts has some of the most aggressive drivers (and pedestrians!) in the world. I’ve learned to practice what’s sometimes called “defensive driving”: assuming that someone’s about to swerve in front of you at an intersection when you have the right of way, preparing for a pedestrian to cross into the street at any moment, and driving accordingly.

“Progressive enhancement” is the “defensive driving” of web design. Or really, that’s “graceful degradation,” although they’re two sides of the same coin, or the same process, from two different directions.

**Progressive enhancement**, in this context, means beginning with a simple HTML site or application that works for any user who arrives at your page, and gradually enhancing it with layers of additional features: CSS for styling, JavaScript for interactivity, WebAssembly for Rust-powered interactivity; using particular Web APIs for a richer experience if they’re available and as needed.

**Graceful degradation** means handling failure gracefully when parts of that stack of enhancement _aren’t_ available. Here are some sources of failure your users might encounter in your app:

- Their browser doesn’t support WebAssembly because it needs to be updated.
- Their browser can’t support WebAssembly because browser updates are limited to newer OS versions, which can’t be installed on the device. (Looking at you, Apple.)
- They have WASM turned off for security or privacy reasons.
- They have JavaScript turned off for security or privacy reasons.
- JavaScript isn’t supported on their device (for example, some accessibility devices only support HTML browsing)
- The JavaScript (or WASM) never arrived at their device because they walked outside and lost WiFi.
- They stepped onto a subway car after loading the initial page and subsequent navigations can’t load data.
- ... and so on.

How much of your app still works if one of these holds true? Two of them? Three?

If the answer is something like “95%... okay, then 90%... okay, then 75%,” that’s graceful degradation. If the answer is “my app shows a blank screen unless everything works correctly,” that’s... rapid unscheduled disassembly.

**Graceful degradation is especially important for WASM apps,** because WASM is the newest and least-likely-to-be-supported of the four languages that run in the browser (HTML, CSS, JS, WASM).

Luckily, we’ve got some tools to help.

## Defensive Design

There are a few practices that can help your apps degrade more gracefully:

1. **Server-side rendering.** Without SSR, your app simply doesn’t work without both JS and WASM loading. In some cases this may be appropriate (think internal apps gated behind a login) but in others it’s simply broken.
2. **Native HTML elements.** Use HTML elements that do the things that you want, without additional code: `<a>` for navigation (including to hashes within the page), `<details>` for an accordion, `<form>` to persist information in the URL, etc.
3. **URL-driven state.** The more of your global state is stored in the URL (as a route param or part of the query string), the more of the page can be generated during server rendering and updated by an `<a>` or a `<form>`, which means that not only navigations but state changes can work without JS/WASM.
4. **[`SsrMode::PartiallyBlocked` or `SsrMode::InOrder`](https://docs.rs/leptos_router/latest/leptos_router/enum.SsrMode.html).** Out-of-order streaming requires a small amount of inline JS, but can fail if 1) the connection is broken halfway through the response or 2) the client’s device doesn’t support JS. Async streaming will give a complete HTML page, but only after all resources load. In-order streaming begins showing pieces of the page sooner, in top-down order. “Partially-blocked” SSR builds on out-of-order streaming by replacing `<Suspense/>` fragments that read from blocking resources on the server. This adds marginally to the initial response time (because of the `O(n)` string replacement work), in exchange for a more complete initial HTML response. This can be a good choice for situations in which there’s a clear distinction between “more important” and “less important” content, e.g., blog post vs. comments, or product info vs. reviews. If you choose to block on all the content, you’ve essentially recreated async rendering.
5. **Leaning on `<form>`s.** There’s been a bit of a `<form>` renaissance recently, and it’s no surprise. The ability of a `<form>` to manage complicated `POST` or `GET` requests in an easily-enhanced way makes it a powerful tool for graceful degradation. The example in [the `<Form/>` chapter](../router/20_form.md), for example, would work fine with no JS/WASM: because it uses a `<form method="GET">` to persist state in the URL, it works with pure HTML by making normal HTTP requests and then progressively enhances to use client-side navigations instead.

There’s one final feature of the framework that we haven’t seen yet, and which builds on this characteristic of forms to build powerful applications: the `<ActionForm/>`.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/progressive_enhancement/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/deployment/csr.md
# Deploying a Client-Side-Rendered App

If you’ve been building an app that only uses client-side rendering, working with Trunk as a dev server and build tool, the process is quite easy.

```bash
trunk build --release
```

`trunk build` will create a number of build artifacts in a `dist/` directory. Publishing `dist` somewhere online should be all you need to deploy your app. This should work very similarly to deploying any JavaScript application.

We've created several example repositories which show how to set up and deploy a Leptos CSR app to various hosting services.

_Note: Leptos does not endorse the use of any particular hosting service - feel free to use any service that supports static site deploys._

Examples:

- [Github Pages](#github-pages)
- [Vercel](#vercel)
- [Spin (serverless WebAssembly)](#spin---serverless-webassembly)

## Github Pages

Deploying a Leptos CSR app to Github pages is a simple affair. First, go to your Github repo's settings and click on "Pages" in the left side menu. In the "Build and deployment" section of the page, change the "source" to "Github Actions". Then copy the following into a file such as `.github/workflows/gh-pages-deploy.yml`

```admonish example collapsible=true

    name: Release to Github Pages

    on:
      push:
        branches: [main]
      workflow_dispatch:

    permissions:
      contents: write # for committing to gh-pages branch.
      pages: write
      id-token: write

    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: "pages"
      cancel-in-progress: false

    jobs:
      Github-Pages-Release:

        timeout-minutes: 10

        environment:
          name: github-pages
          url: ${{ steps.deployment.outputs.page_url }}

        runs-on: ubuntu-latest

        steps:
          - uses: actions/checkout@v4 # repo checkout

          # Install Rust Nightly Toolchain, with Clippy & Rustfmt
          - name: Install nightly Rust
            uses: dtolnay/rust-toolchain@nightly
            with:
              components: clippy, rustfmt

          - name: Add WASM target
            run: rustup target add wasm32-unknown-unknown

          - name: lint
            run: cargo clippy & cargo fmt


          # If using tailwind...
          # - name: Download and install tailwindcss binary
          #   run: npm install -D tailwindcss && npx tailwindcss -i <INPUT/PATH.css> -o <OUTPUT/PATH.css>  # run tailwind


          - name: Download and install Trunk binary
            run: wget -qO- https://github.com/trunk-rs/trunk/releases/download/v0.18.4/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-

          - name: Build with Trunk
            # "${GITHUB_REPOSITORY#*/}" evaluates into the name of the repository
            # using --public-url something will allow trunk to modify all the href paths like from favicon.ico to repo_name/favicon.ico .
            # this is necessary for github pages where the site is deployed to username.github.io/repo_name and all files must be requested
            # relatively as favicon.ico. if we skip public-url option, the href paths will instead request username.github.io/favicon.ico which
            # will obviously return error 404 not found.
            run: ./trunk build --release --public-url "${GITHUB_REPOSITORY#*/}"


          # Deploy to gh-pages branch
          # - name: Deploy 🚀
          #   uses: JamesIves/github-pages-deploy-action@v4
          #   with:
          #     folder: dist


          # Deploy with Github Static Pages

          - name: Setup Pages
            uses: actions/configure-pages@v4
            with:
              enablement: true
              # token:

          - name: Upload artifact
            uses: actions/upload-pages-artifact@v2
            with:
              # Upload dist dir
              path: './dist'

          - name: Deploy to GitHub Pages 🚀
            id: deployment
            uses: actions/deploy-pages@v3

```

For more on deploying to Github Pages [see the example repo here](https://github.com/diversable/deploy_leptos_csr_to_gh_pages)

## Vercel

### Step 1: Set Up Vercel

In the Vercel Web UI...

1. Create a new project
2. Ensure
   - The "Build Command" is left empty with Override on
   - The "Output Directory" is changed to dist (which is the default output directory for Trunk builds) and the Override is on

<img src="./image.png" />

### Step 2: Add Vercel Credentials for GitHub Actions

Note: Both the preview and deploy actions will need your Vercel credentials setup in GitHub secrets

1. Retrieve your [Vercel Access Token](https://vercel.com/guides/how-do-i-use-a-vercel-api-access-token) by going to "Account Settings" > "Tokens" and creating a new token - save the token to use in sub-step 5, below.

2. Install the [Vercel CLI](https://vercel.com/cli) using the `npm i -g vercel` command, then run `vercel login` to login to your acccount.

3. Inside your folder, run `vercel link` to create a new Vercel project; in the CLI, you will be asked to 'Link to an existing project?' - answer yes, then enter the name you created in step 1. A new `.vercel` folder will be created for you.

4. Inside the generated `.vercel` folder, open the the `project.json` file and save the "projectId" and "orgId" for the next step.

5. Inside GitHub, go the repo's "Settings" > "Secrets and Variables" > "Actions" and add the following as [Repository secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets):
   - save your Vercel Access Token (from sub-step 1) as the `VERCEL_TOKEN` secret
   - from the `.vercel/project.json` add "projectID" as `VERCEL_PROJECT_ID`
   - from the `.vercel/project.json` add "orgId" as `VERCEL_ORG_ID`

<i>For full instructions see ["How can I use Github Actions with Vercel"](https://vercel.com/guides/how-can-i-use-github-actions-with-vercel)</i>

### Step 3: Add Github Action Scripts

Finally, you're ready to simply copy and paste the two files - one for deployment, one for PR previews - from below or from [the example repo's `.github/workflows/` folder](https://github.com/diversable/vercel-leptos-CSR-deployment/tree/leptos_0.6/.github/workflows) into your own github workflows folder - then, on your next commit or PR deploys will occur automatically.

<i>Production deployment script: `vercel_deploy.yml`</i>

```admonish example collapsible=true

	name: Release to Vercel

	on:
	push:
		branches:
		- main
	env:
	CARGO_TERM_COLOR: always
	VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
	VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

	jobs:
	Vercel-Production-Deployment:
		runs-on: ubuntu-latest
		environment: production
		steps:
		- name: git-checkout
			uses: actions/checkout@v3

		- uses: dtolnay/rust-toolchain@nightly
			with:
			components: clippy, rustfmt
		- uses: Swatinem/rust-cache@v2
		- name: Setup Rust
			run: |
			rustup target add wasm32-unknown-unknown
			cargo clippy
			cargo fmt --check

		- name: Download and install Trunk binary
			run: wget -qO- https://github.com/trunk-rs/trunk/releases/download/v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-


		- name: Build with Trunk
			run: ./trunk build --release

		- name: Install Vercel CLI
			run: npm install --global vercel@latest

		- name: Pull Vercel Environment Information
			run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

		- name: Deploy to Vercel & Display URL
			id: deployment
			working-directory: ./dist
			run: |
			vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} >> $GITHUB_STEP_SUMMARY
			echo $GITHUB_STEP_SUMMARY

```

<i>Preview deployments script: `vercel_preview.yml`</i>

```admonish example collapsible=true

	# For more info re: vercel action see:
	# https://github.com/amondnet/vercel-action

	name: Leptos CSR Vercel Preview

	on:
	pull_request:
		branches: [ "main" ]

	workflow_dispatch:

	env:
	CARGO_TERM_COLOR: always
	VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
	VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

	jobs:
	fmt:
		name: Rustfmt
		runs-on: ubuntu-latest
		steps:
		- uses: actions/checkout@v4
		- uses: dtolnay/rust-toolchain@nightly
			with:
			components: rustfmt
		- name: Enforce formatting
			run: cargo fmt --check

	clippy:
		name: Clippy
		runs-on: ubuntu-latest
		steps:
		- uses: actions/checkout@v4
		- uses: dtolnay/rust-toolchain@nightly
			with:
			components: clippy
		- uses: Swatinem/rust-cache@v2
		- name: Linting
			run: cargo clippy -- -D warnings

	test:
		name: Test
		runs-on: ubuntu-latest
		needs: [fmt, clippy]
		steps:
		- uses: actions/checkout@v4
		- uses: dtolnay/rust-toolchain@nightly
		- uses: Swatinem/rust-cache@v2
		- name: Run tests
			run: cargo test

	build-and-preview-deploy:
		runs-on: ubuntu-latest
		name: Build and Preview

		needs: [test, clippy, fmt]

		permissions:
		pull-requests: write

		environment:
		name: preview
		url: ${{ steps.preview.outputs.preview-url }}

		steps:
		- name: git-checkout
			uses: actions/checkout@v4

		- uses: dtolnay/rust-toolchain@nightly
		- uses: Swatinem/rust-cache@v2
		- name: Build
			run: rustup target add wasm32-unknown-unknown

		- name: Download and install Trunk binary
			run: wget -qO- https://github.com/trunk-rs/trunk/releases/download/v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-


		- name: Build with Trunk
			run: ./trunk build --release

		- name: Preview Deploy
			id: preview
			uses: amondnet/vercel-action@v25.1.1
			with:
			vercel-token: ${{ secrets.VERCEL_TOKEN }}
			github-token: ${{ secrets.GITHUB_TOKEN }}
			vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
			vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
			github-comment: true
			working-directory: ./dist

		- name: Display Deployed URL
			run: |
			echo "Deployed app URL: ${{ steps.preview.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY


```

See [the example repo here](https://github.com/diversable/vercel-leptos-CSR-deployment) for more.

## Spin - Serverless WebAssembly

Another option is using a serverless platform such as Spin. Although [Spin](https://github.com/fermyon/spin) is open source and you can run it on your own infrastructure (eg. inside Kubernetes), the easiest way to get started with Spin in production is to use the Fermyon Cloud.

Start by installing the [Spin CLI using the instructions, here](https://developer.fermyon.com/spin/v2/install), and creating a Github repo for your Leptos CSR project, if you haven't done so already.

1. Open "Fermyon Cloud" > "User Settings". If you’re not logged in, choose the Login With GitHub button.

2. In the “Personal Access Tokens”, choose “Add a Token”. Enter the name “gh_actions” and click “Create Token”.

3. Fermyon Cloud displays the token; click the copy button to copy it to your clipboard.

4. Go into your Github repo and open "Settings" > "Secrets and Variables" > "Actions" and add the Fermyon cloud token to "Repository secrets" using the variable name "FERMYON_CLOUD_TOKEN"

5. Copy and paste the following Github Actions scripts (below) into your `.github/workflows/<SCRIPT_NAME>.yml` files

6. With the 'preview' and 'deploy' scripts active, Github Actions will now generate previews on pull requests & deploy automatically on updates to your 'main' branch.

<i>Production deployment script: `spin_deploy.yml`</i>

```admonish example collapsible=true

	# For setup instructions needed for Fermyon Cloud, see:
	# https://developer.fermyon.com/cloud/github-actions

	# For reference, see:
	# https://developer.fermyon.com/cloud/changelog/gh-actions-spin-deploy

	# For the Fermyon gh actions themselves, see:
	# https://github.com/fermyon/actions

	name: Release to Spin Cloud

	on:
	push:
		branches: [main]
	workflow_dispatch:

	permissions:
	contents: read
	id-token: write

	# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
	# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
	concurrency:
	group: "spin"
	cancel-in-progress: false

	jobs:
	Spin-Release:

		timeout-minutes: 10

		environment:
		name: production
		url: ${{ steps.deployment.outputs.app-url }}

		runs-on: ubuntu-latest

		steps:
		- uses: actions/checkout@v4 # repo checkout

		# Install Rust Nightly Toolchain, with Clippy & Rustfmt
		- name: Install nightly Rust
			uses: dtolnay/rust-toolchain@nightly
			with:
			components: clippy, rustfmt

		- name: Add WASM & WASI targets
			run: rustup target add wasm32-unknown-unknown && rustup target add wasm32-wasi

		- name: lint
			run: cargo clippy & cargo fmt


		# If using tailwind...
		# - name: Download and install tailwindcss binary
		#   run: npm install -D tailwindcss && npx tailwindcss -i <INPUT/PATH.css> -o <OUTPUT/PATH.css>  # run tailwind


		- name: Download and install Trunk binary
			run: wget -qO- https://github.com/trunk-rs/trunk/releases/download/v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-


		- name: Build with Trunk
			run: ./trunk build --release


		# Install Spin CLI & Deploy

		- name: Setup Spin
			uses: fermyon/actions/spin/setup@v1
			# with:
			# plugins:


		- name: Build and deploy
			id: deployment
			uses: fermyon/actions/spin/deploy@v1
			with:
			fermyon_token: ${{ secrets.FERMYON_CLOUD_TOKEN }}
			# key_values: |-
				# abc=xyz
				# foo=bar
			# variables: |-
				# password=${{ secrets.SECURE_PASSWORD }}
				# apikey=${{ secrets.API_KEY }}

		# Create an explicit message to display the URL of the deployed app, as well as in the job graph
		- name: Deployed URL
			run: |
			echo "Deployed app URL: ${{ steps.deployment.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY

```

<i>Preview deployment script: `spin_preview.yml`</i>

```admonish example collapsible=true

	# For setup instructions needed for Fermyon Cloud, see:
	# https://developer.fermyon.com/cloud/github-actions


	# For the Fermyon gh actions themselves, see:
	# https://github.com/fermyon/actions

	# Specifically:
	# https://github.com/fermyon/actions?tab=readme-ov-file#deploy-preview-of-spin-app-to-fermyon-cloud---fermyonactionsspinpreviewv1

	name: Preview on Spin Cloud

	on:
	pull_request:
		branches: ["main", "v*"]
		types: ['opened', 'synchronize', 'reopened', 'closed']
	workflow_dispatch:

	permissions:
	contents: read
	pull-requests: write

	# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
	# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
	concurrency:
	group: "spin"
	cancel-in-progress: false

	jobs:
	Spin-Preview:

		timeout-minutes: 10

		environment:
		name: preview
		url: ${{ steps.preview.outputs.app-url }}

		runs-on: ubuntu-latest

		steps:
		- uses: actions/checkout@v4 # repo checkout

		# Install Rust Nightly Toolchain, with Clippy & Rustfmt
		- name: Install nightly Rust
			uses: dtolnay/rust-toolchain@nightly
			with:
			components: clippy, rustfmt

		- name: Add WASM & WASI targets
			run: rustup target add wasm32-unknown-unknown && rustup target add wasm32-wasi

		- name: lint
			run: cargo clippy & cargo fmt


		# If using tailwind...
		# - name: Download and install tailwindcss binary
		#   run: npm install -D tailwindcss && npx tailwindcss -i <INPUT/PATH.css> -o <OUTPUT/PATH.css>  # run tailwind


		- name: Download and install Trunk binary
			run: wget -qO- https://github.com/trunk-rs/trunk/releases/download/v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-


		- name: Build with Trunk
			run: ./trunk build --release


		# Install Spin CLI & Deploy

		- name: Setup Spin
			uses: fermyon/actions/spin/setup@v1
			# with:
			# plugins:


		- name: Build and preview
			id: preview
			uses: fermyon/actions/spin/preview@v1
			with:
			fermyon_token: ${{ secrets.FERMYON_CLOUD_TOKEN }}
			github_token: ${{ secrets.GITHUB_TOKEN }}
			undeploy: ${{ github.event.pull_request && github.event.action == 'closed' }}
			# key_values: |-
				# abc=xyz
				# foo=bar
			# variables: |-
				# password=${{ secrets.SECURE_PASSWORD }}
				# apikey=${{ secrets.API_KEY }}


		- name: Display Deployed URL
			run: |
			echo "Deployed app URL: ${{ steps.preview.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY

```

See [the example repo here](https://github.com/diversable/leptos-spin-CSR).

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/deployment/csr.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/deployment/README.md
# Deployment

There are as many ways to deploy a web application as there are developers, let alone applications. But there are a couple useful tips to keep in mind when deploying an app.

## General Advice

1. Remember: Always deploy Rust apps built in `--release` mode, not debug mode. This has a huge effect on both performance and binary size.
2. Test locally in release mode as well. The framework applies certain optimizations in release mode that it does not apply in debug mode, so it’s possible for bugs to surface at this point. (If your app behaves differently or you do encounter a bug, it’s likely a framework-level bug and you should open a GitHub issue with a reproduction.)
3. See the chapter on "Optimizing WASM Binary Size" for additional tips and tricks to further improve the time-to-interactive metric for your WASM app on first load.

> We asked users to submit their deployment setups to help with this chapter. I’ll quote from them below, but you can read the full thread [here](https://github.com/leptos-rs/leptos/issues/1152).


-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/deployment/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/deployment/ssr.md
# Deploying a Full-Stack SSR App

It's possible to deploy Leptos fullstack, SSR apps to any number of server or container hosting services. The most simple way to get a Leptos SSR app into production might be to use a VPS service and either run Leptos natively in a VM ([see here for more details](https://github.com/leptos-rs/start-axum?tab=readme-ov-file#executing-a-server-on-a-remote-machine-without-the-toolchain)). Alternatively, you could containerize your Leptos app and run it in [Podman](https://podman.io/) or [Docker](https://www.docker.com/) on any colocated or cloud server.

There are a multitude of different deployment setups and hosting services, and in general, Leptos itself is agnostic to the deployment setup you use. With this diversity of deployment targets in mind, on this page we will go over:

- [creating a `Containerfile` (or `Dockerfile`) for use with Leptos SSR apps](#creating-a-containerfile)
- Using a `Dockerfile` to [deploy to a cloud service](#cloud-deployments) - [for example, Fly.io](#deploy-to-flyio)
- Deploying Leptos to [serverless runtimes](#deploy-to-serverless-runtimes) - for example, [AWS Lambda](#aws-lambda) and [JS-hosted WASM runtimes like Deno & Cloudflare](#deno--cloudflare-workers)
- [Platforms that have not yet gained Leptos SSR support](#currently-unsupported-platforms)

_Note: Leptos does not endorse the use of any particular method of deployment or hosting service._

## Creating a Containerfile

The most popular way for people to deploy full-stack apps built with `cargo-leptos` is to use a cloud hosting service that supports deployment via a Podman or Docker build. Here’s a sample `Containerfile` / `Dockerfile`, which is based on the one we use to deploy the Leptos website.

### Debian

```dockerfile
# Get started with a build env with Rust nightly
FROM rustlang/rust:nightly-bookworm as builder

# If you’re using stable, use this instead
# FROM rust:1.88-bookworm as builder

# Install cargo-binstall, which makes it easier to install other
# cargo extensions like cargo-leptos
RUN wget https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-unknown-linux-musl.tgz
RUN tar -xvf cargo-binstall-x86_64-unknown-linux-musl.tgz
RUN cp cargo-binstall /usr/local/cargo/bin

# Install required tools
RUN apt-get update -y \
  && apt-get install -y --no-install-recommends clang

# Install cargo-leptos
RUN cargo binstall cargo-leptos -y

# Add the WASM target
RUN rustup target add wasm32-unknown-unknown

# Make an /app dir, which everything will eventually live in
RUN mkdir -p /app
WORKDIR /app
COPY . .

# Build the app
RUN cargo leptos build --release -vv

FROM debian:bookworm-slim as runtime
WORKDIR /app
RUN apt-get update -y \
  && apt-get install -y --no-install-recommends openssl ca-certificates \
  && apt-get autoremove -y \
  && apt-get clean -y \
  && rm -rf /var/lib/apt/lists/*

# -- NB: update binary name from "leptos_start" to match your app name in Cargo.toml --
# Copy the server binary to the /app directory
COPY --from=builder /app/target/release/leptos_start /app/

# /target/site contains our JS/WASM/CSS, etc.
COPY --from=builder /app/target/site /app/site

# Copy Cargo.toml if it’s needed at runtime
COPY --from=builder /app/Cargo.toml /app/

# Set any required env variables and
ENV RUST_LOG="info"
ENV LEPTOS_SITE_ADDR="0.0.0.0:8080"
ENV LEPTOS_SITE_ROOT="site"
EXPOSE 8080

# -- NB: update binary name from "leptos_start" to match your app name in Cargo.toml --
# Run the server
CMD ["/app/leptos_start"]
```

### Alpine

```dockerfile
# Get started with a build env with Rust nightly
FROM rustlang/rust:nightly-alpine as builder

RUN apk update && \
    apk add --no-cache bash curl npm libc-dev binaryen

RUN npm install -g sass

RUN curl --proto '=https' --tlsv1.3 -LsSf https://github.com/leptos-rs/cargo-leptos/releases/latest/download/cargo-leptos-installer.sh | sh

# Add the WASM target
RUN rustup target add wasm32-unknown-unknown

WORKDIR /work
COPY . .

RUN cargo leptos build --release -vv

FROM rustlang/rust:nightly-alpine as runner

WORKDIR /app

COPY --from=builder /work/target/release/leptos_start /app/
COPY --from=builder /work/target/site /app/site
COPY --from=builder /work/Cargo.toml /app/

ENV RUST_LOG="info"
ENV LEPTOS_SITE_ADDR="0.0.0.0:8080"
ENV LEPTOS_SITE_ROOT=./site
EXPOSE 8080

CMD ["/app/leptos_start"]
```

> Read more: [`gnu` and `musl` build files for Leptos apps](https://github.com/leptos-rs/leptos/issues/1152#issuecomment-1634916088).

## Cloud Deployments

### Deploy to Fly.io

One option for deploying your Leptos SSR app is to use a service like [Fly.io](https://fly.io/), which takes a Dockerfile definition of your Leptos app and runs it in a quick-starting micro-VM; Fly also offers a variety of storage options and managed DBs to use with your projects. The following example will show how to deploy a simple Leptos starter app, just to get you up and going; [see here for more about working with storage options on Fly.io](https://fly.io/docs/database-storage-guides/) if and when required.

First, create a `Dockerfile` in the root of your application and fill it in with the suggested contents (above); make sure to update the binary names in the Dockerfile example
to the name of your own application, and make other adjustments as necessary.

Also, ensure you have the `flyctl` CLI tool installed, and have an account set up at [Fly.io](https://fly.io/). To install `flyctl` on MacOS, Linux, or Windows WSL, run:

```sh
curl -L https://fly.io/install.sh | sh
```

If you have issues, or for installing to other platforms [see the full instructions here](https://fly.io/docs/hands-on/install-flyctl/)

Then login to Fly.io

```sh
fly auth login
```

and manually launch your app using the command

```sh
fly launch
```

The `flyctl` CLI tool will walk you through the process of deploying your app to Fly.io.

```admonish note
By default, Fly.io will auto-stop machines that don't have traffic coming to them after a certain period of time. Although Fly.io's lightweight VM's start up quickly, if you want to minimize the latency of your Leptos app and ensure it's always swift to respond, go into the generated `fly.toml` file and change the `min_machines_running` to 1 from the default of 0.

[See this page in the Fly.io docs for more details](https://fly.io/docs/apps/autostart-stop/).
```

If you prefer to use Github Actions to manage your deployments, you will need to create a new access token via the [Fly.io](https://fly.io/) web UI.

Go to "Account" > "Access Tokens" and create a token named something like "github_actions", then add the token to your Github repo's secrets by going into your project's Github repo, then clicking
"Settings" > "Secrets and Variables" > "Actions" and creating a "New repository secret" with the name "FLY_API_TOKEN".

To generate a `fly.toml` config file for deployment to Fly.io, you must first run the following from within the project source directory

```sh
fly launch --no-deploy
```

to create a new Fly app and register it with the service. Git commit your new `fly.toml` file.

To set up the Github Actions deployment workflow, copy the following into a `.github/workflows/fly_deploy.yml` file:

```admonish example collapsible=true

	# For more details, see: https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/

	name: Deploy to Fly.io
	on:
	push:
		branches:
		- main
	jobs:
	deploy:
		name: Deploy app
		runs-on: ubuntu-latest
		steps:
		- uses: actions/checkout@v4
		- uses: superfly/flyctl-actions/setup-flyctl@master
		- name: Deploy to fly
			id: deployment
			run: |
			  flyctl deploy --remote-only | tail -n 1 >> $GITHUB_STEP_SUMMARY
			env:
			  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

```

On the next commit to your Github `main` branch, your project will automatically deploy to Fly.io.

See [the example repo here](https://github.com/diversable/fly-io-leptos-ssr-test-deploy).

### Railway

Another provider for cloud deployments is [Railway](https://railway.app/).
Railway integrates with GitHub to automatically deploy your code.

There is an opinionated community template that gets you started quickly:

[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/pduaM5?referralCode=fZ-SY1)

The template has renovate setup to keep dependencies up to date and supports GitHub Actions to test your code before a deploy happens.

Railway has a free tier that does not require a credit card, and with how little resources Leptos needs that free tier should last a long time.

See [the example repo here](https://github.com/marvin-bitterlich/leptos-railway).

## Deploy to Serverless Runtimes

Leptos supports deploying to FaaS (Function as a Service) or 'serverless' runtimes such as AWS Lambda as well as [WinterCG](https://wintercg.org/)-compatible JS runtimes such as [Deno](https://deno.com/deploy) and Cloudflare. Just be aware that serverless environments do place some restrictions on the functionality available to your SSR app when compared with VM or container type deployments (see notes, below).

### AWS Lambda

With a little help from the [Cargo Lambda](https://www.cargo-lambda.info/) tool, Leptos SSR apps can be deployed to AWS Lambda. A starter template repo using Axum as the server is available at [leptos-rs/start-aws](https://github.com/leptos-rs/start-aws); the instructions there can be adapted for you to use a Leptos+Actix-web server as well. The starter repo includes a Github Actions script for CI/CD, as well as instructions for setting up your Lambda functions and getting the necessary credentials for cloud deployment.

However, please keep in mind that some native server functionality does not work with FaaS services like Lambda because the environment is not necessarily consistent from one request to the next. In particular, the ['start-aws' docs](https://github.com/leptos-rs/start-aws#state) state that "since AWS Lambda is a serverless platform, you'll need to be more careful about how you manage long-lived state. Writing to disk or using a state extractor will not work reliably across requests. Instead, you'll need a database or other microservices that you can query from the Lambda function."

The other factor to bear in mind is the 'cold-start' time for functions as a service - depending on your use case and the FaaS platform you use, this may or may not meet your latency requirements; you may need to keep one function running at all times to optimize the speed of your requests.

### Deno & Cloudflare Workers

Currently, Leptos-Axum supports running in Javascript-hosted WebAssembly runtimes such as Deno, Cloudflare Workers, etc. This option requires some changes to the setup of your source code (for example, in `Cargo.toml` you must define your app using `crate-type = ["cdylib"]` and the "wasm" feature must be enabled for `leptos_axum`). [The Leptos HackerNews JS-fetch example](https://github.com/leptos-rs/leptos/tree/leptos_0.6/examples/hackernews_js_fetch) demonstrates the required modifications and shows how to run an app in the Deno runtime. Additionally, the [`leptos_axum` crate docs](https://docs.rs/leptos_axum/latest/leptos_axum/#js-fetch-integration) are a helpful reference when setting up your own `Cargo.toml` file for JS-hosted WASM runtimes.

While the initial setup for JS-hosted WASM runtimes is not onerous, the more important restriction to keep in mind is that since your app will be compiled to WebAssembly (`wasm32-unknown-unknown`) on the server as well as the client, you must ensure that the crates you use in your app are all WASM-compatible; this may or may not be a deal-breaker depending on your app's requirements, as not all crates in the Rust ecosystem have WASM support.

If you're willing to live with the limitations of WASM server-side, the best place to get started right now is by checking out the [example of running Leptos with Deno](https://github.com/leptos-rs/leptos/tree/leptos_0.6/examples/hackernews_js_fetch) in the official Leptos Github repo.

## Platforms Working on Leptos Support

### Deploy to Spin Serverless WASI (with Leptos SSR)

WebAssembly on the server has been gaining steam lately, and the developers of the open source serverless WebAssembly framework Spin are working on natively supporting Leptos. While the Leptos-Spin SSR integration is still in its early stages, there is a working example you may wish to try out.

The full set of instructions to get Leptos SSR & Spin working together are available as [a post on the Fermyon blog](https://www.fermyon.com/blog/leptos-spin-get-started), or if you want to skip the article and just start playing around with a working starter repo, [see here](https://github.com/diversable/leptos-spin-ssr-test).

### Deploy to Shuttle.rs

Several Leptos users have asked about the possibility of using the Rust-friendly [Shuttle.rs](https://www.shuttle.rs/) service to deploy Leptos apps. Unfortunately, Leptos is not officially supported by the Shuttle.rs service at the moment.

However, the folks at Shuttle.rs are committed to getting Leptos support in the future; if you would like to keep up-to-date on the status of that work, keep an eye on [this Github issue](https://github.com/shuttle-hq/shuttle/issues/1002#issuecomment-1853661643).

Additionally, some effort has been made to get Shuttle working with Leptos, but to date, deploys to the Shuttle cloud are still not working as expected. That work is available here, if you would like to investigate for yourself or contribute fixes: [Leptos Axum Starter Template for Shuttle.rs](https://github.com/Rust-WASI-WASM/shuttle-leptos-axum).

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/deployment/ssr.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/deployment/binary_size.md
# Optimizing WASM Binary Size

One of the primary downsides of deploying a Rust/WebAssembly frontend app is that splitting a WASM file into smaller chunks to be dynamically loaded is significantly more difficult than splitting a JavaScript bundle. There have been experiments like [`wasm-split`](https://emscripten.org/docs/optimizing/Module-Splitting.html) in the Emscripten ecosystem but at present there’s no way to split and dynamically load a Rust/`wasm-bindgen` binary. This means that the whole WASM binary needs to be loaded before your app becomes interactive. Because the WASM format is designed for streaming compilation, WASM files are much faster to compile per kilobyte than JavaScript files. (For a deeper look, you can [read this great article from the Mozilla team](https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/) on streaming WASM compilation.)

Still, it’s important to ship the smallest WASM binary to users that you can, as it will reduce their network usage and make your app interactive as quickly as possible.

So what are some practical steps?

## Things to Do

1. Make sure you’re looking at a release build. (Debug builds are much, much larger.)
2. Add a release profile for WASM that optimizes for size, not speed.

For a `cargo-leptos` project, for example, you can add this to your `Cargo.toml`:

```toml
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1

# ....

[package.metadata.leptos]
# ....
lib-profile-release = "wasm-release"
```

This will hyper-optimize the WASM for your release build for size, while keeping your server build optimized for speed. (For a pure client-rendered app without server considerations, just use the `[profile.wasm-release]` block as your `[profile.release]`.)

3. Always serve compressed WASM in production. WASM tends to compress very well, typically shrinking to less than 50% its uncompressed size, and it’s trivial to enable compression for static files being served from Actix or Axum.

4. If you’re using nightly Rust, you can rebuild the standard library with this same profile rather than the prebuilt standard library that’s distributed with the `wasm32-unknown-unknown` target.

To do this, create a file in your project at `.cargo/config.toml`

```toml
[unstable]
build-std = ["std", "panic_abort", "core", "alloc"]
build-std-features = ["panic_immediate_abort"]
```

Note that if you're using this with SSR too, the same Cargo profile will be applied. You'll need to explicitly specify your target:
```toml
[build]
target = "x86_64-unknown-linux-gnu" # or whatever
```

Also note that in some cases, the cfg feature `has_std` will not be set, which may cause build errors with some dependencies which check for `has_std`. You may fix any build errors due to this by adding:
```toml
[build]
rustflags = ["--cfg=has_std"]
```

And you'll need to add `panic = "abort"` to `[profile.release]` in `Cargo.toml`. Note that this applies the same `build-std` and panic settings to your server binary, which may not be desirable. Some further exploration is probably needed here.

5. One of the sources of binary size in WASM binaries can be `serde` serialization/deserialization code. Leptos uses `serde` by default to serialize and deserialize resources created with `create_resource`. You might try experimenting with the `miniserde` and `serde-lite` features, which allow you to use those crates for serialization and deserialization instead; each only implements a subset of `serde`’s functionality, but typically optimizes for size over speed.

## Things to Avoid

There are certain crates that tend to inflate binary sizes. For example, the `regex` crate with its default features adds about 500kb to a WASM binary (largely because it has to pull in Unicode table data!). In a size-conscious setting, you might consider avoiding regexes in general, or even dropping down and calling browser APIs to use the built-in regex engine instead. (This is what `leptos_router` does on the few occasions it needs a regular expression.)

In general, Rust’s commitment to runtime performance is sometimes at odds with a commitment to a small binary. For example, Rust monomorphizes generic functions, meaning it creates a distinct copy of the function for each generic type it’s called with. This is significantly faster than dynamic dispatch, but increases binary size. Leptos tries to balance runtime performance with binary size considerations pretty carefully; but you might find that writing code that uses many generics tends to increase binary size. For example, if you have a generic component with a lot of code in its body and call it with four different types, remember that the compiler could include four copies of that same code. Refactoring to use a concrete inner function or helper can often maintain performance and ergonomics while reducing binary size.

## A Final Thought

Remember that in a server-rendered app, JS bundle size/WASM binary size affects only _one_ thing: time to interactivity on the first load. This is very important to a good user experience: nobody wants to click a button three times and have it do nothing because the interactive code is still loading — but it's not the only important measure.

It’s especially worth remembering that streaming in a single WASM binary means all subsequent navigations are nearly instantaneous, depending only on any additional data loading. Precisely because your WASM binary is _not_ bundle split, navigating to a new route does not require loading additional JS/WASM, as it does in nearly every JavaScript framework. Is this copium? Maybe. Or maybe it’s just an honest trade-off between the two approaches!

Always take the opportunity to optimize the low-hanging fruit in your application. And always test your app under real circumstances with real user network speeds and devices before making any heroic efforts.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/deployment/binary_size.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/deployment/tauri.md

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/deployment/tauri.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/reactivity/14_create_effect.md
# Responding to Changes with Effects

We’ve made it this far without having mentioned half of the reactive system: effects.

Reactivity works in two halves: updating individual reactive values (“signals”) notifies the pieces of code that depend on them (“effects”) that they need to run again. These two halves of the reactive system are inter-dependent. Without effects, signals can change within the reactive system but never be observed in a way that interacts with the outside world. Without signals, effects run once but never again, as there’s no observable value to subscribe to. Effects are quite literally “side effects” of the reactive system: they exist to synchronize the reactive system with the non-reactive world outside it.

The renderer uses effects to update parts of the DOM in response to changes in signals. You can create your own effects to synchronize the reactive system with the outside world in other ways.

[`Effect::new`](https://docs.rs/leptos/latest/leptos/reactive/effect/struct.Effect.html) takes a function as its argument. It runs this function on the next “tick” of the reactive system. (So for example, if you use it in a component, it will run just _after_ that component has been rendered.) If you access any reactive signal inside that function, it registers the fact that the effect depends on that signal. Whenever one of the signals that the effect depends on changes, the effect runs again.

```rust
let (a, set_a) = signal(0);
let (b, set_b) = signal(0);

Effect::new(move |_| {
  // immediately prints "Value: 0" and subscribes to `a`
  logging::log!("Value: {}", a.get());
});
```

The effect function is called with an argument containing whatever value it returned the last time it ran. On the initial run, this is `None`.

By default, effects **do not run on the server**. This means you can call browser-specific APIs within the effect function without causing issues. If you need an effect to run on the server, use [`Effect::new_isomorphic`](https://docs.rs/leptos/latest/leptos/reactive/effect/struct.Effect.html#method.new_isomorphic).

## Auto-tracking and Dynamic Dependencies

If you’re familiar with a framework like React, you might notice one key difference. React and similar frameworks typically require you to pass a “dependency array,” an explicit set of variables that determine when the effect should rerun.

Because Leptos comes from the tradition of synchronous reactive programming, we don’t need this explicit dependency list. Instead, we automatically track dependencies depending on which signals are accessed within the effect.

This has two effects (no pun intended). Dependencies are:

1. **Automatic**: You don’t need to maintain a dependency list, or worry about what should or shouldn’t be included. The framework simply tracks which signals might cause the effect to rerun, and handles it for you.
2. **Dynamic**: The dependency list is cleared and updated every time the effect runs. If your effect contains a conditional (for example), only signals that are used in the current branch are tracked. This means that effects rerun the absolute minimum number of times.

> If this sounds like magic, and if you want a deep dive into how automatic dependency tracking works, [check out this video](https://www.youtube.com/watch?v=GWB3vTWeLd4). (Apologies for the low volume!)

## Effects as Zero-Cost-ish Abstraction

While they’re not a “zero-cost abstraction” in the most technical sense—they require some additional memory use, exist at runtime, etc.—at a higher level, from the perspective of whatever expensive API calls or other work you’re doing within them, effects are a zero-cost abstraction. They rerun the absolute minimum number of times necessary, given how you’ve described them.

Imagine that I’m creating some kind of chat software, and I want people to be able to display their full name, or just their first name, and to notify the server whenever their name changes:

```rust
let (first, set_first) = signal(String::new());
let (last, set_last) = signal(String::new());
let (use_last, set_use_last) = signal(true);

// this will add the name to the log
// any time one of the source signals changes
Effect::new(move |_| {
    logging::log!(
        "{}", if use_last.get() {
            format!("{} {}", first.get(), last.get())
        } else {
            first.get()
        },
    )
});
```

If `use_last` is `true`, effect should rerun whenever `first`, `last`, or `use_last` changes. But if I toggle `use_last` to `false`, a change in `last` will never cause the full name to change. In fact, `last` will be removed from the dependency list until `use_last` toggles again. This saves us from sending multiple unnecessary requests to the API if I change `last` multiple times while `use_last` is still `false`.

## To create an effect, or not to create an effect?

Effects are intended to synchronize the reactive system with the non-reactive world outside, not to synchronize between different reactive values. In other words: using an effect to read a value from one signal and set it in another is always sub-optimal.

If you need to define a signal that depends on the value of other signals, use a derived signal or a [`Memo`](https://docs.rs/leptos/latest/leptos/reactive/computed/struct.Memo.html). Writing to a signal inside an effect isn’t the end of the world, and it won’t cause your computer to light on fire, but a derived signal or memo is always better—not only because the dataflow is clear, but because the performance is better.

```rust
let (a, set_a) = signal(0);

// ⚠️ not great
let (b, set_b) = signal(0);
Effect::new(move |_| {
    set_b.set(a.get() * 2);
});

// ✅ woo-hoo!
let b = move || a.get() * 2;
```

If you need to synchronize some reactive value with the non-reactive world outside—like a web API, the console, the filesystem, or the DOM—writing to a signal in an effect is a fine way to do that. In many cases, though, you’ll find that you’re really writing to a signal inside an event listener or something else, not inside an effect. In these cases, you should check out [`leptos-use`](https://leptos-use.rs/) to see if it already provides a reactive wrapping primitive to do that!

> If you’re curious for more information about when you should and shouldn’t use `create_effect`, [check out this video](https://www.youtube.com/watch?v=aQOFJQ2JkvQ) for a more in-depth consideration!

## Effects and Rendering

We’ve managed to get this far without mentioning effects because they’re built into the Leptos DOM renderer. We’ve seen that you can create a signal and pass it into the `view` macro, and it will update the relevant DOM node whenever the signal changes:

```rust
let (count, set_count) = signal(0);

view! {
    <p>{count}</p>
}
```

This works because the framework essentially creates an effect wrapping this update. You can imagine Leptos translating this view into something like this:

```rust
let (count, set_count) = signal(0);

// create a DOM element
let document = leptos::document();
let p = document.create_element("p").unwrap();

// create an effect to reactively update the text
Effect::new(move |prev_value| {
    // first, access the signal’s value and convert it to a string
    let text = count.get().to_string();

    // if this is different from the previous value, update the node
    if prev_value != Some(text) {
        p.set_text_content(&text);
    }

    // return this value so we can memoize the next update
    text
});
```

Every time `count` is updated, this effect will rerun. This is what allows reactive, fine-grained updates to the DOM.

## Explicit Tracking with `Effect::watch()`

In addition to `Effect::new()`, Leptos provides an [`Effect::watch()`](https://docs.rs/leptos/latest/leptos/reactive/effect/struct.Effect.html#method.watch) function, which can be used to separate tracking and responding to changes by explicitly passing in a set of values to track.

`watch` takes three arguments. The `dependency_fn` argument is reactively tracked while `handler` and `immediate` are not. Whenever `dependency_fn` is changed, `handler` is run. If `immediate` is false, the `handler` will run only after the first change is detected of any signal that is accessed in `dependency_fn`. `watch` returns an `Effect`, which can be called with `.stop()` to stop tracking the dependencies.

```rust
let (num, set_num) = signal(0);

let effect = Effect::watch(
    move || num.get(),
    move |num, prev_num, _| {
        leptos::logging::log!("Number: {}; Prev: {:?}", num, prev_num);
    },
    false,
);

set_num.set(1); // > "Number: 1; Prev: Some(0)"

effect.stop(); // stop watching

set_num.set(2); // (nothing happens)
```

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/14-effect-0-7-fxpy2d?file=%2Fsrc%2Fmain.rs%3A21%2C28&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/14-effect-0-7-fxpy2d?file=%2Fsrc%2Fmain.rs%3A21%2C28&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::html::Input;
use leptos::prelude::*;

#[derive(Copy, Clone)]
struct LogContext(RwSignal<Vec<String>>);

#[component]
fn App() -> impl IntoView {
    // Just making a visible log here
    // You can ignore this...
    let log = RwSignal::<Vec<String>>::new(vec![]);
    let logged = move || log.get().join("\n");

    // the newtype pattern isn't *necessary* here but is a good practice
    // it avoids confusion with other possible future `RwSignal<Vec<String>>` contexts
    // and makes it easier to refer to it
    provide_context(LogContext(log));

    view! {
        <CreateAnEffect/>
        <pre>{logged}</pre>
    }
}

#[component]
fn CreateAnEffect() -> impl IntoView {
    let (first, set_first) = signal(String::new());
    let (last, set_last) = signal(String::new());
    let (use_last, set_use_last) = signal(true);

    // this will add the name to the log
    // any time one of the source signals changes
    Effect::new(move |_| {
        log(if use_last.get() {
            let first = first.read();
            let last = last.read();
            format!("{first} {last}")
        } else {
            first.get()
        })
    });

    view! {
        <h1>
            <code>"create_effect"</code>
            " Version"
        </h1>
        <form>
            <label>
                "First Name"
                <input
                    type="text"
                    name="first"
                    prop:value=first
                    on:change:target=move |ev| set_first.set(ev.target().value())
                />
            </label>
            <label>
                "Last Name"
                <input
                    type="text"
                    name="last"
                    prop:value=last
                    on:change:target=move |ev| set_last.set(ev.target().value())
                />
            </label>
            <label>
                "Show Last Name"
                <input
                    type="checkbox"
                    name="use_last"
                    prop:checked=use_last
                    on:change:target=move |ev| set_use_last.set(ev.target().checked())
                />
            </label>
        </form>
    }
}

#[component]
fn ManualVersion() -> impl IntoView {
    let first = NodeRef::<Input>::new();
    let last = NodeRef::<Input>::new();
    let use_last = NodeRef::<Input>::new();

    let mut prev_name = String::new();
    let on_change = move |_| {
        log("      listener");
        let first = first.get().unwrap();
        let last = last.get().unwrap();
        let use_last = use_last.get().unwrap();
        let this_one = if use_last.checked() {
            format!("{} {}", first.value(), last.value())
        } else {
            first.value()
        };

        if this_one != prev_name {
            log(&this_one);
            prev_name = this_one;
        }
    };

    view! {
        <h1>"Manual Version"</h1>
        <form on:change=on_change>
            <label>"First Name" <input type="text" name="first" node_ref=first/></label>
            <label>"Last Name" <input type="text" name="last" node_ref=last/></label>
            <label>
                "Show Last Name" <input type="checkbox" name="use_last" checked node_ref=use_last/>
            </label>
        </form>
    }
}

fn log(msg: impl std::fmt::Display) {
    let log = use_context::<LogContext>().unwrap().0;
    log.update(|log| log.push(msg.to_string()));
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/reactivity/14_create_effect.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/reactivity/interlude_functions.md
# Interlude: Reactivity and Functions

One of our core contributors said to me recently: “I never used closures this often
until I started using Leptos.” And it’s true. Closures are at the heart of any Leptos
application. It sometimes looks a little silly:

```rust
// a signal holds a value, and can be updated
let (count, set_count) = signal(0);

// a derived signal is a function that accesses other signals
let double_count = move || count.get() * 2;
let count_is_odd = move || count.get() & 1 == 1;
let text = move || if count_is_odd() {
    "odd"
} else {
    "even"
};

// an effect automatically tracks the signals it depends on
// and reruns when they change
Effect::new(move |_| {
    logging::log!("text = {}", text());
});

view! {
    <p>{move || text().to_uppercase()}</p>
}
```

Closures, closures everywhere!

But why?

## Functions and UI Frameworks

Functions are at the heart of every UI framework. And this makes perfect sense. Creating a user interface is basically divided into two phases:

1. initial rendering
2. updates

In a web framework, the framework does some kind of initial rendering. Then it hands control back over to the browser. When certain events fire (like a mouse click) or asynchronous tasks finish (like an HTTP request finishing), the browser wakes the framework back up to update something. The framework runs some kind of code to update your user interface, and goes back asleep until the browser wakes it up again.

The key phrase here is “runs some kind of code.” The natural way to “run some kind of code” at an arbitrary point in time—in Rust or in any other programming language—is to call a function. And in fact every UI framework is based on rerunning some kind of function over and over:

1. virtual DOM (VDOM) frameworks like React, Yew, or Dioxus rerun a component or render function over and over, to generate a virtual DOM tree that can be reconciled with the previous result to patch the DOM
2. compiled frameworks like Angular and Svelte divide your component templates into “create” and “update” functions, rerunning the update function when they detect a change to the component’s state
3. in fine-grained reactive frameworks like SolidJS, Sycamore, or Leptos, _you_ define the functions that rerun

That’s what all our components are doing.

Take our typical `<SimpleCounter/>` example in its simplest form:

```rust
#[component]
pub fn SimpleCounter() -> impl IntoView {
    let (value, set_value) = signal(0);

    let increment = move |_| *set_value.write() += 1;

    view! {
        <button on:click=increment>
            {value}
        </button>
    }
}
```

The `SimpleCounter` function itself runs once. The `value` signal is created once. The framework hands off the `increment` function to the browser as an event listener. When you click the button, the browser calls `increment`, which updates `value` via `set_value`. And that updates the single text node represented in our view by `{value}`.

Functions are key to reactivity. They provide the framework with the ability to rerun the smallest possible unit of your application in response to a change.

So remember two things:

1. Your component function is a setup function, not a render function: it only runs once.
2. For values in your view template to be reactive, they must be reactive functions: either signals or closures that capture and read from signals.

```admonish note
This is actually the primary difference between the stable and nightly versions of Leptos. As you may know, using the nightly compiler and the `nightly` feature allows you to call a signal directly, as a function: so, `value()` instead of `value.get()`.

But this isn’t just syntax sugar. It allows for an extremely consistent semantic model: Reactive things are functions. Signals are accessed by calling functions. To say “give me a signal as an argument” you can take anything that `impl Fn() -> T`. And this function-based interface makes no distinction between signals, memos, and derived signals: any of them can be accessed by calling them as functions.

Unfortunately implementing the `Fn` traits on arbitrary structs like signals requires nightly Rust, although this particular feature has mostly just languished and is not likely to change (or be stabilized) any time soon. Many people avoid nightly, for one reason or another. So, over time we’ve moved the defaults for things like documentation toward stable. Unfortunately, this makes the simple mental model of “signals are functions” a bit less straightforward.
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/reactivity/interlude_functions.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/reactivity/working_with_signals.md
# Working with Signals

So far we’ve used some simple examples of using [`signal`](https://docs.rs/leptos/latest/leptos/reactive/signal/fn.signal.html), which returns a [`ReadSignal`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.ReadSignal.html) getter and a [`WriteSignal`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.WriteSignal.html) setter.

## Getting and Setting

There are a few basic signal operations:

### Getting

1. [`.read()`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.ReadSignal.html#impl-Read-for-T) returns a read guard which dereferences to the value of the signal, and tracks any future changes to the value of the signal reactively. Note that you cannot update the value of the signal until this guard is dropped, or it will cause a runtime error.
1. [`.with()`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.ReadSignal.html#impl-With-for-T) takes a function, which receives the current value of the signal by reference (`&T`), and tracks the signal.
1. [`.get()`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.ReadSignal.html#impl-Get-for-T) clones the current value of the signal and tracks further changes to the value.

`.get()` is the most common method of accessing a signal. `.read()` is useful for methods that take an immutable reference, without cloning the value (`my_vec_signal.read().len()`). `.with()` is useful if you need to do more with that reference, but want to make sure you don’t hold onto the lock longer than you need.

### Setting

1. [`.write()`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.WriteSignal.html#impl-Write-for-WriteSignal%3CT,+S%3E) returns a write guard which is a mutable reference to the value of the signal, and notifies any subscribers that they need to update. Note that you cannot read from the value of the signal until this guard is dropped, or it will cause a runtime error.
1. [`.update()`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.WriteSignal.html#impl-Update-for-T) takes a function, which receives a mutable reference to the current value of the signal (`&mut T`), and notifies subscribers. (`.update()` doesn’t return the value returned by the closure, but you can use [`.try_update()`](https://docs.rs/leptos/latest/leptos/trait.SignalUpdate.html#tymethod.try_update) if you need to; for example, if you’re removing an item from a `Vec<_>` and want the removed item.)
1. [`.set()`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.WriteSignal.html#impl-Set-for-T) replaces the current value of the signal and notifies subscribers.

`.set()` is most common for setting a new value; `.write()` is very useful for updating a value in place. Just as is the case with `.read()` and `.with()`, `.update()` can be useful when you want to avoid the possibility of holding on the write lock longer than you intended to.

```admonish note
These traits are based on trait composition and provided by blanket implementations. For example, `Read` is implemented for any type that implements `Track` and `ReadUntracked`. `With` is implemented for any type that implements `Read`. `Get` is implemented for any type that implements `With` and `Clone`. And so on.

Similar relationships exist for `Write`, `Update`, and `Set`.

This is worth noting when reading docs: if you only see `ReadUntracked` and `Track` as implemented traits, you will still be able to use `.with()`, `.get()` (if `T: Clone`), and so on.
```

## Working with Signals

You might notice that `.get()` and `.set()` can be implemented in terms of `.read()` and `.write()`, or `.with()` and `.update()`. In other words, `count.get()` is identical to `count.with(|n| n.clone())` or `count.read().clone()`, and `count.set(1)` is implemented by doing `count.update(|n| *n = 1)` or `*count.write() = 1`.

But of course, `.get()` and `.set()` are nicer syntax.

However, there are some very good use cases for the other methods.

For example, consider a signal that holds a `Vec<String>`.

```rust
let (names, set_names) = signal(Vec::new());
if names.get().is_empty() {
	set_names(vec!["Alice".to_string()]);
}
```

In terms of logic, this is simple enough, but it’s hiding some significant inefficiencies. Remember that `names.get().is_empty()` clones the value. This means we clone the whole `Vec<String>`, run `is_empty()`, and then immediately throw away the clone.

Likewise, `set_names` replaces the value with a whole new `Vec<_>`. This is fine, but we might as well just mutate the original `Vec<_>` in place.

```rust
let (names, set_names) = signal(Vec::new());
if names.read().is_empty() {
	set_names.write().push("Alice".to_string());
}
```

Now our function simply takes `names` by reference to run `is_empty()`, avoiding that clone, and then mutates the `Vec<_>` in place.

## Thread Safety and Thread-Local Values

You may have noticed, either by reading the docs or by experimenting with your own applications, that the values that are stored in signals must be `Send + Sync`. This is because the reactive system actually supports multi-threading: signals can be sent across threads, and the whole reactive graph can work across multiple threads. (This is especially useful when doing [server-side rendering](../ssr/README.md) with server frameworks like Axum, which use Tokio’s multi-threaded executor.) In most cases, this has no effect on what you do: ordinary Rust data types are `Send + Sync` by default.

However, the browser environment is only single-threaded unless you use a Web Worker, and the JavaScript types provided by `wasm-bindgen` and `web-sys` are all explicitly `!Send`. This mean they can’t be stored in ordinary signals.

As a result, we provide “local” alternatives for each of the signal primitives, which can be used to store `!Send` data. You should only reach for these when you have a `!Send` browser type you need to store in a signal.

| Standard | Local |
| -------- | ----- |
| [`signal`](https://docs.rs/leptos/latest/leptos/reactive/signal/fn.signal.html) | [`signal_local`](https://docs.rs/leptos/latest/leptos/prelude/fn.signal_local.html) |
| [`RwSignal::new`](https://docs.rs/leptos/latest/leptos/prelude/struct.RwSignal.html#method.new) | [`RwSignal::new_local`](https://docs.rs/leptos/latest/leptos/prelude/struct.RwSignal.html#method.new_local) |
| [`Resource`](https://docs.rs/leptos/latest/leptos/prelude/struct.Resource.html) | [`LocalResource`](https://docs.rs/leptos/latest/leptos/prelude/struct.LocalResource.html) |
| [`Action::new`](https://docs.rs/leptos/latest/leptos/prelude/struct.Action.html#method.new) | [`Action::new_local`](https://docs.rs/leptos/latest/leptos/prelude/struct.Action.html#method.new_local), [`Action::new_unsync`](https://docs.rs/leptos/latest/leptos/prelude/struct.Action.html#method.new_unsync) |

## Nightly Syntax

When using the `nightly` feature and `nightly` syntax, calling a `ReadSignal` as a function is syntax sugar for `.get()`. Calling a `WriteSignal` as a function is syntax sugar for `.set()`. So

```rust
let (count, set_count) = signal(0);
set_count(1);
logging::log!(count());
```

is the same as

```rust
let (count, set_count) = signal(0);
set_count.set(1);
logging::log!(count.get());
```

This is not just syntax sugar, but makes for a more consistent API by making signals semantically the same thing as functions: see the [Interlude](./interlude_functions.md).

## Making signals depend on each other

Often people ask about situations in which some signal needs to change based on some other signal’s value. There are three good ways to do this, and one that’s less than ideal but okay under controlled circumstances.

### Good Options

**1) B is a function of A.** Create a signal for A and a derived signal or memo for B.

```rust
// A
let (count, set_count) = signal(1);
// B is a function of A
let derived_signal_double_count = move || count.get() * 2;
// B is a function of A
let memoized_double_count = Memo::new(move |_| count.get() * 2);
```

> For guidance on whether to use a derived signal or a memo, see the docs for [`Memo`](https://docs.rs/leptos/latest/leptos/reactive/computed/struct.Memo.html)

**2) C is a function of A and some other thing B.** Create signals for A and B and a derived signal or memo for C.

```rust
// A
let (first_name, set_first_name) = signal("Bridget".to_string());
// B
let (last_name, set_last_name) = signal("Jones".to_string());
// C is a function of A and B
let full_name = move || format!("{} {}", &*first_name.read(), &*last_name.read());
```

**3) A and B are independent signals, but sometimes updated at the same time.** When you make the call to update A, make a separate call to update B.

```rust
// A
let (age, set_age) = signal(32);
// B
let (favorite_number, set_favorite_number) = signal(42);
// use this to handle a click on a `Clear` button
let clear_handler = move |_| {
  // update both A and B
  set_age.set(0);
  set_favorite_number.set(0);
};
```

### If you really must...

**4) Create an effect to write to B whenever A changes.** This is officially discouraged, for several reasons:
a) It will always be less efficient, as it means every time A updates you do two full trips through the reactive process. (You set A, which causes the effect to run, as well as any other effects that depend on A. Then you set B, which causes any effects that depend on B to run.)
b) It increases your chances of accidentally creating things like infinite loops or over-re-running effects. This is the kind of ping-ponging, reactive spaghetti code that was common in the early 2010s and that we try to avoid with things like read-write segregation and discouraging writing to signals from effects.

In most situations, it’s best to rewrite things such that there’s a clear, top-down data flow based on derived signals or memos. But this isn’t the end of the world.

> I’m intentionally not providing an example here. Read the [`Effect`](https://docs.rs/leptos/latest/leptos/reactive/effect/struct.Effect.html) docs to figure out how this would work.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/reactivity/working_with_signals.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/reactivity/README.md
# Reactivity

Leptos is built on top of a fine-grained reactive system, designed to run expensive side effects (like rendering something in a browser, or making a network request) as infrequently as possible in response to change, reactive values.

So far we’ve seen signals in action. These chapters will go into a bit more depth, and look at effects, which are the other half of the story.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/reactivity/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/04b_iteration.md
# Iterating over More Complex Data with `<For/>`

This chapter goes into iteration over nested data structures in a bit
more depth. It belongs here with the other chapter on iteration, but feel
free to skip it and come back if you’d like to stick with simpler subjects
for now.

## The Problem

I just said that the framework does not rerender any of the items in one of the
rows, unless the key has changed. This probably makes sense at first, but it can
easily trip you up.

Let’s consider an example in which each of the items in our row is some data structure.
Imagine, for example, that the items come from some JSON array of keys and values:

```rust
#[derive(Debug, Clone)]
struct DatabaseEntry {
    key: String,
    value: i32,
}
```

Let’s define a simple component that will iterate over the rows and display each one:

```rust
#[component]
pub fn App() -> impl IntoView {
    // start with a set of three rows
    let (data, set_data) = signal(vec![
        DatabaseEntry {
            key: "foo".to_string(),
            value: 10,
        },
        DatabaseEntry {
            key: "bar".to_string(),
            value: 20,
        },
        DatabaseEntry {
            key: "baz".to_string(),
            value: 15,
        },
    ]);
    view! {
        // when we click, update each row,
        // doubling its value
        <button on:click=move |_| {
            set_data.update(|data| {
                for row in data {
                    row.value *= 2;
                }
            });
            // log the new value of the signal
            leptos::logging::log!("{:?}", data.get());
        }>
            "Update Values"
        </button>
        // iterate over the rows and display each value
        <For
            each=move || data.get()
            key=|state| state.key.clone()
            let(child)
        >
            <p>{child.value}</p>
        </For>
    }
}
```

> Note the `let(child)` syntax here. In the previous chapter we introduced `<For/>`
> with a `children` prop. We can actually create this value directly in the children
> of the `<For/>` component, without breaking out of the `view` macro: the `let(child)`
> combined with `<p>{child.value}</p>` above is the equivalent of
>
> ```rust
> children=|child| view! { <p>{child.value}</p> }
> ```
>
> For convenience, you can also choose to destructure the pattern of your data:
>
> ```rust
> <For
>     each=move || data.get()
>     key=|state| state.key.clone()
>     let(DatabaseEntry { key, value })
> >
> ```

When you click the `Update Values` button... nothing happens. Or rather:
the signal is updated, the new value is logged, but the `{child.value}`
for each row doesn’t update.

Let’s see: is that because we forgot to add a closure to make it reactive?
Let’s try `{move || child.value}`.

...Nope. Still nothing.

Here’s the problem: as I said, each row is only rerendered when the key changes.
We’ve updated the value for each row, but not the key for any of the rows, so
nothing has rerendered. And if you look at the type of `child.value`, it’s a plain
`i32`, not a reactive `ReadSignal<i32>` or something. This means that even if we
wrap a closure around it, the value in this row will never update.

We have three possible solutions:

1. change the `key` so that it always updates when the data structure changes
2. change the `value` so that it’s reactive
3. take a reactive slice of the data structure instead of using each row directly

## Option 1: Change the Key

Each row is only rerendered when the key changes. Our rows above didn’t rerender,
because the key didn’t change. So: why not just force the key to change?

```rust
<For
	each=move || data.get()
	key=|state| (state.key.clone(), state.value)
	let(child)
>
	<p>{child.value}</p>
</For>
```

Now we include both the key and the value in the `key`. This means that whenever the
value of a row changes, `<For/>` will treat it as if it’s an entirely new row, and
replace the previous one.

### Pros

This is very easy. We can make it even easier by deriving `PartialEq`, `Eq`, and `Hash`
on `DatabaseEntry`, in which case we could just `key=|state| state.clone()`.

### Cons

**This is the least efficient of the three options.** Every time the value of a row
changes, it throws out the previous `<p>` element and replaces it with an entirely new
one. Rather than making a fine-grained update to the text node, in other words, it really
does rerender the entire row on every change, and this is expensive in proportion to how
complex the UI of the row is.

You’ll notice we also end up cloning the whole data structure so that `<For/>` can hold
onto a copy of the key. For more complex structures, this can become a bad idea fast!

## Option 2: Nested Signals

If we do want that fine-grained reactivity for the value, one option is to wrap the `value`
of each row in a signal.

```rust
#[derive(Debug, Clone)]
struct DatabaseEntry {
    key: String,
    value: RwSignal<i32>,
}
```

`RwSignal<_>` is a “read-write signal,” which combines the getter and setter in one object.
I’m using it here because it’s a little easier to store in a struct than separate getters
and setters.

```rust
#[component]
pub fn App() -> impl IntoView {
    // start with a set of three rows
    let (data, _set_data) = signal(vec![
        DatabaseEntry {
            key: "foo".to_string(),
            value: RwSignal::new(10),
        },
        DatabaseEntry {
            key: "bar".to_string(),
            value: RwSignal::new(20),
        },
        DatabaseEntry {
            key: "baz".to_string(),
            value: RwSignal::new(15),
        },
    ]);
    view! {
        // when we click, update each row,
        // doubling its value
        <button on:click=move |_| {
            for row in &*data.read() {
                row.value.update(|value| *value *= 2);
            }
            // log the new value of the signal
            leptos::logging::log!("{:?}", data.get());
        }>
            "Update Values"
        </button>
        // iterate over the rows and display each value
        <For
            each=move || data.get()
            key=|state| state.key.clone()
            let(child)
        >
            <p>{child.value}</p>
        </For>
    }
}
```

This version works! And if you look in the DOM inspector in your browser, you’ll
see that unlike in the previous version, in this version only the individual text
nodes are updated. Passing the signal directly into `{child.value}` works, as
signals do keep their reactivity if you pass them into the view.

Note that I changed the `set_data.update()` to a `data.read()`. `.read()` is a
non-cloning way of accessing a signal’s value. In this case, we are only updating
the inner values, not updating the list of values: because signals maintain their
own state, we don’t actually need to update the `data` signal at all, so the immutable
`.read()` is fine here.

> In fact, this version doesn’t update `data`, so the `<For/>` is essentially a static
> list as in the last chapter, and this could just be a plain iterator. But the `<For/>`
> is useful if we want to add or remove rows in the future.

### Pros

This is the most efficient option, and fits directly with the rest of the mental model
of the framework: values that change over time are wrapped in signals so the interface
can respond to them.

### Cons

Nested reactivity can be cumbersome if you’re receiving data from an API or another
data source you don’t control, and you don’t want to create a different struct wrapping
each field in a signal.

## Option 3: Memoized Slices

Leptos provides a primitive called a [`Memo`](https://docs.rs/leptos/latest/leptos/reactive/computed/struct.Memo.html),
which creates a derived computation that only triggers a reactive update when its value
has changed.

This allows you to create reactive values for subfields of a larger data structure,
without needing to wrap the fields of that structure in signals.

Most of the application can remain the same as the initial (broken) version, but the `<For/>`
will be updated to this:

```rust
<For
    each=move || data.get().into_iter().enumerate()
    key=|(_, state)| state.key.clone()
    children=move |(index, _)| {
        let value = Memo::new(move |_| {
            data.with(|data| data.get(index).map(|d| d.value).unwrap_or(0))
        });
        view! {
            <p>{value}</p>
        }
    }
/>
```

You’ll notice a few differences here:

- we convert the `data` signal into an enumerated iterator
- we use the `children` prop explicitly, to make it easier to run some non-`view` code
- we define a `value` memo and use that in the view. This `value` field doesn’t actually
  use the `child` being passed into each row. Instead, it uses the index and reaches back
  into the original `data` to get the value.

Every time `data` changes, now, each memo will be recalculated. If its value has changed,
it will update its text node, without rerendering the whole row.

### Pros

We get the same fine-grained reactivity of the signal-wrapped version, without needing to
wrap the data in signals.

### Cons

It’s a bit more complex to set up this memo-per-row inside the `<For/>` loop rather than
using nested signals. For example, you’ll notice that we have to guard against the possibility
that the `data[index]` would panic by using `data.get(index)`, because this memo may be
triggered to re-run once just after the row is removed. (This is because the memo for each row
and the whole `<For/>` both depend on the same `data` signal, and the order of execution for
multiple reactive values that depend on the same signal isn’t guaranteed.)

Note also that while memos memoize their reactive changes, the same
calculation does need to re-run to check the value every time, so nested reactive signals
will still be more efficient for pinpoint updates here.

## Option 4: Stores

> Some of this content is duplicated in the section on global state management with stores [here](../15_global_state.md#option-3-create-a-global-state-store). Both sections are intermediate/optional content, so I thought some duplication couldn’t hurt.

Leptos 0.7 introduces a new reactive primitive called “stores.” Stores are designed to address
the issues described in this chapter so far. They’re a bit experimental, so they require an additional dependency called `reactive_stores` in your `Cargo.toml`.

Stores give you fine-grained reactive access to the individual fields of a struct, and to individual items in collections like `Vec<_>`, without needing to create nested signals or memos manually, as in the options given above.

Stores are built on top of the `Store` derive macro, which creates a getter for each field of a struct. Calling this getter gives reactive access to that particular field. Reading from it will track only that field and its parents/children, and updating it will only notify that field and its parents/children, but not siblings. In other words, mutating `value` will not notify `key`, and so on.

We can adapt the data types we used in the examples above.

The top level of a store always needs to be a struct, so we’ll create a `Data` wrapper with a single `rows` field.
```rust
#[derive(Store, Debug, Clone)]
pub struct Data {
    #[store(key: String = |row| row.key.clone())]
    rows: Vec<DatabaseEntry>,
}

#[derive(Store, Debug, Clone)]
struct DatabaseEntry {
    key: String,
    value: i32,
}
```
Adding `#[store(key)]` to the `rows` field allows us to have keyed access to the fields of the store, which will be useful in the `<For/>` component below. We can simply use `key`, the same key that we’ll use in `<For/>`.

The `<For/>` component is pretty straightforward:
```rust
<For
    each=move || data.rows()
    key=|row| row.read().key.clone()
    children=|child| {
        let value = child.value();
        view! { <p>{move || value.get()}</p> }
    }
/>
```
Because `rows` is a keyed field, it implements `IntoIterator`, and we can simply use `move || data.rows()` as the `each` prop. This will react to any changes to the `rows` list, just as `move || data.get()` did in our nested-signal version.

The `key` field calls `.read()` to get access to the current value of the row, then clones and returns the `key` field.

In `children` prop, calling `child.value()` gives us reactive access to the `value` field for the row with this key. If rows are reordered, added, or removed, the keyed store field will keep in sync so that this `value` is always associated with the correct key.

In the update button handler, we’ll iterate over the entries in `rows`, updating each one:
```rust
for row in data.rows().iter_unkeyed() {
    *row.value().write() *= 2;
}
```

### Pros

We get the fine-grained reactivity of the nested-signal and memo versions, without needing to manually create nested signals or memoized slices. We can work with plain data (a struct and `Vec<_>`), annotated with a derive macro, rather than special nested reactive types.

Personally, I think the stores version is the nicest one here. And no surprise, as it’s the newest API. We’ve had a few years to think about these things and stores include some of the lessons we’ve learned!

### Cons

On the other hand, it’s the newest API. As of writing this sentence (December 2024), stores have only been released for a few weeks; I am sure that there are still some bugs or edge cases to be figured out.


### Full Example

Here’s the complete store example. You can find another, more complete example [here](https://github.com/leptos-rs/leptos/blob/main/examples/stores/src/lib.rs), and more discussion in the book [here](../15_global_state.md).
```
use reactive_stores::Store;

#[derive(Store, Debug, Clone)]
pub struct Data {
    #[store(key: String = |row| row.key.clone())]
    rows: Vec<DatabaseEntry>,
}

#[derive(Store, Debug, Clone)]
struct DatabaseEntry {
    key: String,
    value: i32,
}

#[component]
pub fn App() -> impl IntoView {
    // instead of a signal with the rows, we create a store for Data
    let data = Store::new(Data {
        rows: vec![
            DatabaseEntry {
                key: "foo".to_string(),
                value: 10,
            },
            DatabaseEntry {
                key: "bar".to_string(),
                value: 20,
            },
            DatabaseEntry {
                key: "baz".to_string(),
                value: 15,
            },
        ],
    });

    view! {
        // when we click, update each row,
        // doubling its value
        <button on:click=move |_| {
            // allows iterating over the entries in an iterable store field
            use reactive_stores::StoreFieldIterator;

            // calling rows() gives us access to the rows 
            for row in data.rows().iter_unkeyed() {
                *row.value().write() *= 2;
            }
            // log the new value of the signal
            leptos::logging::log!("{:?}", data.get());
        }>
            "Update Values"
        </button>
        // iterate over the rows and display each value
        <For
            each=move || data.rows()
            key=|row| row.read().key.clone()
            children=|child| {
                let value = child.value();
                view! { <p>{move || value.get()}</p> }
            }
        />
    }
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/04b_iteration.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/05_forms.md
# Forms and Inputs

Forms and form inputs are an important part of interactive apps. There are two
basic patterns for interacting with inputs in Leptos, which you may recognize
if you’re familiar with React, SolidJS, or a similar framework: using **controlled**
or **uncontrolled** inputs.

## Controlled Inputs

In a "controlled input," the framework controls the state of the input
element. On every `input` event, it updates a local signal that holds the current
state, which in turn updates the `value` prop of the input.

There are two important things to remember:

1. The `input` event fires on (almost) every change to the element, while the
   `change` event fires (more or less) when you unfocus the input. You probably
   want `on:input`, but we give you the freedom to choose.
2. The `value` _attribute_ only sets the initial value of the input, i.e., it
   only updates the input up to the point that you begin typing. The `value`
   _property_ continues updating the input after that. You usually want to set
   `prop:value` for this reason. (The same is true for `checked` and `prop:checked`
   on an `<input type="checkbox">`.)

```rust
let (name, set_name) = signal("Controlled".to_string());

view! {
    <input type="text"
        // adding :target gives us typed access to the element
        // that is the target of the event that fires
        on:input:target=move |ev| {
            // .value() returns the current value of an HTML input element
            set_name.set(ev.target().value());
        }

        // the `prop:` syntax lets you update a DOM property,
        // rather than an attribute.
        prop:value=name
    />
    <p>"Name is: " {name}</p>
}
```

> #### Why do you need `prop:value`?
>
> Web browsers are the most ubiquitous and stable platform for rendering graphical user interfaces in existence. They have also maintained an incredible backwards compatibility over their three decades of existence. Inevitably, this means there are some quirks.
>
> One odd quirk is that there is a distinction between HTML attributes and DOM element properties, i.e., between something called an “attribute” which is parsed from HTML and can be set on a DOM element with `.setAttribute()`, and something called a “property” which is a field of the JavaScript class representation of that parsed HTML element.
>
> In the case of an `<input value=...>`, setting the `value` _attribute_ is defined as setting the initial value for the input, and setting `value` _property_ sets its current value. It may be easier to understand this by opening `about:blank` and running the following JavaScript in the browser console, line by line:
>
> ```js
> // create an input and append it to the DOM
> const el = document.createElement("input");
> document.body.appendChild(el);
>
> el.setAttribute("value", "test"); // updates the input
> el.setAttribute("value", "another test"); // updates the input again
>
> // now go and type into the input: delete some characters, etc.
>
> el.setAttribute("value", "one more time?");
> // nothing should have changed. Setting the "initial value" does nothing now
>
> // however...
> el.value = "But this works";
> ```
>
> Many other frontend frameworks conflate attributes and properties, or create a special case for inputs that sets the value correctly. Maybe Leptos should do this too, but for now, I prefer giving users the maximum amount of control over whether they’re setting an attribute or a property, and doing my best to educate people about the actual underlying browser behavior rather than obscuring it.

### Simplifying Controlled Inputs with `bind:`

Adherence to Web standards and a clear division between “reading from a signal” and “writing to a signal” are good, but creating
controlled inputs in this way can sometimes seem like more boilerplate than is really necessary.

Leptos also includes a special `bind:` syntax for inputs that allows you to automatically bind signals to inputs. They do exactly the same thing as the “controlled input” pattern above: create an event listener that updates the signal, and a dynamic property that reads from the signal. You can use `bind:value` for text inputs, `bind:checked` for checkboxes, and `bind:group` for radio button groups.

```rust
let (name, set_name) = signal("Controlled".to_string());
let email = RwSignal::new("".to_string());
let favorite_color = RwSignal::new("red".to_string());
let spam_me = RwSignal::new(true);

view! {
    <input type="text"
        bind:value=(name, set_name)
    />
    <input type="email"
        bind:value=email
    />
    <label>
        "Please send me lots of spam email."
        <input type="checkbox"
            bind:checked=spam_me
        />
    </label>
    <fieldset>
        <legend>"Favorite color"</legend>
        <label>
            "Red"
            <input
                type="radio"
                name="color"
                value="red"
                bind:group=favorite_color
            />
        </label>
        <label>
            "Green"
            <input
                type="radio"
                name="color"
                value="green"
                bind:group=favorite_color
            />
        </label>
        <label>
            "Blue"
            <input
                type="radio"
                name="color"
                value="blue"
                bind:group=favorite_color
            />
        </label>
    </fieldset>
    <p>"Your favorite color is " {favorite_color} "."</p>
    <p>"Name is: " {name}</p>
    <p>"Email is: " {email}</p>
    <Show when=move || spam_me.get()>
        <p>"You’ll receive cool bonus content!"</p>
    </Show>
}
```

## Uncontrolled Inputs

In an "uncontrolled input," the browser controls the state of the input element.
Rather than continuously updating a signal to hold its value, we use a
[`NodeRef`](https://docs.rs/leptos/latest/leptos/tachys/reactive_graph/node_ref/struct.NodeRef.html) to access
the input when we want to get its value.

In this example, we only notify the framework when the `<form>` fires a `submit` event.
Note the use of the [`leptos::html`](https://docs.rs/leptos/latest/leptos/html/index.html) module, which provides a bunch of types for every HTML element.

```rust
let (name, set_name) = signal("Uncontrolled".to_string());

let input_element: NodeRef<html::Input> = NodeRef::new();

view! {
    <form on:submit=on_submit> // on_submit defined below
        <input type="text"
            value=name
            node_ref=input_element
        />
        <input type="submit" value="Submit"/>
    </form>
    <p>"Name is: " {name}</p>
}
```

The view should be pretty self-explanatory by now. Note two things:

1. Unlike in the controlled input example, we use `value` (not `prop:value`).
   This is because we’re just setting the initial value of the input, and letting
   the browser control its state. (We could use `prop:value` instead.)
2. We use `node_ref=...` to fill the `NodeRef`. (Older examples sometimes use `_ref`.
   They are the same thing, but `node_ref` has better rust-analyzer support.)

`NodeRef` is a kind of reactive smart pointer: we can use it to access the
underlying DOM node. Its value will be set when the element is rendered.

```rust
let on_submit = move |ev: SubmitEvent| {
    // stop the page from reloading!
    ev.prevent_default();

    // here, we'll extract the value from the input
    let value = input_element
        .get()
        // event handlers can only fire after the view
        // is mounted to the DOM, so the `NodeRef` will be `Some`
        .expect("<input> should be mounted")
        // `leptos::HtmlElement<html::Input>` implements `Deref`
        // to a `web_sys::HtmlInputElement`.
        // this means we can call`HtmlInputElement::value()`
        // to get the current value of the input
        .value();
    set_name.set(value);
};
```

Our `on_submit` handler will access the input’s value and use it to call `set_name.set()`.
To access the DOM node stored in the `NodeRef`, we can simply call it as a function
(or using `.get()`). This will return `Option<leptos::HtmlElement<html::Input>>`, but we
know that the element has already been mounted (how else did you fire this event!), so
it's safe to unwrap here.

We can then call `.value()` to get the value out of the input, because `NodeRef`
gives us access to a correctly-typed HTML element.

Take a look at [`web_sys` and `HtmlElement`](../web_sys.md) to learn more about using a `leptos::HtmlElement`.
Also, see the full CodeSandbox example at the end of this page.

## Special Cases: `<textarea>` and `<select>`

Two form elements tend to cause some confusion in different ways.

### `<textarea>`

Unlike `<input>`, the `<textarea>` element does not support a `value` attribute in HTML.
Instead, it receives its initial value as a plain text node in its HTML children.

So if you’d like to server render an initial value, and have the value also react in the browser,
you can both pass it an initial text node as a child and use `prop:value` to
set its current value.

```rust
view! {
    <textarea
        prop:value=move || some_value.get()
        on:input:target=move |ev| some_value.set(ev.target().value())
    >
        {some_value}
    </textarea>
}
```

### `<select>`

The `<select>` element can likewise be controlled via a `value` property on the `<select>` itself,
which will select whichever `<option>` has that value.

```rust
let (value, set_value) = signal(0i32);
view! {
  <select
    on:change:target=move |ev| {
      set_value.set(ev.target().value().parse().unwrap());
    }
    prop:value=move || value.get().to_string()
  >
    <option value="0">"0"</option>
    <option value="1">"1"</option>
    <option value="2">"2"</option>
  </select>
  // a button that will cycle through the options
  <button on:click=move |_| set_value.update(|n| {
    if *n == 2 {
      *n = 0;
    } else {
      *n += 1;
    }
  })>
    "Next Option"
  </button>
}
```

```admonish sandbox title="Controlled vs uncontrolled forms CodeSandbox" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/5-forms-0-7-l5hktg?file=%2Fsrc%2Fmain.rs&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/5-forms-0-7-l5hktg?file=%2Fsrc%2Fmain.rs&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::{ev::SubmitEvent};
use leptos::prelude::*;

#[component]
fn App() -> impl IntoView {
    view! {
        <h2>"Controlled Component"</h2>
        <ControlledComponent/>
        <h2>"Uncontrolled Component"</h2>
        <UncontrolledComponent/>
    }
}

#[component]
fn ControlledComponent() -> impl IntoView {
    // create a signal to hold the value
    let (name, set_name) = signal("Controlled".to_string());

    view! {
        <input type="text"
            // fire an event whenever the input changes
            // adding :target after the event gives us access to
            // a correctly-typed element at ev.target()
            on:input:target=move |ev| {
                set_name.set(ev.target().value());
            }

            // the `prop:` syntax lets you update a DOM property,
            // rather than an attribute.
            //
            // IMPORTANT: the `value` *attribute* only sets the
            // initial value, until you have made a change.
            // The `value` *property* sets the current value.
            // This is a quirk of the DOM; I didn't invent it.
            // Other frameworks gloss this over; I think it's
            // more important to give you access to the browser
            // as it really works.
            //
            // tl;dr: use prop:value for form inputs
            prop:value=name
        />
        <p>"Name is: " {name}</p>
    }
}

#[component]
fn UncontrolledComponent() -> impl IntoView {
    // import the type for <input>
    use leptos::html::Input;

    let (name, set_name) = signal("Uncontrolled".to_string());

    // we'll use a NodeRef to store a reference to the input element
    // this will be filled when the element is created
    let input_element: NodeRef<Input> = NodeRef::new();

    // fires when the form `submit` event happens
    // this will store the value of the <input> in our signal
    let on_submit = move |ev: SubmitEvent| {
        // stop the page from reloading!
        ev.prevent_default();

        // here, we'll extract the value from the input
        let value = input_element.get()
            // event handlers can only fire after the view
            // is mounted to the DOM, so the `NodeRef` will be `Some`
            .expect("<input> to exist")
            // `NodeRef` implements `Deref` for the DOM element type
            // this means we can call`HtmlInputElement::value()`
            // to get the current value of the input
            .value();
        set_name.set(value);
    };

    view! {
        <form on:submit=on_submit>
            <input type="text"
                // here, we use the `value` *attribute* to set only
                // the initial value, letting the browser maintain
                // the state after that
                value=name

                // store a reference to this input in `input_element`
                node_ref=input_element
            />
            <input type="submit" value="Submit"/>
        </form>
        <p>"Name is: " {name}</p>
    }
}

// This `main` function is the entry point into the app
// It just mounts our component to the <body>
// Because we defined it as `fn App`, we can now use it in a
// template as <App/>
fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/05_forms.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/builder.md
# No Macros: The View Builder Syntax

> If you’re perfectly happy with the `view!` macro syntax described so far, you’re welcome to skip this chapter. The builder syntax described in this section is always available, but never required.

For one reason or another, many developers would prefer to avoid macros. Perhaps you don’t like the limited `rustfmt` support. (Although, you should check out [`leptosfmt`](https://github.com/bram209/leptosfmt), which is an excellent tool!) Perhaps you worry about the effect of macros on compile time. Perhaps you prefer the aesthetics of pure Rust syntax, or you have trouble context-switching between an HTML-like syntax and your Rust code. Or perhaps you want more flexibility in how you create and manipulate HTML elements than the `view` macro provides.

If you fall into any of those camps, the builder syntax may be for you.

The `view` macro expands an HTML-like syntax to a series of Rust functions and method calls. If you’d rather not use the `view` macro, you can simply use that expanded syntax yourself. And it’s actually pretty nice!

First off, if you want you can even drop the `#[component]` macro: a component is just a setup function that creates your view, so you can define a component as a simple function call:

```rust
pub fn counter(initial_value: i32, step: u32) -> impl IntoView { }
```

Elements are created by calling a function with the same name as the HTML element:

```rust
p()
```

You can add children to the element with [`.child()`](https://docs.rs/leptos/latest/leptos/html/trait.ElementChild.html#tymethod.child), which takes a single child or a tuple or array of types that implement [`IntoView`](https://docs.rs/leptos/latest/leptos/trait.IntoView.html).

```rust
p().child((em().child("Big, "), strong().child("bold "), "text"))
```

Attributes are added with [`.attr()`](https://docs.rs/leptos/latest/leptos/attr/custom/trait.CustomAttribute.html#method.attr). This can take any of the same types that you could pass as an attribute into the view macro (types that implement [`Attribute`](https://docs.rs/leptos/latest/leptos/attr/trait.Attribute.html)).

```rust
p().attr("id", "foo")
    .attr("data-count", move || count.get().to_string())
```

They can also be added with attribute methods, which are available for any built-in HTML attribute name:

```rust
p().id("foo")
    .attr("data-count", move || count.get().to_string())
```

Similarly, the `class:`, `prop:`, and `style:` syntaxes map directly onto [`.class()`](https://docs.rs/leptos/latest/leptos/attr/global/trait.ClassAttribute.html#tymethod.class), [`.prop()`](https://docs.rs/leptos/latest/leptos/attr/global/trait.PropAttribute.html#tymethod.prop), and [`.style()`](https://docs.rs/leptos/latest/leptos/attr/global/trait.StyleAttribute.html#tymethod.style) methods.

Event listeners can be added with [`.on()`](https://docs.rs/leptos/latest/leptos/attr/global/trait.OnAttribute.html#tymethod.on). Typed events found in [`leptos::ev`](https://docs.rs/leptos/latest/leptos/tachys/html/event/index.html) prevent typos in event names and allow for correct type inference in the callback function.

```rust
button()
    .on(ev::click, move |_| set_count.set(0))
    .child("Clear")
```

All of this adds up to a very Rusty syntax to build full-featured views, if you prefer this style.

```rust
/// A simple counter view.
// A component is really just a function call: it runs once to create the DOM and reactive system
pub fn counter(initial_value: i32, step: i32) -> impl IntoView {
    let (count, set_count) = signal(initial_value);
    div().child((
        button()
            // typed events found in leptos::ev
            // 1) prevent typos in event names
            // 2) allow for correct type inference in callbacks
            .on(ev::click, move |_| set_count.set(0))
            .child("Clear"),
        button()
            .on(ev::click, move |_| *set_count.write() -= step)
            .child("-1"),
        span().child(("Value: ", move || count.get(), "!")),
        button()
            .on(ev::click, move |_| *set_count.write() += step)
            .child("+1"),
    ))
}
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/builder.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/07_errors.md
# Error Handling

[In the last chapter](./06_control_flow.md), we saw that you can render `Option<T>`:
in the `None` case, it will render nothing, and in the `Some(T)` case, it will render `T`
(that is, if `T` implements `IntoView`). You can actually do something very similar
with a `Result<T, E>`. In the `Err(_)` case, it will render nothing. In the `Ok(T)`
case, it will render the `T`.

Let’s start with a simple component to capture a number input.

```rust
#[component]
fn NumericInput() -> impl IntoView {
    let (value, set_value) = signal(Ok(0));

    view! {
        <label>
            "Type an integer (or not!)"
            <input type="number" on:input:target=move |ev| {
              // when input changes, try to parse a number from the input
              set_value.set(ev.target().value().parse::<i32>())
            }/>
            <p>
                "You entered "
                <strong>{value}</strong>
            </p>
        </label>
    }
}
```

Every time you change the input, `on_input` will attempt to parse its value into a 32-bit
integer (`i32`), and store it in our `value` signal, which is a `Result<i32, _>`. If you
type the number `42`, the UI will display

```
You entered 42
```

But if you type the string `foo`, it will display

```
You entered
```

This is not great. It saves us using `.unwrap_or_default()` or something, but it would be
much nicer if we could catch the error and do something with it.

You can do that, with the [`<ErrorBoundary/>`](https://docs.rs/leptos/latest/leptos/error/fn.ErrorBoundary.html)
component.

```admonish note
People often try to point out that `<input type="number">` prevents you from typing a string
like `foo`, or anything else that's not a number. This is true in some browsers, but not in all!
Moreover, there are a variety of things that can be typed into a plain number input that are not an
`i32`: a floating-point number, a larger-than-32-bit number, the letter `e`, and so on. The browser
can be told to uphold some of these invariants, but browser behavior still varies: Parsing for yourself
is important!
```

## `<ErrorBoundary/>`

An `<ErrorBoundary/>` is a little like the `<Show/>` component we saw in the last chapter.
If everything’s okay—which is to say, if everything is `Ok(_)`—it renders its children.
But if there’s an `Err(_)` rendered among those children, it will trigger the
`<ErrorBoundary/>`’s `fallback`.

Let’s add an `<ErrorBoundary/>` to this example.

```rust
#[component]
fn NumericInput() -> impl IntoView {
        let (value, set_value) = signal(Ok(0));

    view! {
        <h1>"Error Handling"</h1>
        <label>
            "Type a number (or something that's not a number!)"
            <input type="number" on:input:target=move |ev| {
                // when input changes, try to parse a number from the input
                set_value.set(ev.target().value().parse::<i32>())
            }/>
            // If an `Err(_) had been rendered inside the <ErrorBoundary/>,
            // the fallback will be displayed. Otherwise, the children of the
            // <ErrorBoundary/> will be displayed.
            <ErrorBoundary
                // the fallback receives a signal containing current errors
                fallback=|errors| view! {
                    <div class="error">
                        <p>"Not a number! Errors: "</p>
                        // we can render a list of errors
                        // as strings, if we'd like
                        <ul>
                            {move || errors.get()
                                .into_iter()
                                .map(|(_, e)| view! { <li>{e.to_string()}</li>})
                                .collect::<Vec<_>>()
                            }
                        </ul>
                    </div>
                }
            >
                <p>
                    "You entered "
                    // because `value` is `Result<i32, _>`,
                    // it will render the `i32` if it is `Ok`,
                    // and render nothing and trigger the error boundary
                    // if it is `Err`. It's a signal, so this will dynamically
                    // update when `value` changes
                    <strong>{value}</strong>
                </p>
            </ErrorBoundary>
        </label>
    }
}
```

Now, if you type `42`, `value` is `Ok(42)` and you’ll see

```
You entered 42
```

If you type `foo`, value is `Err(_)` and the `fallback` will render. We’ve chosen to render
the list of errors as a `String`, so you’ll see something like

```
Not a number! Errors:
- cannot parse integer from empty string
```

If you fix the error, the error message will disappear and the content you’re wrapping in
an `<ErrorBoundary/>` will appear again.

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/7-errors-0-7-qqywqz?file=%2Fsrc%2Fmain.rs%3A5%2C1-46%2C6&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/7-errors-0-7-qqywqz?file=%2Fsrc%2Fmain.rs%3A5%2C1-46%2C6&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>
```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;

#[component]
fn App() -> impl IntoView {
    let (value, set_value) = signal(Ok(0));

    view! {
        <h1>"Error Handling"</h1>
        <label>
            "Type a number (or something that's not a number!)"
            <input type="number" on:input:target=move |ev| {
                // when input changes, try to parse a number from the input
                set_value.set(ev.target().value().parse::<i32>())
            }/>
            // If an `Err(_) had been rendered inside the <ErrorBoundary/>,
            // the fallback will be displayed. Otherwise, the children of the
            // <ErrorBoundary/> will be displayed.
            <ErrorBoundary
                // the fallback receives a signal containing current errors
                fallback=|errors| view! {
                    <div class="error">
                        <p>"Not a number! Errors: "</p>
                        // we can render a list of errors
                        // as strings, if we'd like
                        <ul>
                            {move || errors.get()
                                .into_iter()
                                .map(|(_, e)| view! { <li>{e.to_string()}</li>})
                                .collect::<Vec<_>>()
                            }
                        </ul>
                    </div>
                }
            >
                <p>
                    "You entered "
                    // because `value` is `Result<i32, _>`,
                    // it will render the `i32` if it is `Ok`,
                    // and render nothing and trigger the error boundary
                    // if it is `Err`. It's a signal, so this will dynamically
                    // update when `value` changes
                    <strong>{value}</strong>
                </p>
            </ErrorBoundary>
        </label>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/07_errors.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/README.md
# Part 1: Building User Interfaces

In the first part of the book, we're going to look at building user interfaces on the client-side using Leptos. Under the hood, Leptos and Trunk are bundling up a snippet of Javascript which will load up the Leptos UI, which has been compiled to WebAssembly to drive the interactivity in your CSR (client-side rendered) website.

Part 1 will introduce you to the basic tools you need to build a reactive user interface powered by Leptos and Rust. By the end of Part 1, you should be able to
build a snappy synchronous website that's rendered in the browser and which you can deploy on any static-site hosting service, like Github Pages or Vercel.

```admonish info
To get the most out of this book, we encourage you to code along with the examples provided.
In the [Getting Started](https://book.leptos.dev/getting_started/) and [Leptos DX](https://book.leptos.dev/getting_started/leptos_dx.html) chapters, we showed you how to set up a basic project with Leptos and Trunk, including WASM error handling in the browser.
That basic setup is enough to get you started developing with Leptos.

If you'd prefer to get started using a more full-featured template which demonstrates how to set up a few of the basics you'd see in a real Leptos project, such as routing, (covered later in the book), injecting `<Title>` and `<Meta>` tags into the page head, and a few other niceties, then feel free to utilize [the leptos-rs `start-trunk`](https://github.com/leptos-rs/start-trunk) template repo to get up and running.

The `start-trunk` template requires that you have `Trunk` and `cargo-generate` installed, which you can get by running `cargo install trunk` and `cargo install cargo-generate`.

To use the template to set up your project, just run

`cargo generate --git https://github.com/leptos-rs/start-trunk`

then run

`trunk serve --port 3000 --open`

in the newly created app's directory to start developing your app.
The Trunk server will reload your app on file changes, making development relatively seamless.

```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/02_dynamic_attributes.md
# `view`: Dynamic Classes, Styles and Attributes

So far we’ve seen how to use the `view` macro to create event listeners and to
create dynamic text by passing a function (such as a signal) into the view.

But of course there are other things you might want to update in your user interface.
In this section, we’ll look at how to update classes, styles and attributes dynamically,
and we’ll introduce the concept of a **derived signal**.

Let’s start with a simple component that should be familiar: click a button to
increment a counter.

```rust
#[component]
fn App() -> impl IntoView {
    let (count, set_count) = signal(0);

    view! {
        <button
            on:click=move |_| {
                *set_count.write() += 1;
            }
        >
            "Click me: "
            {count}
        </button>
    }
}
```

So far, we’ve covered all of this in the previous chapter.

## Dynamic Classes

Now let’s say I’d like to update the list of CSS classes on this element dynamically.
For example, let’s say I want to add the class `red` when the count is odd. I can
do this using the `class:` syntax.

```rust
class:red=move || count.get() % 2 == 1
```

`class:` attributes take

1. the class name, following the colon (`red`)
2. a value, which can be a `bool` or a function that returns a `bool`

When the value is `true`, the class is added. When the value is `false`, the class
is removed. And if the value is a function that accesses a signal, the class will
reactively update when the signal changes.

Now every time I click the button, the text should toggle between red and black as
the number switches between even and odd.

```rust
<button
    on:click=move |_| {
        *set_count.write() += 1;
    }
    // the class: syntax reactively updates a single class
    // here, we'll set the `red` class when `count` is odd
    class:red=move || count.get() % 2 == 1
>
    "Click me"
</button>
```

> If you’re following along, make sure you go into your `index.html` and add something like this:
>
> ```html
> <style>
>   .red {
>     color: red;
>   }
> </style>
> ```

Some CSS class names can’t be directly parsed by the `view` macro, especially if they include a mix of dashes and numbers or other characters. In that case, you can use a tuple syntax: `class=("name", value)` still directly updates a single class.

```rust
class=("button-20", move || count.get() % 2 == 1)
```

The tuple syntax also allows specifying multiple classes under a single condition using an array as the first tuple element.

```rust
class=(["button-20", "rounded"], move || count.get() % 2 == 1)
```

## Dynamic Styles

Individual CSS properties can be directly updated with a similar `style:` syntax.

```rust
let (count, set_count) = signal(0);

view! {
    <button
        on:click=move |_| {
            *set_count.write() += 10;
        }
        // set the `style` attribute
        style="position: absolute"
        // and toggle individual CSS properties with `style:`
        style:left=move || format!("{}px", count.get() + 100)
        style:background-color=move || format!("rgb({}, {}, 100)", count.get(), 100)
        style:max-width="400px"
        // Set a CSS variable for stylesheet use
        style=("--columns", move || count.get().to_string())
    >
        "Click to Move"
    </button>
}
```

## Dynamic Attributes

The same applies to plain attributes. Passing a plain string or primitive value to
an attribute gives it a static value. Passing a function (including a signal) to
an attribute causes it to update its value reactively. Let’s add another element
to our view:

```rust
<progress
    max="50"
    // signals are functions, so `value=count` and `value=move || count.get()`
    // are interchangeable.
    value=count
/>
```

Now every time we set the count, not only will the `class` of the `<button>` be
toggled, but the `value` of the `<progress>` bar will increase, which means that
our progress bar will move forward.

## Derived Signals

Let’s go one layer deeper, just for fun.

You already know that we create reactive interfaces just by passing functions into
the `view`. This means that we can easily change our progress bar. For example,
suppose we want it to move twice as fast:

```rust
<progress
    max="50"
    value=move || count.get() * 2
/>
```

But imagine we want to reuse that calculation in more than one place. You can do this
using a **derived signal**: a closure that accesses a signal.

```rust
let double_count = move || count.get() * 2;

/* insert the rest of the view */
<progress
    max="50"
    // we use it once here
    value=double_count
/>
<p>
    "Double Count: "
    // and again here
    {double_count}
</p>
```

Derived signals let you create reactive computed values that can be used in multiple
places in your application with minimal overhead.

Note: Using a derived signal like this means that the calculation runs once per
signal change (when `count()` changes) and once per place we access `double_count`;
in other words, twice. This is a very cheap calculation, so that’s fine.
We’ll look at memos in a later chapter, which were designed to solve this problem
for expensive calculations.

> #### Advanced Topic: Injecting Raw HTML
>
> The `view` macro provides support for an additional attribute, `inner_html`, which
> can be used to directly set the HTML contents of any element, wiping out any other
> children you’ve given it. Note that this does _not_ escape the HTML you provide. You
> should make sure that it only contains trusted input or that any HTML entities are
> escaped, to prevent cross-site scripting (XSS) attacks.
>
> ```rust
> let html = "<p>This HTML will be injected.</p>";
> view! {
>   <div inner_html=html/>
> }
> ```
>
> [Click here for the full `view` macros docs](https://docs.rs/leptos/latest/leptos/macro.view.html).

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/2-dynamic-attributes-0-7-wddqfp?file=%2Fsrc%2Fmain.rs%3A1%2C1-58%2C1)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/2-dynamic-attributes-0-7-wddqfp?file=%2Fsrc%2Fmain.rs%3A1%2C1-58%2C1" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;

#[component]
fn App() -> impl IntoView {
    let (count, set_count) = signal(0);

    // a "derived signal" is a function that accesses other signals
    // we can use this to create reactive values that depend on the
    // values of one or more other signals
    let double_count = move || count.get() * 2;

    view! {
        <button
            on:click=move |_| {
                *set_count.write() += 1;
            }
            // the class: syntax reactively updates a single class
            // here, we'll set the `red` class when `count` is odd
            class:red=move || count.get() % 2 == 1
            class=("button-20", move || count.get() % 2 == 1)
        >
            "Click me"
        </button>
        // NOTE: self-closing tags like <br> need an explicit /
        <br/>

        // We'll update this progress bar every time `count` changes
        <progress
            // static attributes work as in HTML
            max="50"

            // passing a function to an attribute
            // reactively sets that attribute
            // signals are functions, so `value=count` and `value=move || count.get()`
            // are interchangeable.
            value=count
        >
        </progress>
        <br/>

        // This progress bar will use `double_count`
        // so it should move twice as fast!
        <progress
            max="50"
            // derived signals are functions, so they can also
            // reactively update the DOM
            value=double_count
        >
        </progress>
        <p>"Count: " {count}</p>
        <p>"Double Count: " {double_count}</p>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/02_dynamic_attributes.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/04_iteration.md
# Iteration

Whether you’re listing todos, displaying a table, or showing product images,
iterating over a list of items is a common task in web applications. Reconciling
the differences between changing sets of items can also be one of the trickiest
tasks for a framework to handle well.

Leptos supports two different patterns for iterating over items:

1. For static views: `Vec<_>`
2. For dynamic lists: `<For/>`

## Static Views with `Vec<_>`

Sometimes you need to show an item repeatedly, but the list you’re drawing from
does not often change. In this case, it’s important to know that you can insert
any `Vec<IV> where IV: IntoView` into your view. In other words, if you can render
`T`, you can render `Vec<T>`.

```rust
let values = vec![0, 1, 2];
view! {
    // this will just render "012"
    <p>{values.clone()}</p>
    // or we can wrap them in <li>
    <ul>
        {values.into_iter()
            .map(|n| view! { <li>{n}</li>})
            .collect::<Vec<_>>()}
    </ul>
}
```

Leptos also provides a `.collect_view()` helper function that allows you to collect any iterator of `T: IntoView` into `Vec<View>`.

```rust
let values = vec![0, 1, 2];
view! {
    // this will just render "012"
    <p>{values.clone()}</p>
    // or we can wrap them in <li>
    <ul>
        {values.into_iter()
            .map(|n| view! { <li>{n}</li>})
            .collect_view()}
    </ul>
}
```

The fact that the _list_ is static doesn’t mean the interface needs to be static.
You can render dynamic items as part of a static list.

```rust
// create a list of 5 signals
let length = 5;
let counters = (1..=length).map(|idx| RwSignal::new(idx));
```

Note here that instead of calling `signal()` to get a tuple with a reader and a writer,
here we use `RwSignal::new()` to get a single, read-write signal. This is just more convenient
for a situation where we’d otherwise be passing the tuples around.

```rust
// each item manages a reactive view
// but the list itself will never change
let counter_buttons = counters
    .map(|count| {
        view! {
            <li>
                <button
                    on:click=move |_| *count.write() += 1
                >
                    {count}
                </button>
            </li>
        }
    })
    .collect_view();

view! {
    <ul>{counter_buttons}</ul>
}
```

You _can_ render a `Fn() -> Vec<_>` reactively as well. But note that this is an unkeyed
list update: it will reuse the existing DOM elements, and update them with the new values,
according to their order in the new `Vec<_>`. If you’re just adding and removing items at the 
end of the list, this works well, but if you are moving items around or inserting items into 
the middle of the list, this will cause the browser to do more work than it needs to, and may 
have surprising effects on things like input state and CSS animations. (For more on the “keyed”
vs. “unkeyed” distinction, and some practical examples, you can read
[this article](https://www.stefankrause.net/wp/?p=342).)

Luckily, there’s an efficient way to do keyed list iteration, as well.

## Dynamic Rendering with the `<For/>` Component

The [`<For/>`](https://docs.rs/leptos/latest/leptos/control_flow/fn.For.html) component is a
keyed dynamic list. It takes three props:

- `each`: a reactive function that returns the items `T` to be iterated over
- `key`: a key function that takes `&T` and returns a stable, unique key or ID
- `children`: renders each `T` into a view

`key` is, well, the key. You can add, remove, and move items within the list. As
long as each item’s key is stable over time, the framework does not need to rerender
any of the items, unless they are new additions, and it can very efficiently add,
remove, and move items as they change. This allows for extremely efficient updates
to the list as it changes, with minimal additional work.

Creating a good `key` can be a little tricky. You generally do _not_ want to use
an index for this purpose, as it is not stable—if you remove or move items, their
indices change.

But it’s a great idea to do something like generating a unique ID for each row as
it is generated, and using that as an ID for the key function.

Check out the `<DynamicList/>` component below for an example.

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/4-iteration-0-7-dw4dfl?file=%2Fsrc%2Fmain.rs%3A1%2C1-159%2C1&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/4-iteration-0-7-dw4dfl?file=%2Fsrc%2Fmain.rs%3A1%2C1-159%2C1&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;

// Iteration is a very common task in most applications.
// So how do you take a list of data and render it in the DOM?
// This example will show you the two ways:
// 1) for mostly-static lists, using Rust iterators
// 2) for lists that grow, shrink, or move items, using <For/>

#[component]
fn App() -> impl IntoView {
    view! {
        <h1>"Iteration"</h1>
        <h2>"Static List"</h2>
        <p>"Use this pattern if the list itself is static."</p>
        <StaticList length=5/>
        <h2>"Dynamic List"</h2>
        <p>"Use this pattern if the rows in your list will change."</p>
        <DynamicList initial_length=5/>
    }
}

/// A list of counters, without the ability
/// to add or remove any.
#[component]
fn StaticList(
    /// How many counters to include in this list.
    length: usize,
) -> impl IntoView {
    // create counter signals that start at incrementing numbers
    let counters = (1..=length).map(|idx| RwSignal::new(idx));

    // when you have a list that doesn't change, you can
    // manipulate it using ordinary Rust iterators
    // and collect it into a Vec<_> to insert it into the DOM
    let counter_buttons = counters
        .map(|count| {
            view! {
                <li>
                    <button
                        on:click=move |_| *count.write() += 1
                    >
                        {count}
                    </button>
                </li>
            }
        })
        .collect::<Vec<_>>();

    // Note that if `counter_buttons` were a reactive list
    // and its value changed, this would be very inefficient:
    // it would rerender every row every time the list changed.
    view! {
        <ul>{counter_buttons}</ul>
    }
}

/// A list of counters that allows you to add or
/// remove counters.
#[component]
fn DynamicList(
    /// The number of counters to begin with.
    initial_length: usize,
) -> impl IntoView {
    // This dynamic list will use the <For/> component.
    // <For/> is a keyed list. This means that each row
    // has a defined key. If the key does not change, the row
    // will not be re-rendered. When the list changes, only
    // the minimum number of changes will be made to the DOM.

    // `next_counter_id` will let us generate unique IDs
    // we do this by simply incrementing the ID by one
    // each time we create a counter
    let mut next_counter_id = initial_length;

    // we generate an initial list as in <StaticList/>
    // but this time we include the ID along with the signal
    // see NOTE in add_counter below re: ArcRwSignal
    let initial_counters = (0..initial_length)
        .map(|id| (id, ArcRwSignal::new(id + 1)))
        .collect::<Vec<_>>();

    // now we store that initial list in a signal
    // this way, we'll be able to modify the list over time,
    // adding and removing counters, and it will change reactively
    let (counters, set_counters) = signal(initial_counters);

    let add_counter = move |_| {
        // create a signal for the new counter
        // we use ArcRwSignal here, instead of RwSignal
        // ArcRwSignal is a reference-counted type, rather than the arena-allocated
        // signal types we've been using so far.
        // When we're creating a collection of signals like this, using ArcRwSignal
        // allows each signal to be deallocated when its row is removed.
        let sig = ArcRwSignal::new(next_counter_id + 1);
        // add this counter to the list of counters
        set_counters.update(move |counters| {
            // since `.update()` gives us `&mut T`
            // we can just use normal Vec methods like `push`
            counters.push((next_counter_id, sig))
        });
        // increment the ID so it's always unique
        next_counter_id += 1;
    };

    view! {
        <div>
            <button on:click=add_counter>
                "Add Counter"
            </button>
            <ul>
                // The <For/> component is central here
                // This allows for efficient, key list rendering
                <For
                    // `each` takes any function that returns an iterator
                    // this should usually be a signal or derived signal
                    // if it's not reactive, just render a Vec<_> instead of <For/>
                    each=move || counters.get()
                    // the key should be unique and stable for each row
                    // using an index is usually a bad idea, unless your list
                    // can only grow, because moving items around inside the list
                    // means their indices will change and they will all rerender
                    key=|counter| counter.0
                    // `children` receives each item from your `each` iterator
                    // and returns a view
                    children=move |(id, count)| {
                        // we can convert our ArcRwSignal to a Copy-able RwSignal
                        // for nicer DX when moving it into the view
                        let count = RwSignal::from(count);
                        view! {
                            <li>
                                <button
                                    on:click=move |_| *count.write() += 1
                                >
                                    {count}
                                </button>
                                <button
                                    on:click=move |_| {
                                        set_counters
                                            .write()
                                            .retain(|(counter_id, _)| {
                                                counter_id != &id
                                            });
                                    }
                                >
                                    "Remove"
                                </button>
                            </li>
                        }
                    }
                />
            </ul>
        </div>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

### Accessing an index while iterating with `<ForEnumerate/>`

For the cases where you need to access the real-time index while iterating,
Leptos provides a [`<ForEnumerate/>`](https://docs.rs/leptos/latest/leptos/control_flow/fn.ForEnumerate.html) component.

The props are identical to the [`<For/>`](https://docs.rs/leptos/latest/leptos/control_flow/fn.For.html) component, but when rendering `children`
it additionally provides a `ReadSignal<usize>` parameter as the index:

```rust
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
struct Counter {
  id: usize,
  count: RwSignal<i32>
}

<ForEnumerate
    each=move || counters.get() // Same as <For/>
    key=|counter| counter.id    // Same as <For/>
    // Provides the index as a signal and the child T
    children={move |index: ReadSignal<usize>, counter: Counter| {
        view! {
            <button>{move || index.get()} ". Value: " {move || counter.count.get()}</button>
        }
    }}
/>
```

or it could also be used with the more convenient `let` syntax:
```rust
<ForEnumerate
    each=move || counters.get() // Same as <For/>
    key=|counter| counter.id    // Same as <For/>
    let(idx, counter)           // let syntax
>
    <button>{move || idx.get()} ". Value: " {move || counter.count.get()}</button>
</ ForEnumerate>
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/04_iteration.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/06_control_flow.md
# Control Flow

In most applications, you sometimes need to make a decision: Should I render this
part of the view, or not? Should I render `<ButtonA/>` or `<WidgetB/>`? This is
**control flow**.

## A Few Tips

When thinking about how to do this with Leptos, it’s important to remember a few
things:

1. Rust is an expression-oriented language: control-flow expressions like
   `if x() { y } else { z }` and `match x() { ... }` return their values. This
   makes them very useful for declarative user interfaces.
2. For any `T` that implements `IntoView`—in other words, for any type that Leptos
   knows how to render—`Option<T>` and `Result<T, impl Error>` _also_ implement
   `IntoView`. And just as `Fn() -> T` renders a reactive `T`, `Fn() -> Option<T>`
   and `Fn() -> Result<T, impl Error>` are reactive.
3. Rust has lots of handy helpers like [Option::map](https://doc.rust-lang.org/std/option/enum.Option.html#method.map),
   [Option::and_then](https://doc.rust-lang.org/std/option/enum.Option.html#method.and_then),
   [Option::ok_or](https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or),
   [Result::map](https://doc.rust-lang.org/std/result/enum.Result.html#method.map),
   [Result::ok](https://doc.rust-lang.org/std/result/enum.Result.html#method.ok), and
   [bool::then](https://doc.rust-lang.org/std/primitive.bool.html#method.then) that
   allow you to convert, in a declarative way, between a few different standard types,
   all of which can be rendered. Spending time in the `Option` and `Result` docs in particular
   is one of the best ways to level up your Rust game.
4. And always remember: to be reactive, values must be functions. You’ll see me constantly
   wrap things in a `move ||` closure, below. This is to ensure that they actually rerun
   when the signal they depend on changes, keeping the UI reactive.

## So What?

To connect the dots a little: this means that you can actually implement most of
your control flow with native Rust code, without any control-flow components or
special knowledge.

For example, let’s start with a simple signal and derived signal:

```rust
let (value, set_value) = signal(0);
let is_odd = move || value.get() % 2 != 0;
```

We can use these signals and ordinary Rust to build most control flow.

### `if` statements

Let’s say I want to render some text if the number is odd, and some other text
if it’s even. Well, how about this?

```rust
view! {
    <p>
        {move || if is_odd() {
            "Odd"
        } else {
            "Even"
        }}
    </p>
}
```

An `if` expression returns its value, and a `&str` implements `IntoView`, so a
`Fn() -> &str` implements `IntoView`, so this... just works!

### `Option<T>`

Let’s say we want to render some text if it’s odd, and nothing if it’s even.

```rust
let message = move || {
    if is_odd() {
        Some("Ding ding ding!")
    } else {
        None
    }
};

view! {
    <p>{message}</p>
}
```

This works fine. We can make it a little shorter if we’d like, using `bool::then()`.

```rust
let message = move || is_odd().then(|| "Ding ding ding!");
view! {
    <p>{message}</p>
}
```

You could even inline this if you’d like, although personally I sometimes like the
better `cargo fmt` and `rust-analyzer` support I get by pulling things out of the `view`.

### `match` statements

We’re still just writing ordinary Rust code, right? So you have all the power of Rust’s
pattern matching at your disposal.

```rust
let message = move || {
    match value.get() {
        0 => "Zero",
        1 => "One",
        n if is_odd() => "Odd",
        _ => "Even"
    }
};
view! {
    <p>{message}</p>
}
```

And why not? YOLO, right?

## Preventing Over-Rendering

Not so YOLO.

Everything we’ve just done is basically fine. But there’s one thing you should remember
and try to be careful with. Each one of the control-flow functions we’ve created so far
is basically a derived signal: it will rerun every time the value changes. In the examples
above, where the value switches from even to odd on every change, this is fine.

But consider the following example:

```rust
let (value, set_value) = signal(0);

let message = move || if value.get() > 5 {
    "Big"
} else {
    "Small"
};

view! {
    <p>{message}</p>
}
```

This _works_, for sure. But if you added a log, you might be surprised

```rust
let message = move || if value.get() > 5 {
    logging::log!("{}: rendering Big", value.get());
    "Big"
} else {
    logging::log!("{}: rendering Small", value.get());
    "Small"
};
```

As a user repeatedly clicks a button incrementing `value`, you’d see something like this:

```
1: rendering Small
2: rendering Small
3: rendering Small
4: rendering Small
5: rendering Small
6: rendering Big
7: rendering Big
8: rendering Big
... ad infinitum
```

Every time `value` changes, it reruns the `if` statement. This makes sense, with
how reactivity works. But it has a downside. For a simple text node, rerunning
the `if` statement and rerendering isn’t a big deal. But imagine it were
like this:

```rust
let message = move || if value.get() > 5 {
    <Big/>
} else {
    <Small/>
};
```

This rerenders `<Small/>` five times, then `<Big/>` infinitely. If they’re
loading resources, creating signals, or even just creating DOM nodes, this is
unnecessary work.

### `<Show/>`

The [`<Show/>`](https://docs.rs/leptos/latest/leptos/control_flow/fn.Show.html) component is
the answer. You pass it a `when` condition function, a `fallback` to be shown if
the `when` function returns `false`, and children to be rendered if `when` is `true`.

```rust
let (value, set_value) = signal(0);

view! {
  <Show
    when=move || { value.get() > 5 }
    fallback=|| view! { <Small/> }
  >
    <Big/>
  </Show>
}
```

`<Show/>` memoizes the `when` condition, so it only renders its `<Small/>` once,
continuing to show the same component until `value` is greater than five;
then it renders `<Big/>` once, continuing to show it indefinitely or until `value`
goes below five and then renders `<Small/>` again.

This is a helpful tool to avoid rerendering when using dynamic `if` expressions.
As always, there's some overhead: for a very simple node (like updating a single
text node, or updating a class or attribute), a `move || if ...` will be more
efficient. But if it’s at all expensive to render either branch, reach for
`<Show/>`.

## Note: Type Conversions

There’s one final thing it’s important to say in this section.

Leptos uses a statically-typed view tree. The `view` macro returns different types
for different kinds of view.

This won’t compile, because the different HTML elements are different types.

```rust,compile_error
view! {
    <main>
        {move || match is_odd() {
            true if value.get() == 1 => {
                view! { <pre>"One"</pre> }
            },
            false if value.get() == 2 => {
                view! { <p>"Two"</p> }
            }
            // returns HtmlElement<Textarea>
            _ => view! { <textarea>{value.get()}</textarea> }
        }}
    </main>
}
```

This strong typing is very powerful, because it enables all sorts of compile-time optimizations.
But it can be a little annoying in conditional logic like this, because you can’t
return different types from different branches of a condition in Rust. There are two ways
to get yourself out of this situation:

1. Use the enum `Either` (and `EitherOf3`, `EitherOf4`, etc.) to convert the different types to the same type.
2. Use `.into_any()` to convert multiple types into one typed-erased `AnyView`.

Here’s the same example, with the conversion added:

```rust,compile_error
view! {
    <main>
        {move || match is_odd() {
            true if value.get() == 1 => {
                // returns HtmlElement<Pre>
                view! { <pre>"One"</pre> }.into_any()
            },
            false if value.get() == 2 => {
                // returns HtmlElement<P>
                view! { <p>"Two"</p> }.into_any()
            }
            // returns HtmlElement<Textarea>
            _ => view! { <textarea>{value()}</textarea> }.into_any()
        }}
    </main>
}
```

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/6-control-flow-0-7-3m4c9j?file=%2Fsrc%2Fmain.rs%3A1%2C1-91%2C2&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/6-control-flow-0-7-3m4c9j?file=%2Fsrc%2Fmain.rs%3A1%2C1-91%2C2&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;

#[component]
fn App() -> impl IntoView {
    let (value, set_value) = signal(0);
    let is_odd = move || value.get() & 1 == 1;
    let odd_text = move || if is_odd() {
        Some("How odd!")
    } else {
        None
    };

    view! {
        <h1>"Control Flow"</h1>

        // Simple UI to update and show a value
        <button on:click=move |_| *set_value.write() += 1>
            "+1"
        </button>
        <p>"Value is: " {value}</p>

        <hr/>

        <h2><code>"Option<T>"</code></h2>
        // For any `T` that implements `IntoView`,
        // so does `Option<T>`

        <p>{odd_text}</p>
        // This means you can use `Option` methods on it
        <p>{move || odd_text().map(|text| text.len())}</p>

        <h2>"Conditional Logic"</h2>
        // You can do dynamic conditional if-then-else
        // logic in several ways
        //
        // a. An "if" expression in a function
        //    This will simply re-render every time the value
        //    changes, which makes it good for lightweight UI
        <p>
            {move || if is_odd() {
                "Odd"
            } else {
                "Even"
            }}
        </p>

        // b. Toggling some kind of class
        //    This is smart for an element that's going to
        //    toggled often, because it doesn't destroy
        //    it in between states
        //    (you can find the `hidden` class in `index.html`)
        <p class:hidden=is_odd>"Appears if even."</p>

        // c. The <Show/> component
        //    This only renders the fallback and the child
        //    once, lazily, and toggles between them when
        //    needed. This makes it more efficient in many cases
        //    than a {move || if ...} block
        <Show when=is_odd
            fallback=|| view! { <p>"Even steven"</p> }
        >
            <p>"Oddment"</p>
        </Show>

        // d. Because `bool::then()` converts a `bool` to
        //    `Option`, you can use it to create a show/hide toggled
        {move || is_odd().then(|| view! { <p>"Oddity!"</p> })}

        <h2>"Converting between Types"</h2>
        // e. Note: if branches return different types,
        //    you can convert between them with
        //    `.into_any()` or using the `Either` enums
        //    (`Either`, `EitherOf3`, `EitherOf4`, etc.)
        {move || match is_odd() {
            true if value.get() == 1 => {
                // <pre> returns HtmlElement<Pre>
                view! { <pre>"One"</pre> }.into_any()
            },
            false if value.get() == 2 => {
                // <p> returns HtmlElement<P>
                // so we convert into a more generic type
                view! { <p>"Two"</p> }.into_any()
            }
            _ => view! { <textarea>{value.get()}</textarea> }.into_any()
        }}
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/06_control_flow.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/08_parent_child.md
# Parent-Child Communication

You can think of your application as a nested tree of components. Each component
handles its own local state and manages a section of the user interface, so
components tend to be relatively self-contained.

Sometimes, though, you’ll want to communicate between a parent component and its
child. For example, imagine you’ve defined a `<FancyButton/>` component that adds
some styling, logging, or something else to a `<button/>`. You want to use a
`<FancyButton/>` in your `<App/>` component. But how can you communicate between
the two?

It’s easy to communicate state from a parent component to a child component. We
covered some of this in the material on [components and props](./03_components.md).
Basically if you want the parent to communicate to the child, you can pass either a
[`ReadSignal`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.ReadSignal.html) or
[`Signal`](https://docs.rs/leptos/latest/leptos/reactive/wrappers/read/struct.Signal.html) as a prop.

But what about the other direction? How can a child send notifications about events
or state changes back up to the parent?

There are four basic patterns of parent-child communication in Leptos.

## 1. Pass a [`WriteSignal`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.WriteSignal.html)

One approach is simply to pass a `WriteSignal` from the parent down to the child, and update
it in the child. This lets you manipulate the state of the parent from the child.

```rust
#[component]
pub fn App() -> impl IntoView {
    let (toggled, set_toggled) = signal(false);
    view! {
        <p>"Toggled? " {toggled}</p>
        <ButtonA setter=set_toggled/>
    }
}

#[component]
pub fn ButtonA(setter: WriteSignal<bool>) -> impl IntoView {
    view! {
        <button
            on:click=move |_| setter.update(|value| *value = !*value)
        >
            "Toggle"
        </button>
    }
}
```

This pattern is simple, but you should be careful with it: passing around a `WriteSignal`
can make it hard to reason about your code. In this example, it’s pretty clear when you
read `<App/>` that you are handing off the ability to mutate `toggled`, but it’s not at
all clear when or how it will change. In this small, local example it’s easy to understand,
but if you find yourself passing around `WriteSignal`s like this throughout your code,
you should really consider whether this is making it too easy to write spaghetti code.

## 2. Use a Callback

Another approach would be to pass a callback to the child: say, `on_click`.

```rust
#[component]
pub fn App() -> impl IntoView {
    let (toggled, set_toggled) = signal(false);
    view! {
        <p>"Toggled? " {toggled}</p>
        <ButtonB on_click=move |_| set_toggled.update(|value| *value = !*value)/>
    }
}

#[component]
pub fn ButtonB(on_click: impl FnMut(MouseEvent) + 'static) -> impl IntoView {
    view! {
        <button on:click=on_click>
            "Toggle"
        </button>
    }
}
```

You’ll notice that whereas `<ButtonA/>` was given a `WriteSignal` and decided how to mutate it,
`<ButtonB/>` simply fires an event: the mutation happens back in `<App/>`. This has the advantage
of keeping local state local, preventing the problem of spaghetti mutation. But it also means
the logic to mutate that signal needs to exist up in `<App/>`, not down in `<ButtonB/>`. These
are real trade-offs, not a simple right-or-wrong choice.

## 3. Use an Event Listener

You can actually write Option 2 in a slightly different way. If the callback maps directly onto
a native DOM event, you can add an `on:` listener directly to the place you use the component
in your `view` macro in `<App/>`.

```rust
#[component]
pub fn App() -> impl IntoView {
    let (toggled, set_toggled) = signal(false);
    view! {
        <p>"Toggled? " {toggled}</p>
        // note the on:click instead of on_click
        // this is the same syntax as an HTML element event listener
        <ButtonC on:click=move |_| set_toggled.update(|value| *value = !*value)/>
    }
}

#[component]
pub fn ButtonC() -> impl IntoView {
    view! {
        <button>"Toggle"</button>
    }
}
```

This lets you write way less code in `<ButtonC/>` than you did for `<ButtonB/>`,
and still gives a correctly-typed event to the listener. This works by adding an
`on:` event listener to each element that `<ButtonC/>` returns: in this case, just
the one `<button>`.

Of course, this only works for actual DOM events that you’re passing directly through
to the elements you’re rendering in the component. For more complex logic that
doesn’t map directly onto an element (say you create `<ValidatedForm/>` and want an
`on_valid_form_submit` callback) you should use Option 2.

## 4. Providing a Context

This version is actually a variant on Option 1. Say you have a deeply-nested component
tree:

```rust
#[component]
pub fn App() -> impl IntoView {
    let (toggled, set_toggled) = signal(false);
    view! {
        <p>"Toggled? " {toggled}</p>
        <Layout/>
    }
}

#[component]
pub fn Layout() -> impl IntoView {
    view! {
        <header>
            <h1>"My Page"</h1>
        </header>
        <main>
            <Content/>
        </main>
    }
}

#[component]
pub fn Content() -> impl IntoView {
    view! {
        <div class="content">
            <ButtonD/>
        </div>
    }
}

#[component]
pub fn ButtonD() -> impl IntoView {
    todo!()
}

```

Now `<ButtonD/>` is no longer a direct child of `<App/>`, so you can’t simply
pass your `WriteSignal` to its props. You could do what’s sometimes called
“prop drilling,” adding a prop to each layer between the two:

```rust
#[component]
pub fn App() -> impl IntoView {
    let (toggled, set_toggled) = signal(false);
    view! {
        <p>"Toggled? " {toggled}</p>
        <Layout set_toggled/>
    }
}

#[component]
pub fn Layout(set_toggled: WriteSignal<bool>) -> impl IntoView {
    view! {
        <header>
            <h1>"My Page"</h1>
        </header>
        <main>
            <Content set_toggled/>
        </main>
    }
}

#[component]
pub fn Content(set_toggled: WriteSignal<bool>) -> impl IntoView {
    view! {
        <div class="content">
            <ButtonD set_toggled/>
        </div>
    }
}

#[component]
pub fn ButtonD(set_toggled: WriteSignal<bool>) -> impl IntoView {
    todo!()
}
```

This is a mess. `<Layout/>` and `<Content/>` don’t need `set_toggled`; they just
pass it through to `<ButtonD/>`. But I need to declare the prop in triplicate.
This is not only annoying but hard to maintain: imagine we add a “half-toggled”
option and the type of `set_toggled` needs to change to an `enum`. We have to change
it in three places!

Isn’t there some way to skip levels?

There is!

### 4.1 The Context API

You can provide data that skips levels by using [`provide_context`](https://docs.rs/leptos/latest/leptos/context/fn.provide_context.html)
and [`use_context`](https://docs.rs/leptos/latest/leptos/context/fn.use_context.html). Contexts are identified
by the type of the data you provide (in this example, `WriteSignal<bool>`), and they exist in a top-down
tree that follows the contours of your UI tree. In this example, we can use context to skip the
unnecessary prop drilling.

```rust
#[component]
pub fn App() -> impl IntoView {
    let (toggled, set_toggled) = signal(false);

    // share `set_toggled` with all children of this component
    provide_context(set_toggled);

    view! {
        <p>"Toggled? " {toggled}</p>
        <Layout/>
    }
}

// <Layout/> and <Content/> omitted
// To work in this version, drop the `set_toggled` parameter on each

#[component]
pub fn ButtonD() -> impl IntoView {
    // use_context searches up the context tree, hoping to
    // find a `WriteSignal<bool>`
    // in this case, I .expect() because I know I provided it
    let setter = use_context::<WriteSignal<bool>>().expect("to have found the setter provided");

    view! {
        <button
            on:click=move |_| setter.update(|value| *value = !*value)
        >
            "Toggle"
        </button>
    }
}

```

The same caveats apply to this as to `<ButtonA/>`: passing a `WriteSignal`
around should be done with caution, as it allows you to mutate state from
arbitrary parts of your code. But when done carefully, this can be one of
the most effective techniques for global state management in Leptos: simply
provide the state at the highest level you’ll need it, and use it wherever
you need it lower down.

Note that there are no performance downsides to this approach. Because you
are passing a fine-grained reactive signal, _nothing happens_ in the intervening
components (`<Layout/>` and `<Content/>`) when you update it. You are communicating
directly between `<ButtonD/>` and `<App/>`. In fact—and this is the power of
fine-grained reactivity—you are communicating directly between a button click
in `<ButtonD/>` and a single text node in `<App/>`. It’s as if the components
themselves don’t exist at all. And, well... at runtime, they don’t. It’s just
signals and effects, all the way down.

Note that this approach makes an important tradeoff: You don't have type-safety
anymore between `provide_context` and `use_context`. Receiving the right context
in the child component is a runtime check (see `use_context.expect(...)`). The
compiler won't guide you during a refactoring, as it does with the earlier approaches. 

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/8-parent-child-0-7-cgcgk9?file=%2Fsrc%2Fmain.rs%3A1%2C1-116%2C2&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/8-parent-child-0-7-cgcgk9?file=%2Fsrc%2Fmain.rs%3A1%2C1-116%2C2&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::{ev::MouseEvent, prelude::*};

// This highlights four different ways that child components can communicate
// with their parent:
// 1) <ButtonA/>: passing a WriteSignal as one of the child component props,
//    for the child component to write into and the parent to read
// 2) <ButtonB/>: passing a closure as one of the child component props, for
//    the child component to call
// 3) <ButtonC/>: adding an `on:` event listener to a component
// 4) <ButtonD/>: providing a context that is used in the component (rather than prop drilling)

#[derive(Copy, Clone)]
struct SmallcapsContext(WriteSignal<bool>);

#[component]
pub fn App() -> impl IntoView {
    // just some signals to toggle four classes on our <p>
    let (red, set_red) = signal(false);
    let (right, set_right) = signal(false);
    let (italics, set_italics) = signal(false);
    let (smallcaps, set_smallcaps) = signal(false);

    // the newtype pattern isn't *necessary* here but is a good practice
    // it avoids confusion with other possible future `WriteSignal<bool>` contexts
    // and makes it easier to refer to it in ButtonD
    provide_context(SmallcapsContext(set_smallcaps));

    view! {
        <main>
            <p
                // class: attributes take F: Fn() => bool, and these signals all implement Fn()
                class:red=red
                class:right=right
                class:italics=italics
                class:smallcaps=smallcaps
            >
                "Lorem ipsum sit dolor amet."
            </p>

            // Button A: pass the signal setter
            <ButtonA setter=set_red/>

            // Button B: pass a closure
            <ButtonB on_click=move |_| set_right.update(|value| *value = !*value)/>

            // Button C: use a regular event listener
            // setting an event listener on a component like this applies it
            // to each of the top-level elements the component returns
            <ButtonC on:click=move |_| set_italics.update(|value| *value = !*value)/>

            // Button D gets its setter from context rather than props
            <ButtonD/>
        </main>
    }
}

/// Button A receives a signal setter and updates the signal itself
#[component]
pub fn ButtonA(
    /// Signal that will be toggled when the button is clicked.
    setter: WriteSignal<bool>,
) -> impl IntoView {
    view! {
        <button
            on:click=move |_| setter.update(|value| *value = !*value)
        >
            "Toggle Red"
        </button>
    }
}

/// Button B receives a closure
#[component]
pub fn ButtonB(
    /// Callback that will be invoked when the button is clicked.
    on_click: impl FnMut(MouseEvent) + 'static,
) -> impl IntoView
{
    view! {
        <button
            on:click=on_click
        >
            "Toggle Right"
        </button>
    }
}

/// Button C is a dummy: it renders a button but doesn't handle
/// its click. Instead, the parent component adds an event listener.
#[component]
pub fn ButtonC() -> impl IntoView {
    view! {
        <button>
            "Toggle Italics"
        </button>
    }
}

/// Button D is very similar to Button A, but instead of passing the setter as a prop
/// we get it from the context
#[component]
pub fn ButtonD() -> impl IntoView {
    let setter = use_context::<SmallcapsContext>().unwrap().0;

    view! {
        <button
            on:click=move |_| setter.update(|value| *value = !*value)
        >
            "Toggle Small Caps"
        </button>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/08_parent_child.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/01_basic_component.md
# A Basic Component

That “Hello, world!” was a _very_ simple example. Let’s move on to something a
little more like an ordinary app.

First, let’s edit the `main` function so that, instead of rendering the whole
app, it just renders an `<App/>` component. Components are the basic unit of
composition and design in most web frameworks, and Leptos is no exception.
Conceptually, they are similar to HTML elements: they represent a section of the
DOM, with self-contained, defined behavior. Unlike HTML elements, they are in
`PascalCase`, so most Leptos applications will start with something like an
`<App/>` component.

```rust
use leptos::mount::mount_to_body;

fn main() {
    mount_to_body(App);
}
```

Now let’s define our `App` component itself. Because it’s relatively simple,
I’ll give you the whole thing up front, then walk through it line by line.

```rust
use leptos::prelude::*;

#[component]
fn App() -> impl IntoView {
    let (count, set_count) = signal(0);

    view! {
        <button
            on:click=move |_| set_count.set(3)
        >
            "Click me: "
            {count}
        </button>
        <p>
            "Double count: "
            {move || count.get() * 2}
        </p>
    }
}
```

## Importing the Prelude

```rust
use leptos::prelude::*;
```

Leptos provides a prelude which includes commonly-used traits and functions.
If you'd prefer to use individual imports, feel free to do that; the compiler
will provide helpful recommendations for each import.

## The Component Signature

```rust
#[component]
```

Like all component definitions, this begins with the [`#[component]`](https://docs.rs/leptos/latest/leptos/attr.component.html) macro. `#[component]` annotates a function so it can be
used as a component in your Leptos application. We’ll see some of the other features of
this macro in a couple chapters.

```rust
fn App() -> impl IntoView
```

Every component is a function with the following characteristics

1. It takes zero or more arguments of any type.
2. It returns `impl IntoView`, which is an opaque type that includes
   anything you could return from a Leptos `view`.

> Component function arguments are gathered together into a single props struct
> which is built by the `view` macro as needed.

## The Component Body

The body of the component function is a set-up function that runs once, not a
render function that reruns multiple times. You’ll typically use it to create a
few reactive variables, define any side effects that run in response to those values
changing, and describe the user interface.

```rust
let (count, set_count) = signal(0);
```

[`signal`](https://docs.rs/leptos/latest/leptos/reactive/signal/fn.signal.html)
creates a signal, the basic unit of reactive change and state management in Leptos.
This returns a `(getter, setter)` tuple. To access the current value, you’ll
use `count.get()` (or, on `nightly` Rust, the shorthand `count()`). To set the
current value, you’ll call `set_count.set(...)` (or, on nightly, `set_count(...)`).

> `.get()` clones the value and `.set()` overwrites it. In many cases, it’s more efficient to use `.with()` or `.update()`; check out the docs for [`ReadSignal`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.ReadSignal.html) and [`WriteSignal`](https://docs.rs/leptos/latest/leptos/reactive/signal/struct.WriteSignal.html) if you’d like to learn more about those trade-offs at this point.

## The View

Leptos defines user interfaces using a JSX-like format via the [`view`](https://docs.rs/leptos/latest/leptos/macro.view.html) macro.

```rust
view! {
    <button
        // define an event listener with on:
        on:click=move |_| set_count.set(3)
    >
        // text nodes are wrapped in quotation marks
        "Click me: "

        // blocks include Rust code
        // in this case, it renders the value of the signal
        {count}
    </button>
    <p>
        "Double count: "
        {move || count.get() * 2}
    </p>
}
```

This should mostly be easy to understand: it looks like HTML, with a special
`on:click` to define a `click` event listener, a few text nodes that look like
Rust strings, and then two values in braces: one, `{count}`, seems pretty easy
to understand (it's just the value of our signal), and then...

```rust
{move || count.get() * 2}
```

whatever that is.

People sometimes joke that they use more closures in their first Leptos application
than they’ve ever used in their lives. And fair enough.

Passing a function into the view tells the framework: “Hey, this is something
that might change.”

When we click the button and call `set_count`, the `count` signal is updated. This
`move || count.get() * 2` closure, whose value depends on the value of `count`, reruns,
and the framework makes a targeted update to that specific text node, touching
nothing else in your application. This is what allows for extremely efficient updates
to the DOM.

Remember—and this is _very important_—only signals and functions are treated as reactive
values in the view.

This means that `{count}` and `{count.get()}` do very different things in your view.
`{count}` passes in a signal, telling the framework to update the view every time `count` changes.
`{count.get()}` accesses the value of `count` once, and passes an `i32` into the view,
rendering it once, unreactively.

In the same way, `{move || count.get() * 2}` and `{count.get() * 2}` behave differently.
The first one is a function, so it's rendered reactively. The second is a value, so it's
just rendered once, and won't update when `count` changes.

You can see the difference in the CodeSandbox below!

Let’s make one final change. `set_count.set(3)` is a pretty useless thing for a click handler to do. Let’s replace “set this value to 3” with “increment this value by 1”:

```rust
move |_| {
    *set_count.write() += 1;
}
```

You can see here that while `set_count` just sets the value, `set_count.write()` gives us a mutable reference and mutates the value in place. Either one will trigger a reactive update in our UI.

> Throughout this tutorial, we’ll use CodeSandbox to show interactive examples.
> Hover over any of the variables to show Rust-Analyzer details
> and docs for what’s going on. Feel free to fork the examples to play with them yourself!

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/1-basic-component-0-7-qvgdxs?file=%2Fsrc%2Fmain.rs%3A1%2C1-59%2C2&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

> To show the browser in the sandbox, you may need to click `Add DevTools >
Other Previews > 8080.`

<template>
  <iframe src="https://codesandbox.io/p/devbox/1-basic-component-0-7-qvgdxs?file=%2Fsrc%2Fmain.rs%3A1%2C1-59%2C2&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;

// The #[component] macro marks a function as a reusable component
// Components are the building blocks of your user interface
// They define a reusable unit of behavior
#[component]
fn App() -> impl IntoView {
    // here we create a reactive signal
    // and get a (getter, setter) pair
    // signals are the basic unit of change in the framework
    // we'll talk more about them later
    let (count, set_count) = signal(0);

    // the `view` macro is how we define the user interface
    // it uses an HTML-like format that can accept certain Rust values
    view! {
        <button
            // on:click will run whenever the `click` event fires
            // every event handler is defined as `on:{eventname}`

            // we're able to move `set_count` into the closure
            // because signals are Copy and 'static

            on:click=move |_| *set_count.write() += 1
        >
            // text nodes in RSX should be wrapped in quotes,
            // like a normal Rust string
            "Click me: "
            {count}
        </button>
        <p>
            <strong>"Reactive: "</strong>
            // you can insert Rust expressions as values in the DOM
            // by wrapping them in curly braces
            // if you pass in a function, it will reactively update
            {move || count.get()}
        </p>
        <p>
            <strong>"Reactive shorthand: "</strong>
            // you can use signals directly in the view, as a shorthand
            // for a function that just wraps the getter
            {count}
        </p>
        <p>
            <strong>"Not reactive: "</strong>
            // NOTE: if you just write {count.get()}, this will *not* be reactive
            // it simply gets the value of count once
            {count.get()}
        </p>
    }
}

// This `main` function is the entry point into the app
// It just mounts our component to the <body>
// Because we defined it as `fn App`, we can now use it in a
// template as <App/>
fn main() {
    leptos::mount::mount_to_body(App)
}
```
</details>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/01_basic_component.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/03_components.md
# Components and Props

So far, we’ve been building our whole application in a single component. This
is fine for really tiny examples, but in any real application you’ll need to
break the user interface out into multiple components, so you can break your
interface down into smaller, reusable, composable chunks.

Let’s take our progress bar example. Imagine that you want two progress bars
instead of one: one that advances one tick per click, one that advances two ticks
per click.

You _could_ do this by just creating two `<progress>` elements:

```rust
let (count, set_count) = signal(0);
let double_count = move || count.get() * 2;

view! {
    <progress
        max="50"
        value=count
    />
    <progress
        max="50"
        value=double_count
    />
}
```

But of course, this doesn’t scale very well. If you want to add a third progress
bar, you need to add this code another time. And if you want to edit anything
about it, you need to edit it in triplicate.

Instead, let’s create a `<ProgressBar/>` component.

```rust
#[component]
fn ProgressBar() -> impl IntoView {
    view! {
        <progress
            max="50"
            // hmm... where will we get this from?
            value=progress
        />
    }
}
```

There’s just one problem: `progress` is not defined. Where should it come from?
When we were defining everything manually, we just used the local variable names.
Now we need some way to pass an argument into the component.

## Component Props

We do this using component properties, or “props.” If you’ve used another frontend
framework, this is probably a familiar idea. Basically, properties are to components
as attributes are to HTML elements: they let you pass additional information into
the component.

In Leptos, you define props by giving additional arguments to the component function.

```rust
#[component]
fn ProgressBar(
    progress: ReadSignal<i32>
) -> impl IntoView {
    view! {
        <progress
            max="50"
            // now this works
            value=progress
        />
    }
}
```

Now we can use our component in the main `<App/>` component’s view.

```rust
#[component]
fn App() -> impl IntoView {
    let (count, set_count) = signal(0);
    view! {
        <button on:click=move |_| *set_count.write() += 1>
            "Click me"
        </button>
        // now we use our component!
        <ProgressBar progress=count/>
    }
}
```

Using a component in the view looks a lot like using an HTML element. You’ll
notice that you can easily tell the difference between an element and a component
because components always have `PascalCase` names. You pass the `progress` prop
in as if it were an HTML element attribute. Simple.

### Reactive and Static Props

You’ll notice that throughout this example, `progress` takes a reactive
`ReadSignal<i32>`, and not a plain `i32`. This is **very important**.

Component props have no special meaning attached to them. A component is simply
a function that runs once to set up the user interface. The only way to tell the
interface to respond to changes is to pass it a signal type. So if you have a
component property that will change over time, like our `progress`, it should
be a signal.

### `optional` Props

Right now the `max` setting is hard-coded. Let’s take that as a prop too. But
let’s make this prop optional. We can do that by annotating it with `#[prop(optional)]`.

```rust
#[component]
fn ProgressBar(
    // mark this prop optional
    // you can specify it or not when you use <ProgressBar/>
    #[prop(optional)]
    max: u16,
    progress: ReadSignal<i32>
) -> impl IntoView {
    view! {
        <progress
            max=max
            value=progress
        />
    }
}
```

Now, we can use `<ProgressBar max=50 progress=count/>`, or we can omit `max`
to use the default value (i.e., `<ProgressBar progress=count/>`). The default value
on an `optional` is its `Default::default()` value, which for a `u16` is going to
be `0`. In the case of a progress bar, a max value of `0` is not very useful.

So let’s give it a particular default value instead.

### `default` props

You can specify a default value other than `Default::default()` pretty simply
with `#[prop(default = ...)`.

```rust
#[component]
fn ProgressBar(
    #[prop(default = 100)]
    max: u16,
    progress: ReadSignal<i32>
) -> impl IntoView {
    view! {
        <progress
            max=max
            value=progress
        />
    }
}
```

### Generic Props

This is great. But we began with two counters, one driven by `count`, and one by
the derived signal `double_count`. Let’s recreate that by using `double_count`
as the `progress` prop on another `<ProgressBar/>`.

```rust,compile_fail
#[component]
fn App() -> impl IntoView {
    let (count, set_count) = signal(0);
    let double_count = move || count.get() * 2;

    view! {
        <button on:click=move |_| { set_count.update(|n| *n += 1); }>
            "Click me"
        </button>
        <ProgressBar progress=count/>
        // add a second progress bar
        <ProgressBar progress=double_count/>
    }
}
```

Hm... this won’t compile. It should be pretty easy to understand why: we’ve declared
that the `progress` prop takes `ReadSignal<i32>`, and `double_count` is not
`ReadSignal<i32>`. As rust-analyzer will tell you, its type is `|| -> i32`, i.e.,
it’s a closure that returns an `i32`.

There are a couple ways to handle this. One would be to say: “Well, I know that
for the view to be reactive, it needs to take a function or a signal. I can always
turn a signal into a function by wrapping it in a closure... Maybe I could
just take any function?” 

If you’re using nightly Rust with the `nightly` feature, signals are functions,
so you could use a generic component and take any `Fn() -> i32`:

```rust
#[component]
fn ProgressBar(
    #[prop(default = 100)]
    max: u16,
    progress: impl Fn() -> i32 + Send + Sync + 'static
) -> impl IntoView {
    view! {
        <progress
            max=max
            value=progress
        />
        // Add a line-break to avoid overlap
        <br/>
    }
}
```

> Generic props can also be specified using a `where` clause, or using inline generics like `ProgressBar<F: Fn() -> i32 + 'static>`.

Generics need to be used somewhere in the component props. This is because props are built into a struct, so all generic types must be used somewhere in the struct. This is often easily accomplished using an optional `PhantomData` prop. You can then specify a generic in the view using the syntax for expressing types: `<Component<T>/>` (not with the turbofish-style `<Component::<T>/>`).

```rust
#[component]
fn SizeOf<T: Sized>(#[prop(optional)] _ty: PhantomData<T>) -> impl IntoView {
    std::mem::size_of::<T>()
}

#[component]
pub fn App() -> impl IntoView {
    view! {
        <SizeOf<usize>/>
        <SizeOf<String>/>
    }
}
```

> Note that there are some limitations. For example, our view macro parser can’t handle nested generics like `<SizeOf<Vec<T>>/>`.

### `into` Props

If you’re on stable Rust, signals don’t directly implement `Fn()`. We could wrap the signal in a closure (`move || progress.get()`)
but that’s a bit messy.

There’s another way we could implement this, and it would be to use `#[prop(into)]`.
This attribute automatically calls `.into()` on the values you pass as props,
which allows you to easily pass props with different values.

In this case, it’s helpful to know about the
[`Signal`](https://docs.rs/leptos/latest/leptos/reactive/wrappers/read/struct.Signal.html) type. `Signal`
is an enumerated type that represents any kind of readable reactive signal, or a plain value.
It can be useful when defining APIs for components you’ll want to reuse while passing
different sorts of signals.

```rust
#[component]
fn ProgressBar(
    #[prop(default = 100)]
    max: u16,
    #[prop(into)]
    progress: Signal<i32>
) -> impl IntoView
{
    view! {
        <progress
            max=max
            value=progress
        />
        <br/>
    }
}

#[component]
fn App() -> impl IntoView {
    let (count, set_count) = signal(0);
    let double_count = move || count.get() * 2;

    view! {
        <button on:click=move |_| *set_count.write() += 1>
            "Click me"
        </button>
        // .into() converts `ReadSignal` to `Signal`
        <ProgressBar progress=count/>
        // use `Signal::derive()` to wrap a derived signal with the `Signal` type
        <ProgressBar progress=Signal::derive(double_count)/>
    }
}
```

### Optional Generic Props

Note that you can’t specify optional generic props for a component. Let’s see what would happen if you try:

```rust,compile_fail
#[component]
fn ProgressBar<F: Fn() -> i32 + Send + Sync + 'static>(
    #[prop(optional)] progress: Option<F>,
) -> impl IntoView {
    progress.map(|progress| {
        view! {
            <progress
                max=100
                value=progress
            />
            <br/>
        }
    })
}

#[component]
pub fn App() -> impl IntoView {
    view! {
        <ProgressBar/>
    }
}
```

Rust helpfully gives the error

```
xx |         <ProgressBar/>
   |          ^^^^^^^^^^^ cannot infer type of the type parameter `F` declared on the function `ProgressBar`
   |
help: consider specifying the generic argument
   |
xx |         <ProgressBar::<F>/>
   |                     +++++
```

You can specify generics on components with a `<ProgressBar<F>/>` syntax (no turbofish in the `view` macro). Specifying the correct type here is not possible; closures and functions in general are unnameable types. The compiler can display them with a shorthand, but you can’t specify them.

However, you can get around this by providing a concrete type using `Box<dyn _>` or `&dyn _`:

```rust
#[component]
fn ProgressBar(
    #[prop(optional)] progress: Option<Box<dyn Fn() -> i32 + Send + Sync>>,
) -> impl IntoView {
    progress.map(|progress| {
        view! {
            <progress
                max=100
                value=progress
            />
            <br/>
        }
    })
}

#[component]
pub fn App() -> impl IntoView {
    view! {
        <ProgressBar/>
    }
}
```

Because the Rust compiler now knows the concrete type of the prop, and therefore its size in memory even in the `None` case, this compiles fine.

> In this particular case, `&dyn Fn() -> i32` will cause lifetime issues, but in other cases, it may be a possibility.

## Documenting Components

This is one of the least essential but most important sections of this book.
It’s not strictly necessary to document your components and their props. It may
be very important, depending on the size of your team and your app. But it’s very
easy, and bears immediate fruit.

To document a component and its props, you can simply add doc comments on the
component function, and each one of the props:

```rust
/// Shows progress toward a goal.
#[component]
fn ProgressBar(
    /// The maximum value of the progress bar.
    #[prop(default = 100)]
    max: u16,
    /// How much progress should be displayed.
    #[prop(into)]
    progress: Signal<i32>,
) -> impl IntoView {
    /* ... */
}
```

That’s all you need to do. These behave like ordinary Rust doc comments, except
that you can document individual component props, which can’t be done with Rust
function arguments.

This will automatically generate documentation for your component, its `Props`
type, and each of the fields used to add props. It can be a little hard to
understand how powerful this is until you hover over the component name or props
and see the power of the `#[component]` macro combined with rust-analyzer here.

## Spreading Attributes onto Components

Sometimes you want users to be able to add additional attributes to a component. For example, you might want users to be able to add their own `class` or `id` attributes for styling or other purposes.

You _could_ do this by creating `class` or `id` props that you then apply to the appropriate element. But Leptos also supports “spreading” additional attributes onto components. Attributes added to a component will be applied to all top-level HTML elements returned from its view.

```rust
// you can create attribute lists by using the view macro with a spread {..} as the tag name
let spread_onto_component = view! {
    <{..} aria-label="a component with attribute spreading"/>
};


view! {
    // attributes that are spread onto a component will be applied to *all* elements returned as part of
    // the component's view. to apply attributes to a subset of the component, pass them via a component prop
    <ComponentThatTakesSpread
        // plain identifiers are for props
        some_prop="foo"
        another_prop=42

        // the class:, style:, prop:, on: syntaxes work just as they do on elements
        class:foo=true
        style:font-weight="bold"
        prop:cool=42
        on:click=move |_| alert("clicked ComponentThatTakesSpread")

        // to pass a plain HTML attribute, prefix it with attr:
        attr:id="foo"

        // or, if you want to include multiple attributes, rather than prefixing each with
        // attr:, you can separate them from component props with the spread {..}
        {..} // everything after this is treated as an HTML attribute
        title="ooh, a title!"

        // we can add the whole list of attributes defined above
        {..spread_onto_component}
    />
}
```

See the [`spread` example](https://github.com/leptos-rs/leptos/blob/main/examples/spread/src/lib.rs) for more examples.

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/3-components-0-7-rkjn3j?file=%2Fsrc%2Fmain.rs%3A39%2C10)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/3-components-0-7-rkjn3j?file=%2Fsrc%2Fmain.rs%3A39%2C10" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;

// Composing different components together is how we build
// user interfaces. Here, we'll define a reusable <ProgressBar/>.
// You'll see how doc comments can be used to document components
// and their properties.

/// Shows progress toward a goal.
#[component]
fn ProgressBar(
    // Marks this as an optional prop. It will default to the default
    // value of its type, i.e., 0.
    #[prop(default = 100)]
    /// The maximum value of the progress bar.
    max: u16,
    // Will run `.into()` on the value passed into the prop.
    #[prop(into)]
    // `Signal<T>` is a wrapper for several reactive types.
    // It can be helpful in component APIs like this, where we
    // might want to take any kind of reactive value
    /// How much progress should be displayed.
    progress: Signal<i32>,
) -> impl IntoView {
    view! {
        <progress
            max={max}
            value=progress
        />
        <br/>
    }
}

#[component]
fn App() -> impl IntoView {
    let (count, set_count) = signal(0);

    let double_count = move || count.get() * 2;

    view! {
        <button
            on:click=move |_| {
                *set_count.write() += 1;
            }
        >
            "Click me"
        </button>
        <br/>
        // If you have this open in CodeSandbox or an editor with
        // rust-analyzer support, try hovering over `ProgressBar`,
        // `max`, or `progress` to see the docs we defined above
        <ProgressBar max=50 progress=count/>
        // Let's use the default max value on this one
        // the default is 100, so it should move half as fast
        <ProgressBar progress=count/>
        // Signal::derive creates a Signal wrapper from our derived signal
        // using double_count means it should move twice as fast
        <ProgressBar max=50 progress=Signal::derive(double_count)/>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/03_components.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/09_component_children.md
# Component Children

It’s pretty common to want to pass children into a component, just as you can pass
children into an HTML element. For example, imagine I have a `<FancyForm/>` component
that enhances an HTML `<form>`. I need some way to pass all its inputs.

```rust
view! {
    <FancyForm>
        <fieldset>
            <label>
                "Some Input"
                <input type="text" name="something"/>
            </label>
        </fieldset>
        <button>"Submit"</button>
    </FancyForm>
}
```

How can you do this in Leptos? There are basically two ways to pass components to
other components:

1. **render props**: properties that are functions that return a view
2. the **`children`** prop: a special component property that includes anything
   you pass as a child to the component.

In fact, you’ve already seen these both in action in the [`<Show/>`](/view/06_control_flow.html#show) component:

```rust
view! {
  <Show
    // `when` is a normal prop
    when=move || value.get() > 5
    // `fallback` is a "render prop": a function that returns a view
    fallback=|| view! { <Small/> }
  >
    // `<Big/>` (and anything else here)
    // will be given to the `children` prop
    <Big/>
  </Show>
}
```

Let’s define a component that takes some children and a render prop.

```rust
/// Displays a `render_prop` and some children within markup.
#[component]
pub fn TakesChildren<F, IV>(
    /// Takes a function (type F) that returns anything that can be
    /// converted into a View (type IV)
    render_prop: F,
    /// `children` can take one of several different types, each of which
    /// is a function that returns some view type
    children: Children,
) -> impl IntoView
where
    F: Fn() -> IV,
    IV: IntoView,
{
    view! {
        <h1><code>"<TakesChildren/>"</code></h1>
        <h2>"Render Prop"</h2>
        {render_prop()}
        <hr/>
        <h2>"Children"</h2>
        {children()}
    }
}
```

`render_prop` and `children` are both functions, so we can call them to generate
the appropriate views. `children`, in particular, is an alias for
`Box<dyn FnOnce() -> AnyView>`. (Aren't you glad we named it `Children` instead?)
The `AnyView` returned here is an opaque, type-erased view: you can’t do anything to
inspect it. There are a variety of other child types: for example, `ChildrenFragment`
will return a `Fragment`, which is a collection whose children can be iterated over.

> If you need a `Fn` or `FnMut` here because you need to call `children` more than once,
> we also provide `ChildrenFn` and `ChildrenMut` aliases.

We can use the component like this:

```rust
view! {
    <TakesChildren render_prop=|| view! { <p>"Hi, there!"</p> }>
        // these get passed to `children`
        "Some text"
        <span>"A span"</span>
    </TakesChildren>
}
```

## Manipulating Children

The [`Fragment`](https://docs.rs/leptos/latest/leptos/tachys/view/fragment/struct.Fragment.html) type is
basically a way of wrapping a `Vec<AnyView>`. You can insert it anywhere into your view.

But you can also access those inner views directly to manipulate them. For example, here’s
a component that takes its children and turns them into an unordered list.

```rust
/// Wraps each child in an `<li>` and embeds them in a `<ul>`.
#[component]
pub fn WrapsChildren(children: ChildrenFragment) -> impl IntoView {
    // children() returns a `Fragment`, which has a
    // `nodes` field that contains a Vec<View>
    // this means we can iterate over the children
    // to create something new!
    let children = children()
        .nodes
        .into_iter()
        .map(|child| view! { <li>{child}</li> })
        .collect::<Vec<_>>();

    view! {
        <h1><code>"<WrapsChildren/>"</code></h1>
        // wrap our wrapped children in a UL
        <ul>{children}</ul>
    }
}
```

Calling it like this will create a list:

```rust
view! {
    <WrapsChildren>
        "A"
        "B"
        "C"
    </WrapsChildren>
}
```

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/9-component-children-0-7-736s9r?file=%2Fsrc%2Fmain.rs%3A1%2C1-90%2C2&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/9-component-children-0-7-736s9r?file=%2Fsrc%2Fmain.rs%3A1%2C1-90%2C2&workspaceId=478437f3-1f86-4b1e-b665-5c27a31451fb" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;

// Often, you want to pass some kind of child view to another
// component. There are two basic patterns for doing this:
// - "render props": creating a component prop that takes a function
//   that creates a view
// - the `children` prop: a special property that contains content
//   passed as the children of a component in your view, not as a
//   property

#[component]
pub fn App() -> impl IntoView {
    let (items, set_items) = signal(vec![0, 1, 2]);
    let render_prop = move || {
        let len = move || items.read().len();
        view! {
            <p>"Length: " {len}</p>
        }
    };

    view! {
        // This component just displays the two kinds of children,
        // embedding them in some other markup
        <TakesChildren
            // for component props, you can shorthand
            // `render_prop=render_prop` => `render_prop`
            // (this doesn't work for HTML element attributes)
            render_prop
        >
            // these look just like the children of an HTML element
            <p>"Here's a child."</p>
            <p>"Here's another child."</p>
        </TakesChildren>
        <hr/>
        // This component actually iterates over and wraps the children
        <WrapsChildren>
            <p>"Here's a child."</p>
            <p>"Here's another child."</p>
        </WrapsChildren>
    }
}

/// Displays a `render_prop` and some children within markup.
#[component]
pub fn TakesChildren<F, IV>(
    /// Takes a function (type F) that returns anything that can be
    /// converted into a View (type IV)
    render_prop: F,
    /// `children` takes the `Children` type
    /// this is an alias for `Box<dyn FnOnce() -> Fragment>`
    /// ... aren't you glad we named it `Children` instead?
    children: Children,
) -> impl IntoView
where
    F: Fn() -> IV,
    IV: IntoView,
{
    view! {
        <h1><code>"<TakesChildren/>"</code></h1>
        <h2>"Render Prop"</h2>
        {render_prop()}
        <hr/>
        <h2>"Children"</h2>
        {children()}
    }
}

/// Wraps each child in an `<li>` and embeds them in a `<ul>`.
#[component]
pub fn WrapsChildren(children: ChildrenFragment) -> impl IntoView {
    // children() returns a `Fragment`, which has a
    // `nodes` field that contains a Vec<View>
    // this means we can iterate over the children
    // to create something new!
    let children = children()
        .nodes
        .into_iter()
        .map(|child| view! { <li>{child}</li> })
        .collect::<Vec<_>>();

    view! {
        <h1><code>"<WrapsChildren/>"</code></h1>
        // wrap our wrapped children in a UL
        <ul>{children}</ul>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/view/09_component_children.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/getting_started/leptos_dx.md
# Leptos Developer Experience Improvements

There are a couple of things you can do to improve your experience of developing websites and apps with Leptos. You may want to take a few minutes and set up your environment to optimize your development experience, especially if you want to code along with the examples in this book.

## 1) Set up `console_error_panic_hook`

By default, panics that happen while running your WASM code in the browser just throw an error in the browser with an unhelpful message like `Unreachable executed` and a stack trace that points into your WASM binary.

With `console_error_panic_hook`, you get an actual Rust stack trace that includes a line in your Rust source code.

It's very easy to set up:

1. Run `cargo add console_error_panic_hook` in your project
2. In your main function, add `console_error_panic_hook::set_once();`

> If this is unclear, [click here for an example](https://github.com/leptos-rs/leptos/blob/main/examples/counter/src/main.rs#L6).

Now you should have much better panic messages in the browser console!

## 2) Editor Autocompletion inside `#[component]` and `#[server]`

Because of the nature of macros (they can expand from anything to anything, but only if the input is exactly correct at that instant) it can be hard for rust-analyzer to do proper autocompletion and other support.

If you run into issues using these macros in your editor, you can explicitly tell rust-analyzer to ignore certain proc macros. For the `#[server]` macro especially, which annotates function bodies but doesn't actually transform anything inside the body of your function, this can be really helpful.

```admonish note 
 Starting in Leptos version 0.5.3, rust-analyzer support was added for the `#[component]` macro, but if you run into issues, you may want to add `#[component]` to the macro ignore list as well (see below).
Note that this means that rust-analyzer doesn't know about your component props, which may generate its own set of errors or warnings in the IDE.
```

VSCode `settings.json`:

```json
"rust-analyzer.procMacro.ignored": {
	"leptos_macro": [
        // optional:
		// "component",
		"server"
	],
}
```

VSCode with cargo-leptos `settings.json`:
```json
"rust-analyzer.procMacro.ignored": {
	"leptos_macro": [
        // optional:
		// "component",
		"server"
	],
},
// if code that is cfg-gated for the `ssr` feature is shown as inactive,
// you may want to tell rust-analyzer to enable the `ssr` feature by default
//
// you can also use `rust-analyzer.cargo.allFeatures` to enable all features
"rust-analyzer.cargo.features": ["ssr"]
```

neovim with lspconfig:

```lua
require('lspconfig').rust_analyzer.setup {
  -- Other Configs ...
  settings = {
    ["rust-analyzer"] = {
      -- Other Settings ...
      procMacro = {
        ignored = {
            leptos_macro = {
                -- optional: --
                -- "component",
                "server",
            },
        },
      },
    },
  }
}
```

Helix, in `.helix/languages.toml`:

```toml
[[language]]
name = "rust"

[language-server.rust-analyzer]
config = { procMacro = { ignored = { leptos_macro = [
	# Optional:
	# "component",
	"server"
] } } }
```

Zed, in `settings.json`:

```json
{
  -- Other Settings ...
  "lsp": {
    "rust-analyzer": {
      "procMacro": {
        "ignored": [
          // optional:
          // "component",
          "server"
        ]
      }
    }
  }
}
```

SublimeText 3, under `LSP-rust-analyzer.sublime-settings` in `Goto Anything...` menu:

```json
// Settings in here override those in "LSP-rust-analyzer/LSP-rust-analyzer.sublime-settings"
{
  "rust-analyzer.procMacro.ignored": {
    "leptos_macro": [
      // optional:
      // "component",
      "server"
    ],
  },
}
```

## 3) Set up `leptosfmt` With Rust Analyzer (optional)

`leptosfmt` is a formatter for the Leptos `view!` macro (inside of which you'll typically write your UI code). Because the `view!` macro enables an 'RSX' (like JSX) style of writing your UI's, cargo-fmt has a harder time auto-formatting your code that's inside the `view!` macro. `leptosfmt` is a crate that solves your formatting issues and keeps your RSX-style UI code looking nice and tidy!

`leptosfmt` can be installed and used via the command line or from within your code editor:

First, install the tool with `cargo install leptosfmt`.

If you just want to use the default options from the command line, just run `leptosfmt ./**/*.rs` from the root of your project to format all the rust files using `leptosfmt`.

If you wish to set up your editor to work with `leptosfmt`, or if you wish to customize your `leptosfmt` experience, please see the instructions available on the [`leptosfmt` github repo's README.md page](https://github.com/bram209/leptosfmt).

Just note that it's recommended to set up your editor with `leptosfmt` on a per-workspace basis for best results.

## 4) Use `--cfg=erase_components` during development

Leptos 0.7 made a number of changes to the renderer that relied more heavily on the type system. For larger projects, this can lead to slower compile times. Most of the slowdown in compile times can be alleviated by using the custom configuration flag `--cfg=erase_components` during development. (This erases some of that type information to reduce the amount of work done and debug info emitted by the compiler, at the expense of additional binary size and runtime cost, so it’s best not to use it in release mode.) You can set this easily in the command line (`RUSTFLAGS="--cfg erase_components" trunk serve` or `RUSTFLAGS="--cfg erase_components" cargo leptos watch`), or in your `.cargo/config.toml`:
```toml
# use your own native target
[target.aarch64-apple-darwin]
rustflags = [
  "--cfg",
  "erase_components",
]

[target.wasm32-unknown-unknown]
rustflags = [
   "--cfg",
   "erase_components",
]
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/getting_started/leptos_dx.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/getting_started/README.md
# Getting Started

There are two basic paths to getting started with Leptos:

1. **Client-side rendering (CSR) with [Trunk](https://trunkrs.dev/)** - a great option if you just want to make a snappy website with Leptos, or work with a pre-existing server or API.
   In CSR mode, Trunk compiles your Leptos app to WebAssembly (WASM) and runs it in the browser like a typical Javascript single-page app (SPA). The advantages of Leptos CSR include faster build times and a quicker iterative development cycle, as well as a simpler mental model and more options for deploying your app. CSR apps do come with some disadvantages: initial load times for your end users are slower compared to a server-side rendering approach, and the usual SEO challenges that come along with using a JS single-page app model apply to Leptos CSR apps as well. Also note that, under the hood, an auto-generated snippet of JS is used to load the Leptos WASM bundle, so JS _must_ be enabled on the client device for your CSR app to display properly. As with all software engineering, there are trade-offs here you'll need to consider.

2. **Full-stack, server-side rendering (SSR) with [`cargo-leptos`](https://github.com/leptos-rs/cargo-leptos)** - SSR is a great option for building CRUD-style websites and custom web apps if you want Rust powering both your frontend and backend.
   With the Leptos SSR option, your app is rendered to HTML on the server and sent down to the browser; then, WebAssembly is used to instrument the HTML so your app becomes interactive - this process is called 'hydration'. On the server side, Leptos SSR apps integrate closely with your choice of either [Actix-web](https://docs.rs/leptos_actix/latest/leptos_actix/) or [Axum](https://docs.rs/leptos_axum/latest/leptos_axum/) server libraries, so you can leverage those communities' crates to help build out your Leptos server.
   The advantages of taking the SSR route with Leptos include helping you get the best initial load times and optimal SEO scores for your web app. SSR apps can also dramatically simplify working across the server/client boundary via a Leptos feature called "server functions", which lets you transparently call functions on the server from your client code (more on this feature later). Full-stack SSR isn't all rainbows and butterflies, though - disadvantages include a slower developer iteration loop (because you need to recompile both the server and client when making Rust code changes), as well as some added complexity that comes along with hydration.

By the end of the book, you should have a good idea of which trade-offs to make and which route to take - CSR or SSR - depending on your project's requirements.

In Part 1 of this book, we'll start with client-side rendering Leptos sites and building reactive UIs using `Trunk` to serve our JS and WASM bundle to the browser.

We’ll introduce `cargo-leptos` in Part 2 of this book, which is all about working with the full power of Leptos in its full-stack, SSR mode.

```admonish note
If you're coming from the Javascript world and terms like client-side rendering (CSR) and server-side rendering (SSR) are unfamiliar to you, the easiest way to understand the difference is by analogy:

Leptos' CSR mode is similar to working with React (or a 'signals'-based framework like SolidJS), and focuses on producing a client-side UI which you can use with any tech stack on the server.

Using Leptos' SSR mode is similar to working with a full-stack framework like Next.js in the React world (or Solid's "SolidStart" framework) - SSR helps you build sites and apps that are rendered on the server then sent down to the client. SSR can help to improve your site's loading performance and accessibility as well as make it easier for one person to work on *both* client- and server-side without needing to context-switch between different languages for frontend and backend.

The Leptos framework can be used either in CSR mode to just make a UI (like React), or you can use Leptos in full-stack SSR mode (like Next.js) so that you can build both your UI and your server with one language: Rust.

```

## Hello World! Getting Set up for Leptos CSR Development

First up, make sure Rust is installed and up-to-date ([see here if you need instructions](https://www.rust-lang.org/tools/install)).

If you don’t have it installed already, you can install the "Trunk" tool for running Leptos CSR sites by running the following on the command-line:

```bash
cargo install trunk
```

And then create a basic Rust project

```bash
cargo init leptos-tutorial
```

`cd` into your new `leptos-tutorial` project and add `leptos` as a dependency

```bash
cargo add leptos --features=csr
```

Make sure you've added the `wasm32-unknown-unknown` target so that Rust can compile your code to WebAssembly to run in the browser.

```bash
rustup target add wasm32-unknown-unknown
```

Create a simple `index.html` in the root of the `leptos-tutorial` directory

```html
<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
</html>
```

And add a simple “Hello, world!” to your `main.rs`

```rust
use leptos::prelude::*;

fn main() {
    leptos::mount::mount_to_body(|| view! { <p>"Hello, world!"</p> })
}
```

Your directory structure should now look something like this

```
leptos_tutorial
├── src
│   └── main.rs
├── Cargo.toml
├── index.html
```

Now run `trunk serve --open` from the root of the `leptos-tutorial` directory.
Trunk should automatically compile your app and open it in your default browser.
If you make edits to `main.rs`, Trunk will recompile your source code and
live-reload the page.

Welcome to the world of UI development with Rust and WebAssembly (WASM), powered by Leptos and Trunk!

```admonish note
If you are using Windows, note that `trunk serve --open` may not work. If you have issues with `--open`,
simply use `trunk serve` and open a browser tab manually.
```

---

Now before we get started building your first real applications with Leptos, there are a couple of things you might want to know to help make your experience with Leptos just a little bit easier.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/getting_started/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/getting_started/community_crates.md
# The Leptos Community and `leptos-*` Crates

## The Community

One final note before we get to building with Leptos: if you haven't already, feel free to join the growing community on the Leptos [Discord](https://discord.gg/YdRAhS7eQB) and on [Github](https://github.com/leptos-rs/leptos). Our Discord channel in particular is very active and friendly - we'd love to have you there!

```admonish note
If you find a chapter or an explanation that isn't clear while you're working your way through the Leptos book, just mention it in the "docs-and-education" channel or ask a question in "help" so we can clear things up and update the book for others.
```

As you get further along in your Leptos journey and find that you have questions about "how to do 'x' with Leptos", then search the Discord "help" channel to see if a similar question has been asked before, or feel free to post your own question - the community is quite helpful and very responsive.

The "[Discussions](https://github.com/leptos-rs/leptos/discussions)" on Github are also a great place for asking questions and keeping up with Leptos announcements.

And of course, if you run into any bugs while developing with Leptos or would like to make a feature request (or contribute a bug fix / new feature), open up an issue on the [Github issue tracker](https://github.com/leptos-rs/leptos/issues).


## Leptos-* Crates

The community has built a growing number of Leptos-related crates that will help you get productive with Leptos projects more quickly - check out the list of crates built on top of Leptos and contributed by the community on the [Awesome Leptos](https://github.com/leptos-rs/awesome-leptos) repo on Github.

If you want to find the newest, up-and-coming Leptos-related crates, check out the "Tools and Libraries" section of the Leptos Discord. In that section, there are channels for the Leptos `view!` macro formatter (in the "leptosfmt" channel); there's a channel for the utility library "leptos-use"; another channel for the UI component library "thaw-ui";  and a "libraries" channel where new `leptos-*` crates are discussed before making their way into the growing list of crates and resources available on [Awesome Leptos](https://github.com/leptos-rs/awesome-leptos).


-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/getting_started/community_crates.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/18_params_and_queries.md
# Params and Queries

Static paths are useful for distinguishing between different pages, but almost every application wants to pass data through the URL at some point.

There are two ways you can do this:

1. named route **params** like `id` in `/users/:id`
2. named route **queries** like `q` in `/search?q=Foo`

Because of the way URLs are built, you can access the query from _any_ `<Route/>` view. You can access route params from the `<Route/>` that defines them or any of its nested children.

Accessing params and queries is pretty simple with a couple of hooks:

- [`use_query`](https://docs.rs/leptos_router/latest/leptos_router/hooks/fn.use_query.html) or [`use_query_map`](https://docs.rs/leptos_router/latest/leptos_router/hooks/fn.use_query_map.html)
- [`use_params`](https://docs.rs/leptos_router/latest/leptos_router/hooks/fn.use_params.html) or [`use_params_map`](https://docs.rs/leptos_router/latest/leptos_router/hooks/fn.use_params_map.html)

Each of these comes with a typed option (`use_query` and `use_params`) and an untyped option (`use_query_map` and `use_params_map`).

The untyped versions hold a simple key-value map. To use the typed versions, derive the [`Params`](https://docs.rs/leptos_router/latest/leptos_router/params/trait.Params.html) trait on a struct.

> `Params` is a very lightweight trait to convert a flat key-value map of strings into a struct by applying `FromStr` to each field. Because of the flat structure of route params and URL queries, it’s significantly less flexible than something like `serde`; it also adds much less weight to your binary.

```rust
use leptos::Params;
use leptos_router::params::Params;

#[derive(Params, PartialEq)]
struct ContactParams {
    id: Option<usize>,
}

#[derive(Params, PartialEq)]
struct ContactSearch {
    q: Option<String>,
}
```

> Note: The `Params` derive macro is located at `leptos_router::params::Params`.
>
> Using stable, you can only use `Option<T>` in params. If you are using the `nightly` feature,
> you can use either `T` or `Option<T>`.

Now we can use them in a component. Imagine a URL that has both params and a query, like `/contacts/:id?q=Search`.

The typed versions return `Memo<Result<T, _>>`. It’s a Memo so it reacts to changes in the URL. It’s a `Result` because the params or query need to be parsed from the URL, and may or may not be valid.

```rust
use leptos_router::hooks::{use_params, use_query};

let params = use_params::<ContactParams>();
let query = use_query::<ContactSearch>();

// id: || -> usize
let id = move || {
    params
        .read()
        .as_ref()
        .ok()
        .and_then(|params| params.id)
        .unwrap_or_default()
};
```

The untyped versions return `Memo<ParamsMap>`. Again, it’s memo to react to changes in the URL. [`ParamsMap`](https://docs.rs/leptos_router/latest/leptos_router/params/struct.ParamsMap.html) behaves a lot like any other map type, with a `.get()` method that returns `Option<String>`.

```rust
use leptos_router::hooks::{use_params_map, use_query_map};

let params = use_params_map();
let query = use_query_map();

// id: || -> Option<String>
let id = move || params.read().get("id");
```

This can get a little messy: deriving a signal that wraps an `Option<_>` or `Result<_>` can involve a couple steps. But it’s worth doing this for two reasons:

1. It’s correct, i.e., it forces you to consider the cases, “What if the user doesn’t pass a value for this query field? What if they pass an invalid value?”
2. It’s performant. Specifically, when you navigate between different paths that match the same `<Route/>` with only params or the query changing, you can get fine-grained updates to different parts of your app without rerendering. For example, navigating between different contacts in our contact-list example does a targeted update to the name field (and eventually contact info) without needing to replace or rerender the wrapping `<Contact/>`. This is what fine-grained reactivity is for.

> This is the same example from the previous section. The router is such an integrated system that it makes sense to provide a single example highlighting multiple features, even if we haven’t explained them all yet.

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/16-router-0-7-csm8t5?file=%2Fsrc%2Fmain.rs)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/16-router-0-7-csm8t5?file=%2Fsrc%2Fmain.rs" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;
use leptos_router::components::{Outlet, ParentRoute, Route, Router, Routes, A};
use leptos_router::hooks::use_params_map;
use leptos_router::path;

#[component]
pub fn App() -> impl IntoView {
    view! {
        <Router>
            <h1>"Contact App"</h1>
            // this <nav> will show on every routes,
            // because it's outside the <Routes/>
            // note: we can just use normal <a> tags
            // and the router will use client-side navigation
            <nav>
                <a href="/">"Home"</a>
                <a href="/contacts">"Contacts"</a>
            </nav>
            <main>
                <Routes fallback=|| "Not found.">
                    // / just has an un-nested "Home"
                    <Route path=path!("/") view=|| view! {
                        <h3>"Home"</h3>
                    }/>
                    // /contacts has nested routes
                    <ParentRoute
                        path=path!("/contacts")
                        view=ContactList
                      >
                        // if no id specified, fall back
                        <ParentRoute path=path!(":id") view=ContactInfo>
                            <Route path=path!("") view=|| view! {
                                <div class="tab">
                                    "(Contact Info)"
                                </div>
                            }/>
                            <Route path=path!("conversations") view=|| view! {
                                <div class="tab">
                                    "(Conversations)"
                                </div>
                            }/>
                        </ParentRoute>
                        // if no id specified, fall back
                        <Route path=path!("") view=|| view! {
                            <div class="select-user">
                                "Select a user to view contact info."
                            </div>
                        }/>
                    </ParentRoute>
                </Routes>
            </main>
        </Router>
    }
}

#[component]
fn ContactList() -> impl IntoView {
    view! {
        <div class="contact-list">
            // here's our contact list component itself
            <h3>"Contacts"</h3>
            <div class="contact-list-contacts">
                <A href="alice">"Alice"</A>
                <A href="bob">"Bob"</A>
                <A href="steve">"Steve"</A>
            </div>

            // <Outlet/> will show the nested child route
            // we can position this outlet wherever we want
            // within the layout
            <Outlet/>
        </div>
    }
}

#[component]
fn ContactInfo() -> impl IntoView {
    // we can access the :id param reactively with `use_params_map`
    let params = use_params_map();
    let id = move || params.read().get("id").unwrap_or_default();

    // imagine we're loading data from an API here
    let name = move || match id().as_str() {
        "alice" => "Alice",
        "bob" => "Bob",
        "steve" => "Steve",
        _ => "User not found.",
    };

    view! {
        <h4>{name}</h4>
        <div class="contact-info">
            <div class="tabs">
                <A href="" exact=true>"Contact Info"</A>
                <A href="conversations">"Conversations"</A>
            </div>

            // <Outlet/> here is the tabs that are nested
            // underneath the /contacts/:id route
            <Outlet/>
        </div>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/18_params_and_queries.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/README.md
# Routing

## The Basics

Routing drives most websites. A router is the answer to the question, “Given this URL, what should appear on the page?”

A URL consists of many parts. For example, the URL `https://my-cool-blog.com/blog/search?q=Search#results` consists of

- a _scheme_: `https`
- a _domain_: `my-cool-blog.com`
- a **path**: `/blog/search`
- a **query** (or **search**): `?q=Search`
- a _hash_: `#results`

The Leptos Router works with the path and query (`/blog/search?q=Search`). Given this piece of the URL, what should the app render on the page?

## The Philosophy

In most cases, the path should drive what is displayed on the page. From the user’s perspective, for most applications, most major changes in the state of the app should be reflected in the URL. If you copy and paste the URL and open it in another tab, you should find yourself more or less in the same place.

In this sense, the router is really at the heart of the global state management for your application. More than anything else, it drives what is displayed on the page.

The router handles most of this work for you by mapping the current location to particular components.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/20_form.md
# The `<Form/>` Component

Links and forms sometimes seem completely unrelated. But, in fact, they work in very similar ways.

In plain HTML, there are three ways to navigate to another page:

1. An `<a>` element that links to another page: Navigates to the URL in its `href` attribute with the `GET` HTTP method.
2. A `<form method="GET">`: Navigates to the URL in its `action` attribute with the `GET` HTTP method and the form data from its inputs encoded in the URL query string.
3. A `<form method="POST">`: Navigates to the URL in its `action` attribute with the `POST` HTTP method and the form data from its inputs encoded in the body of the request.

Since we have a client-side router, we can do client-side link navigations without reloading the page, i.e., without a full round-trip to the server and back. It makes sense that we can do client-side form navigations in the same way.

The router provides a [`<Form>`](https://docs.rs/leptos_router/latest/leptos_router/components/fn.Form.html) component, which works like the HTML `<form>` element, but uses client-side navigations instead of full page reloads. `<Form/>` works with both `GET` and `POST` requests. With `method="GET"`, it will navigate to the URL encoded in the form data. With `method="POST"` it will make a `POST` request and handle the server’s response.

`<Form/>` provides the basis for some components like `<ActionForm/>` and `<MultiActionForm/>` that we’ll see in later chapters. But it also enables some powerful patterns of its own.

For example, imagine that you want to create a search field that updates search results in real time as the user searches, without a page reload, but that also stores the search in the URL so a user can copy and paste it to share results with someone else.

It turns out that the patterns we’ve learned so far make this easy to implement.

```rust
async fn fetch_results() {
    // some async function to fetch our search results
}

#[component]
pub fn FormExample() -> impl IntoView {
    // reactive access to URL query strings
    let query = use_query_map();
    // search stored as ?q=
    let search = move || query.read().get("q").unwrap_or_default();
    // a resource driven by the search string
    let search_results = Resource::new(search, |_| fetch_results());

    view! {
        <Form method="GET" action="">
            <input type="search" name="q" value=search/>
            <input type="submit"/>
        </Form>
        <Transition fallback=move || ()>
            /* render search results */
            {todo!()}
        </Transition>
    }
}
```

Whenever you click `Submit`, the `<Form/>` will “navigate” to `?q={search}`. But because this navigation is done on the client side, there’s no page flicker or reload. The URL query string changes, which triggers `search` to update. Because `search` is the source signal for the `search_results` resource, this triggers `search_results` to reload its resource. The `<Transition/>` continues displaying the current search results until the new ones have loaded. When they are complete, it switches to displaying the new result.

This is a great pattern. The data flow is extremely clear: all data flows from the URL to the resource into the UI. The current state of the application is stored in the URL, which means you can refresh the page or text the link to a friend and it will show exactly what you’re expecting. And once we introduce server rendering, this pattern will prove to be really fault-tolerant, too: because it uses a `<form>` element and URLs under the hood, it actually works really well without even loading your WASM on the client.

We can actually take it a step further and do something kind of clever:

```rust
view! {
	<Form method="GET" action="">
		<input type="search" name="q" value=search
			oninput="this.form.requestSubmit()"
		/>
	</Form>
}
```

You’ll notice that this version drops the `Submit` button. Instead, we add an `oninput` attribute to the input. Note that this is _not_ `on:input`, which would listen for the `input` event and run some Rust code. Without the colon, `oninput` is the plain HTML attribute. So the string is actually a JavaScript string. `this.form` gives us the form the input is attached to. `requestSubmit()` fires the `submit` event on the `<form>`, which is caught by `<Form/>` just as if we had clicked a `Submit` button. Now the form will “navigate” on every keystroke or input to keep the URL (and therefore the search) perfectly in sync with the user’s input as they type.

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/20-form-0-7-m73jsz)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/20-form-0-7-m73jsz" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;
use leptos_router::components::{Form, Route, Router, Routes};
use leptos_router::hooks::use_query_map;
use leptos_router::path;

#[component]
pub fn App() -> impl IntoView {
    view! {
        <Router>
            <h1><code>"<Form/>"</code></h1>
            <main>
                <Routes fallback=|| "Not found.">
                    <Route path=path!("") view=FormExample/>
                </Routes>
            </main>
        </Router>
    }
}

#[component]
pub fn FormExample() -> impl IntoView {
    // reactive access to URL query
    let query = use_query_map();
    let name = move || query.read().get("name").unwrap_or_default();
    let number = move || query.read().get("number").unwrap_or_default();
    let select = move || query.read().get("select").unwrap_or_default();

    view! {
        // read out the URL query strings
        <table>
            <tr>
                <td><code>"name"</code></td>
                <td>{name}</td>
            </tr>
            <tr>
                <td><code>"number"</code></td>
                <td>{number}</td>
            </tr>
            <tr>
                <td><code>"select"</code></td>
                <td>{select}</td>
            </tr>
        </table>
        // <Form/> will navigate whenever submitted
        <h2>"Manual Submission"</h2>
        <Form method="GET" action="">
            // input names determine query string key
            <input type="text" name="name" value=name/>
            <input type="number" name="number" value=number/>
            <select name="select">
                // `selected` will set which starts as selected
                <option selected=move || select() == "A">
                    "A"
                </option>
                <option selected=move || select() == "B">
                    "B"
                </option>
                <option selected=move || select() == "C">
                    "C"
                </option>
            </select>
            // submitting should cause a client-side
            // navigation, not a full reload
            <input type="submit"/>
        </Form>
        // This <Form/> uses some JavaScript to submit
        // on every input
        <h2>"Automatic Submission"</h2>
        <Form method="GET" action="">
            <input
                type="text"
                name="name"
                value=name
                // this oninput attribute will cause the
                // form to submit on every input to the field
                oninput="this.form.requestSubmit()"
            />
            <input
                type="number"
                name="number"
                value=number
                oninput="this.form.requestSubmit()"
            />
            <select name="select"
                onchange="this.form.requestSubmit()"
            >
                <option selected=move || select() == "A">
                    "A"
                </option>
                <option selected=move || select() == "B">
                    "B"
                </option>
                <option selected=move || select() == "C">
                    "C"
                </option>
            </select>
            // submitting should cause a client-side
            // navigation, not a full reload
            <input type="submit"/>
        </Form>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/20_form.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/19_a.md
# The `<A/>` Component

Client-side navigation works perfectly fine with ordinary HTML `<a>` elements. The router adds a listener that handles every click on a `<a>` element and tries to handle it on the client side, i.e., without doing another round trip to the server to request HTML. This is what enables the snappy “single-page app” navigations you’re probably familiar with from most modern web apps.

The router will bail out of handling an `<a>` click under a number of situations

- the click event has had `prevent_default()` called on it
- the <kbd>Meta</kbd>, <kbd>Alt</kbd>, <kbd>Ctrl</kbd>, or <kbd>Shift</kbd> keys were held during click
- the `<a>` has a `target` or `download` attribute, or `rel="external"`
- the link has a different origin from the current location

In other words, the router will only try to do a client-side navigation when it’s pretty sure it can handle it, and it will upgrade every `<a>` element to get this special behavior.

> This also means that if you need to opt out of client-side routing, you can do so easily. For example, if you have a link to another page on the same domain, but which isn’t part of your Leptos app, you can just use `<a rel="external">` to tell the router it isn’t something it can handle.

The router also provides an [`<A>`](https://docs.rs/leptos_router/latest/leptos_router/components/fn.A.html) component, which does two additional things:

1. Correctly resolves relative nested routes. Relative routing with ordinary `<a>` tags can be tricky. For example, if you have a route like `/post/:id`, `<A href="1">` will generate the correct relative route, but `<a href="1">` likely will not (depending on where it appears in your view.) `<A/>` resolves routes relative to the path of the nested route within which it appears.
2. Sets the `aria-current` attribute to `page` if this link is the active link (i.e., it’s a link to the page you’re on). This is helpful for accessibility and for styling. For example, if you want to set the link a different color if it’s a link to the page you’re currently on, you can match this attribute with a CSS selector.

## Navigating Programmatically

Your most-used methods of navigating between pages should be with `<a>` and `<form>` elements or with the enhanced `<A/>` and `<Form/>` components. Using links and forms to navigate is the best solution for accessibility and graceful degradation.

On occasion, though, you’ll want to navigate programmatically, i.e., call a function that can navigate to a new page. In that case, you should use the [`use_navigate`](https://docs.rs/leptos_router/latest/leptos_router/hooks/fn.use_navigate.html) function.

```rust
let navigate = leptos_router::hooks::use_navigate();
navigate("/somewhere", Default::default());
```

> You should almost never do something like `<button on:click=move |_| navigate(/* ... */)>`. Any `on:click` that navigates should be an `<a>`, for reasons of accessibility.

The second argument here is a set of [`NavigateOptions`](https://docs.rs/leptos_router/latest/leptos_router/struct.NavigateOptions.html), which includes options to resolve the navigation relative to the current route as the `<A/>` component does, replace it in the navigation stack, include some navigation state, and maintain the current scroll state on navigation.

> Once again, this is the same example. Check out the relative `<A/>` components, and take a look at the CSS in `index.html` to see the ARIA-based styling.

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/16-router-0-7-csm8t5?file=%2Fsrc%2Fmain.rs)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/16-router-0-7-csm8t5?file=%2Fsrc%2Fmain.rs" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>
```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;
use leptos_router::components::{Outlet, ParentRoute, Route, Router, Routes, A};
use leptos_router::hooks::use_params_map;
use leptos_router::path;

#[component]
pub fn App() -> impl IntoView {
    view! {
        <Router>
            <h1>"Contact App"</h1>
            // this <nav> will show on every route,
            // because it's outside the <Routes/>
            // note: we can just use normal <a> tags
            // and the router will use client-side navigation
            <nav>
                <a href="/">"Home"</a>
                <a href="/contacts">"Contacts"</a>
            </nav>
            <main>
                <Routes fallback=|| "Not found.">
                    // / just has an un-nested "Home"
                    <Route path=path!("/") view=|| view! {
                        <h3>"Home"</h3>
                    }/>
                    // /contacts has nested routes
                    <ParentRoute
                        path=path!("/contacts")
                        view=ContactList
                      >
                        // if no id specified, fall back
                        <ParentRoute path=path!(":id") view=ContactInfo>
                            <Route path=path!("") view=|| view! {
                                <div class="tab">
                                    "(Contact Info)"
                                </div>
                            }/>
                            <Route path=path!("conversations") view=|| view! {
                                <div class="tab">
                                    "(Conversations)"
                                </div>
                            }/>
                        </ParentRoute>
                        // if no id specified, fall back
                        <Route path=path!("") view=|| view! {
                            <div class="select-user">
                                "Select a user to view contact info."
                            </div>
                        }/>
                    </ParentRoute>
                </Routes>
            </main>
        </Router>
    }
}

#[component]
fn ContactList() -> impl IntoView {
    view! {
        <div class="contact-list">
            // here's our contact list component itself
            <h3>"Contacts"</h3>
            <div class="contact-list-contacts">
                <A href="alice">"Alice"</A>
                <A href="bob">"Bob"</A>
                <A href="steve">"Steve"</A>
            </div>

            // <Outlet/> will show the nested child route
            // we can position this outlet wherever we want
            // within the layout
            <Outlet/>
        </div>
    }
}

#[component]
fn ContactInfo() -> impl IntoView {
    // we can access the :id param reactively with `use_params_map`
    let params = use_params_map();
    let id = move || params.read().get("id").unwrap_or_default();

    // imagine we're loading data from an API here
    let name = move || match id().as_str() {
        "alice" => "Alice",
        "bob" => "Bob",
        "steve" => "Steve",
        _ => "User not found.",
    };

    view! {
        <h4>{name}</h4>
        <div class="contact-info">
            <div class="tabs">
                <A href="" exact=true>"Contact Info"</A>
                <A href="conversations">"Conversations"</A>
            </div>

            // <Outlet/> here is the tabs that are nested
            // underneath the /contacts/:id route
            <Outlet/>
        </div>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/19_a.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/16_routes.md
# Defining Routes

## Getting Started

It’s easy to get started with the router.

First things first, make sure you’ve added the `leptos_router` package to your dependencies. Unlike `leptos`, this does not have separate `csr` and `hydrate` features; it does have an `ssr` feature, intended for use only on the server side, so activate that for your server-side build.

> It’s important that the router is a separate package from `leptos` itself. This means that everything in the router can be defined in user-land code. If you want to create your own router, or use no router, you’re completely free to do that!

And import the relevant types from the router, either with something like

```rust
use leptos_router::components::{Router, Route, Routes};
```

## Providing the `<Router/>`

Routing behavior is provided by the [`<Router/>`](https://docs.rs/leptos_router/latest/leptos_router/components/fn.Router.html) component. This should usually be somewhere near the root of your application, wrapping the rest of the app.

> You shouldn’t try to use multiple `<Router/>`s in your app. Remember that the router drives global state: if you have multiple routers, which one decides what to do when the URL changes?

Let’s start with a simple `<App/>` component using the router:

```rust
use leptos::prelude::*;
use leptos_router::components::Router;

#[component]
pub fn App() -> impl IntoView {
    view! {
      <Router>
        <nav>
          /* ... */
        </nav>
        <main>
          /* ... */
        </main>
      </Router>
    }
}

```

## Defining `<Routes/>`

The [`<Routes/>`](https://docs.rs/leptos_router/latest/leptos_router/components/fn.Routes.html) component is where you define all the routes to which a user can navigate in your application. Each possible route is defined by a [`<Route/>`](https://docs.rs/leptos_router/latest/leptos_router/components/fn.Route.html) component.

You should place the `<Routes/>` component at the location within your app where you want routes to be rendered. Everything outside `<Routes/>` will be present on every page, so you can leave things like a navigation bar or menu outside the `<Routes/>`.

```rust
use leptos::prelude::*;
use leptos_router::components::*;

#[component]
pub fn App() -> impl IntoView {
    view! {
      <Router>
        <nav>
          /* ... */
        </nav>
        <main>
          // all our routes will appear inside <main>
          <Routes fallback=|| "Not found.">
            /* ... */
          </Routes>
        </main>
      </Router>
    }
}
```

`<Routes/>` should also have a `fallback`, a function that defines what should be shown if no route is matched.

Individual routes are defined by providing children to `<Routes/>` with the `<Route/>` component. `<Route/>` takes a `path` and a `view`. When the current location matches `path`, the `view` will be created and displayed.

The `path` is most easily defined using the `path` macro, and can include

- a static path (`/users`),
- dynamic, named parameters beginning with a colon (`/:id`),
- and/or a wildcard beginning with an asterisk (`/user/*any`)

The `view` is a function that returns a view. Any component with no props works here, as does a closure that returns some view.

```rust
<Routes fallback=|| "Not found.">
  <Route path=path!("/") view=Home/>
  <Route path=path!("/users") view=Users/>
  <Route path=path!("/users/:id") view=UserProfile/>
  <Route path=path!("/*any") view=|| view! { <h1>"Not Found"</h1> }/>
</Routes>
```

> `view` takes a `Fn() -> impl IntoView`. If a component has no props, it can be passed directly into the `view`. In this case, `view=Home` is just a shorthand for `|| view! { <Home/> }`.

Now if you navigate to `/` or to `/users` you’ll get the home page or the `<Users/>`. If you go to `/users/3` or `/blahblah` you’ll get a user profile or your 404 page (`<NotFound/>`). On every navigation, the router determines which `<Route/>` should be matched, and therefore what content should be displayed where the `<Routes/>` component is defined.

Simple enough?

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/16_routes.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/17_nested_routing.md
# Nested Routing

We just defined the following set of routes:

```rust
<Routes fallback=|| "Not found.">
  <Route path=path!("/") view=Home/>
  <Route path=path!("/users") view=Users/>
  <Route path=path!("/users/:id") view=UserProfile/>
  <Route path=path!("/*any") view=|| view! { <h1>"Not Found"</h1> }/>
</Routes>
```

There’s a certain amount of duplication here: `/users` and `/users/:id`. This is fine for a small app, but you can probably already tell it won’t scale well. Wouldn’t it be nice if we could nest these routes?

Well... you can!

```rust
<Routes fallback=|| "Not found.">
  <Route path=path!("/") view=Home/>
  <ParentRoute path=path!("/users") view=Users>
    <Route path=path!(":id") view=UserProfile/>
  </ParentRoute>
  <Route path=path!("/*any") view=|| view! { <h1>"Not Found"</h1> }/>
</Routes>
```

You can nest a `<Route/>` inside a `<ParentRoute/>`. Seems straightforward.

But wait. We’ve just subtly changed what our application does.

The next section is one of the most important in this entire routing section of the guide. Read it carefully, and feel free to ask questions if there’s anything you don’t understand.

# Nested Routes as Layout

Nested routes are a form of layout, not a method of route definition.

Let me put that another way: The goal of defining nested routes is not primarily to avoid repeating yourself when typing out the paths in your route definitions. It is actually to tell the router to display multiple `<Route/>`s on the page at the same time, side by side.

Let’s look back at our practical example.

```rust
<Routes fallback=|| "Not found.">
  <Route path=path!("/users") view=Users/>
  <Route path=path!("/users/:id") view=UserProfile/>
</Routes>
```

This means:

- If I go to `/users`, I get the `<Users/>` component.
- If I go to `/users/3`, I get the `<UserProfile/>` component (with the parameter `id` set to `3`; more on that later)

Let’s say I use nested routes instead:

```rust
<Routes fallback=|| "Not found.">
  <ParentRoute path=path!("/users") view=Users>
    <Route path=path!(":id") view=UserProfile/>
  </ParentRoute>
</Routes>
```

This means:

- If I go to `/users/3`, the path matches two `<Route/>`s: `<Users/>` and `<UserProfile/>`.
- If I go to `/users`, the path is not matched.

I actually need to add a fallback route

```rust
<Routes>
  <ParentRoute path=path!("/users") view=Users>
    <Route path=path!(":id") view=UserProfile/>
    <Route path=path!("") view=NoUser/>
  </ParentRoute>
</Routes>
```

Now:

- If I go to `/users/3`, the path matches `<Users/>` and `<UserProfile/>`.
- If I go to `/users`, the path matches `<Users/>` and `<NoUser/>`.

When I use nested routes, in other words, each **path** can match multiple **routes**: each URL can render the views provided by multiple `<Route/>` components, at the same time, on the same page.

This may be counter-intuitive, but it’s very powerful, for reasons you’ll hopefully see in a few minutes.

## Why Nested Routing?

Why bother with this?

Most web applications contain levels of navigation that correspond to different parts of the layout. For example, in an email app you might have a URL like `/contacts/greg`, which shows a list of contacts on the left of the screen, and contact details for Greg on the right of the screen. The contact list and the contact details should always appear on the screen at the same time. If there’s no contact selected, maybe you want to show a little instructional text.

You can easily define this with nested routes

```rust
<Routes fallback=|| "Not found.">
  <ParentRoute path=path!("/contacts") view=ContactList>
    <Route path=path!(":id") view=ContactInfo/>
    <Route path=path!("") view=|| view! {
      <p>"Select a contact to view more info."</p>
    }/>
  </ParentRoute>
</Routes>
```

You can go even deeper. Say you want to have tabs for each contact’s address, email/phone, and your conversations with them. You can add _another_ set of nested routes inside `:id`:

```rust
<Routes fallback=|| "Not found.">
  <ParentRoute path=path!("/contacts") view=ContactList>
    <ParentRoute path=path!(":id") view=ContactInfo>
      <Route path=path!("") view=EmailAndPhone/>
      <Route path=path!("address") view=Address/>
      <Route path=path!("messages") view=Messages/>
    </ParentRoute>
    <Route path=path!("") view=|| view! {
      <p>"Select a contact to view more info."</p>
    }/>
  </ParentRoute>
</Routes>
```

> The main page of the [Remix website](https://remix.run/), a React framework from the creators of React Router, has a great visual example if you scroll down, with three levels of nested routing: Sales > Invoices > an invoice.

## `<Outlet/>`

Parent routes do not automatically render their nested routes. After all, they are just components; they don’t know exactly where they should render their children, and “just stick it at the end of the parent component” is not a great answer.

Instead, you tell a parent component where to render any nested components with an `<Outlet/>` component. The `<Outlet/>` simply renders one of two things:

- if there is no nested route that has been matched, it shows nothing
- if there is a nested route that has been matched, it shows its `view`

That’s all! But it’s important to know and to remember, because it’s a common source of “Why isn’t this working?” frustration. If you don’t provide an `<Outlet/>`, the nested route won’t be displayed.

```rust
#[component]
pub fn ContactList() -> impl IntoView {
  let contacts = todo!();

  view! {
    <div style="display: flex">
      // the contact list
      <For each=contacts
        key=|contact| contact.id
        children=|contact| todo!()
      />
      // the nested child, if any
      // don’t forget this!
      <Outlet/>
    </div>
  }
}
```

## Refactoring Route Definitions

You don’t need to define all your routes in one place if you don’t want to. You can refactor any `<Route/>` and its children out into a separate component.

For example, you can refactor the example above to use two separate components:

```rust
#[component]
pub fn App() -> impl IntoView {
    view! {
      <Router>
        <Routes fallback=|| "Not found.">
          <ParentRoute path=path!("/contacts") view=ContactList>
            <ContactInfoRoutes/>
            <Route path=path!("") view=|| view! {
              <p>"Select a contact to view more info."</p>
            }/>
          </ParentRoute>
        </Routes>
      </Router>
    }
}

#[component(transparent)]
fn ContactInfoRoutes() -> impl MatchNestedRoutes + Clone {
    view! {
      <ParentRoute path=path!(":id") view=ContactInfo>
        <Route path=path!("") view=EmailAndPhone/>
        <Route path=path!("address") view=Address/>
        <Route path=path!("messages") view=Messages/>
      </ParentRoute>
    }
    .into_inner()
}
```

This second component is a `#[component(transparent)]`, meaning it just returns its data, not a view; likewise, it uses `.into_inner()` to remove some debug info added by the `view` macro and just return the route definitions created by `<ParentRoute/>`.

## Nested Routing and Performance

All of this is nice, conceptually, but again—what’s the big deal?

Performance.

In a fine-grained reactive library like Leptos, it’s always important to do the least amount of rendering work you can. Because we’re working with real DOM nodes and not diffing a virtual DOM, we want to “rerender” components as infrequently as possible. Nested routing makes this extremely easy.

Imagine my contact list example. If I navigate from Greg to Alice to Bob and back to Greg, the contact information needs to change on each navigation. But the `<ContactList/>` should never be rerendered. Not only does this save on rendering performance, it also maintains state in the UI. For example, if I have a search bar at the top of `<ContactList/>`, navigating from Greg to Alice to Bob won’t clear the search.

In fact, in this case, we don’t even need to rerender the `<Contact/>` component when moving between contacts. The router will just reactively update the `:id` parameter as we navigate, allowing us to make fine-grained updates. As we navigate between contacts, we’ll update single text nodes to change the contact’s name, address, and so on, without doing _any_ additional rerendering.

> This sandbox includes a couple features (like nested routing) discussed in this section and the previous one, and a couple we’ll cover in the rest of this chapter. The router is such an integrated system that it makes sense to provide a single example, so don’t be surprised if there’s anything you don’t understand.

```admonish sandbox title="Live example" collapsible=true

[Click to open CodeSandbox.](https://codesandbox.io/p/devbox/16-router-0-7-csm8t5?file=%2Fsrc%2Fmain.rs)

<noscript>
  Please enable JavaScript to view examples.
</noscript>

<template>
  <iframe src="https://codesandbox.io/p/devbox/16-router-0-7-csm8t5?file=%2Fsrc%2Fmain.rs" width="100%" height="1000px" style="max-height: 100vh"></iframe>
</template>

```

<details>
<summary>CodeSandbox Source</summary>

```rust
use leptos::prelude::*;
use leptos_router::components::{Outlet, ParentRoute, Route, Router, Routes, A};
use leptos_router::hooks::use_params_map;
use leptos_router::path;

#[component]
pub fn App() -> impl IntoView {
    view! {
        <Router>
            <h1>"Contact App"</h1>
            // this <nav> will show on every routes,
            // because it's outside the <Routes/>
            // note: we can just use normal <a> tags
            // and the router will use client-side navigation
            <nav>
                <a href="/">"Home"</a>
                <a href="/contacts">"Contacts"</a>
            </nav>
            <main>
                <Routes fallback=|| "Not found.">
                    // / just has an un-nested "Home"
                    <Route path=path!("/") view=|| view! {
                        <h3>"Home"</h3>
                    }/>
                    // /contacts has nested routes
                    <ParentRoute
                        path=path!("/contacts")
                        view=ContactList
                      >
                        // if no id specified, fall back
                        <ParentRoute path=path!(":id") view=ContactInfo>
                            <Route path=path!("") view=|| view! {
                                <div class="tab">
                                    "(Contact Info)"
                                </div>
                            }/>
                            <Route path=path!("conversations") view=|| view! {
                                <div class="tab">
                                    "(Conversations)"
                                </div>
                            }/>
                        </ParentRoute>
                        // if no id specified, fall back
                        <Route path=path!("") view=|| view! {
                            <div class="select-user">
                                "Select a user to view contact info."
                            </div>
                        }/>
                    </ParentRoute>
                </Routes>
            </main>
        </Router>
    }
}

#[component]
fn ContactList() -> impl IntoView {
    view! {
        <div class="contact-list">
            // here's our contact list component itself
            <h3>"Contacts"</h3>
            <div class="contact-list-contacts">
                <A href="alice">"Alice"</A>
                <A href="bob">"Bob"</A>
                <A href="steve">"Steve"</A>
            </div>

            // <Outlet/> will show the nested child route
            // we can position this outlet wherever we want
            // within the layout
            <Outlet/>
        </div>
    }
}

#[component]
fn ContactInfo() -> impl IntoView {
    // we can access the :id param reactively with `use_params_map`
    let params = use_params_map();
    let id = move || params.read().get("id").unwrap_or_default();

    // imagine we're loading data from an API here
    let name = move || match id().as_str() {
        "alice" => "Alice",
        "bob" => "Bob",
        "steve" => "Steve",
        _ => "User not found.",
    };

    view! {
        <h4>{name}</h4>
        <div class="contact-info">
            <div class="tabs">
                <A href="" exact=true>"Contact Info"</A>
                <A href="conversations">"Conversations"</A>
            </div>

            // <Outlet/> here is the tabs that are nested
            // underneath the /contacts/:id route
            <Outlet/>
        </div>
    }
}

fn main() {
    leptos::mount::mount_to_body(App)
}
```

</details>
</preview>

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/book/src/router/17_nested_routing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/LICENSE.md
MIT License

Copyright (c) 2024 Rust for Web

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
OR OTHER DEALINGS IN THE SOFTWARE.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/LICENSE.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/README.md
<p align="center">
    <a href="./logo.svg">
        <img src="./logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">Rust Radix</h1>

Rust port of [Radix](https://www.radix-ui.com).

[Radix](https://www.radix-ui.com) is a library of components, icons, colors, and templates for building high-quality, accessible UI.

## Frameworks

Rust Radix is available for these Rust frameworks:

-   [Dioxus](https://dioxuslabs.com/)
-   [Leptos](./packages/primitives/leptos)
-   [Yew](https://yew.rs/)

See [the Rust Radix book](https://radix.rustforweb.org/introduction.html#frameworks) for more information.

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org).

## Credits

The logo is a combination of the [Radix logo](https://github.com/radix-ui/website/blob/main/components/RadixLogo.tsx) and [Ferris the Rustacean](https://rustacean.net/).

## License

This project is available under the [MIT license](LICENSE.md).

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/core/rect/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-rect</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/core/rect/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/core/primitive/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-primitive</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/core/primitive/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/core/number/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-number</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/core/number/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/popper/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-popper</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/popper/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/use-previous/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-use-previous</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/use-previous/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/tooltip/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-tooltip</h1>

A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/tooltip/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/collection/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-roving-focus</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/collection/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/portal/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-portal</h1>

Renders a Yew subtree in a different part of the DOM.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/portal/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/use-controllable-state/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-use-controllable-state</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/use-controllable-state/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/use-size/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-use-size</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/use-size/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/arrow/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-arrow</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/arrow/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/separator/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-separator</h1>

Visually or semantically separates content.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/separator/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/primitive/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-primitive</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/primitive/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/checkbox/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-checkbox</h1>

A control that allows the user to toggle between checked and not checked.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/checkbox/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/label/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-label</h1>

Renders an accessible label associated with controls.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/label/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/dialog/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-dialog</h1>

A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/dialog/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/dismissable-layer/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-dismissable-layer</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/dismissable-layer/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/presence/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-presence</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/presence/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/scroll-area/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-scroll-area</h1>

Augments native scroll functionality for custom, cross-browser styling.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/scroll-area/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/visually-hidden/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-visually-hidden</h1>

Hides content from the screen in an accessible way.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/visually-hidden/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/avatar/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-avatar</h1>

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/avatar/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/aspect-ratio/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-aspect-ratio</h1>

Displays content within a desired ratio.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/aspect-ratio/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/switch/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-switch</h1>

A control that allows the user to toggle between checked and not checked.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/switch/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/id/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-id</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/id/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/direction/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-direction</h1>

Wraps your app to provide global reading direction.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/direction/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/select/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-select</h1>

Displays a list of options for the user to pick from - triggered by a button.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/select/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/focus-guards/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-focus-guards</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/focus-guards/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/focus-scope/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-focus-group</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/yew/focus-scope/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/popper/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-popper</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/popper/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/use-previous/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-use-previous</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/use-previous/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/collection/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-roving-focus</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/collection/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/portal/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-portal</h1>

Renders a Leptos subtree in a different part of the DOM.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/portal/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/use-controllable-state/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-use-controllable-state</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/use-controllable-state/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/accessible-icon/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-accessible-icon</h1>

Makes icons accessible by adding a label.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/accessible-icon/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/use-size/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-use-size</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/use-size/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/progress/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-progress</h1>

Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/progress/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/roving-focus/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-roving-focus</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/roving-focus/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/arrow/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-arrow</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/arrow/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/separator/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-separator</h1>

Visually or semantically separates content.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/separator/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/primitive/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-primitive</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/primitive/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/checkbox/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-checkbox</h1>

A control that allows the user to toggle between checked and not checked.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/checkbox/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/label/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-label</h1>

Renders an accessible label associated with controls.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/label/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/use-escape-keydown/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-use-keyboard-keydown</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/use-escape-keydown/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/toggle/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-toggle</h1>

A two-state button that can be either on or off.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/toggle/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/dismissable-layer/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-dismissable-layer</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/dismissable-layer/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/presence/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-presence</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/presence/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/visually-hidden/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-visually-hidden</h1>

Hides content from the screen in an accessible way.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/visually-hidden/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/menu/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-menu</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/menu/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/avatar/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-avatar</h1>

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/avatar/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/aspect-ratio/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-aspect-ratio</h1>

Displays content within a desired ratio.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/aspect-ratio/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/switch/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-switch</h1>

A control that allows the user to toggle between checked and not checked.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/switch/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/compose-refs/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-compose-refs</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/compose-refs/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/id/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-id</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/id/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/direction/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-direction</h1>

Wraps your app to provide global reading direction.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/direction/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/focus-guards/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-focus-guards</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/focus-guards/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/focus-scope/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-focus-group</h1>

This is an internal utility, not intended for public usage.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/primitives/leptos/focus-scope/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/colors/README.md
<p align="center">
    <a href="../../logo.svg">
        <img src="../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-colors</h1>

A gorgeous, accessible color system.

## Rust Radix

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/colors).

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/colors/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/icons/yew/README.md
<p align="center">
    <a href="../../../logo.svg">
        <img src="../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-icons</h1>

Radix Icons is a crisp set of 15x15 icons.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/icons/yew/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/icons/leptos/README.md
<p align="center">
    <a href="../../../logo.svg">
        <img src="../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-icons</h1>

Radix Icons is a crisp set of 15x15 icons.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/icons/leptos/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/icons/dioxus/README.md
<p align="center">
    <a href="../../../logo.svg">
        <img src="../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-dioxus-icons</h1>

Radix Icons is a crisp set of 15x15 icons.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/primitives).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/icons/dioxus/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/themes/yew/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-yew-themes</h1>

Radix Themes is a pre-styled component library that is designed to work out of the box with minimal configuration.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/themes/yew/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/themes/leptos/README.md
<p align="center">
    <a href="../../../../logo.svg">
        <img src="../../../../logo.svg" width="300" height="200" alt="Rust Radix Logo">
    </a>
</p>

<h1 align="center">radix-leptos-themes</h1>

Radix Themes is a pre-styled component library that is designed to work out of the box with minimal configuration.

[Rust Radix](https://github.com/RustForWeb/radix) is a Rust port of [Radix](https://www.radix-ui.com/).

## Documentation

See [the Rust Radix book](https://radix.rustforweb.org/) for documentation.

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/packages/themes/leptos/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/SUMMARY.md
# Summary

-   [Introduction](./introduction.md)
-   [Colors](./colors/README.md)
-   [Icons](./icons/README.md)
-   [Primitives](./primitives/README.md)
    -   [Overview](./primitives/overview/README.md)
        -   [Introduction](./primitives/overview/introduction.md)
        -   [Getting Started](./primitives/overview/getting-started.md)
        -   [Accessibility](./primitives/overview/accessibility.md)
    -   [Guides](./primitives/guides/README.md)
        -   [Styling](./primitives/guides/styling.md)
        -   [Animation](./primitives/guides/animation.md)
        -   [Composition](./primitives/guides/composition.md)
        -   [Server-side Rendering]()
    -   [Components](./primitives/components/README.md)
        -   [Accordion]()
        -   [Alert Dialog]()
        -   [Aspect Ratio](./primitives/components/aspect-ratio.md)
        -   [Avatar](./primitives/components/avatar.md)
        -   [Checkbox](./primitives/components/checkbox.md)
        -   [Collapisble]()
        -   [Context Menu]()
        -   [Dialog]()
        -   [Dropdown Menu]()
        -   [Form]()
        -   [Hover Card]()
        -   [Label](./primitives/components/label.md)
        -   [Menubar]()
        -   [Navigation Menu]()
        -   [Popover]()
        -   [Progress](./primitives/components/progress.md)
        -   [Radio Group]()
        -   [Scroll Area]()
        -   [Select](./primitives/components/select.md)
        -   [Separator](./primitives/components/separator.md)
        -   [Slider]()
        -   [Switch](./primitives/components/switch.md)
        -   [Tabs]()
        -   [Toast]()
        -   [Toggle](./primitives/components/toggle.md)
        -   [Toggle Group]()
        -   [Toolbar]()
        -   [Tooltip](./primitives/components/tooltip.md)
    -   [Utilities](./primitives/utilities/README.md)
        -   [Accessible Icon](./primitives/utilities/accessible-icon.md)
        -   [Direction Provider](./primitives/utilities/direction-provider.md)
        -   [Portal](./primitives/utilities/portal.md)
        -   [Slot]()
        -   [Visually Hidden](./primitives/utilities/visually-hidden.md)
-   [Themes](./themes/README.md)
    -   [Overview](./themes/overview/README.md)
        -   [Getting Started](./themes/overview/getting-started.md)
        -   [Styling](./themes/overview/styling.md)
        -   [Layout](./themes/overview/layout.md)
    -   [Theme](./themes/theme/README.md)
        -   [Overview](./themes/theme/overview.md)
        -   [Color](./themes/theme/color.md)
        -   [Dark mode](./themes/theme/dark-mode.md)
        -   [Typography](./themes/theme/typography.md)
        -   [Spacing](./themes/theme/spacing.md)
        -   [Breakpoints](./themes/theme/breakpoints.md)
        -   [Radius](./themes/theme/radius.md)
        -   [Shadows](./themes/theme/shadows.md)
        -   [Cursors](./themes/theme/cursors.md)
    -   [Layout](./themes/layout/README.md)
        -   [Box](./themes/layout/box.md)
        -   [Flex](./themes/layout/flex.md)
        -   [Grid](./themes/layout/grid.md)
        -   [Container](./themes/layout/container.md)
        -   [Section](./themes/layout/section.md)
    -   [Typography](./themes/typography/README.md)
        -   [Text](./themes/typography/text.md)
        -   [Heading](./themes/typography/heading.md)
        -   [Blockquote](./themes/typography/blockquote.md)
        -   [Code](./themes/typography/code.md)
        -   [Em](./themes/typography/em.md)
        -   [Kbd](./themes/typography/kbd.md)
        -   [Link](./themes/typography/link.md)
        -   [Quote](./themes/typography/quote.md)
        -   [Strong](./themes/typography/strong.md)
    -   [Components](./themes/components/README.md)
        -   [Alert Dialog]()
        -   [Aspect Ratio](./themes/components/aspect-ratio.md)
        -   [Avatar](./themes/components/avatar.md)
        -   [Badge](./themes/components/badge.md)
        -   [Button](./themes/components/button.md)
        -   [Callout](./themes/components/callout.md)
        -   [Card](./themes/components/card.md)
        -   [Checkbox](./themes/components/checkbox.md)
        -   [Checkbox Group]()
        -   [Checkbox Cards]()
        -   [Context Menu]()
        -   [Data List](./themes/components/data-list.md)
        -   [Dialog]()
        -   [Dropdown Menu]()
        -   [Hover Card]()
        -   [Icon Button](./themes/components/icon-button.md)
        -   [Inset](./themes/components/inset.md)
        -   [Popover]()
        -   [Progress]()
        -   [Radio](./themes/components/radio.md)
        -   [Radio Group]()
        -   [Radio Cards]()
        -   [Scroll Area]()
        -   [Segmented Control]()
        -   [Select](./themes/components/select.md)
        -   [Separator](./themes/components/separator.md)
        -   [Skeleton](./themes/components/skeleton.md)
        -   [Slider]()
        -   [Spinner](./themes/components/spinner.md)
        -   [Switch](./themes/components/switch.md)
        -   [Table](./themes/components/table.md)
        -   [Tabs]()
        -   [Tab Nav]()
        -   [Text Area](./themes/components/text-area.md)
        -   [Text Field](./themes/components/text-field.md)
        -   [Tooltip](./themes/components/tooltip.md)
    -   [Utilities](./themes/utilities/README.md)
        -   [Accessible Icon]()
        -   [Portal]()
        -   [Reset]()
        -   [Theme](./themes/utilities/theme.md)
        -   [Visually Hidden](./themes/utilities/visually-hidden.md)
-   [Contributing]()

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/SUMMARY.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/introduction.md
<p align="center">
    <img src="./images/logo.svg" width="300" height="200" alt="Rust Radix Logo">
</p>

# Introduction

Rust Radix is a Rust port of [Radix](https://www.radix-ui.com/primitives).

[Radix](https://www.radix-ui.com/) is a library of components, icons, colors, and templates for building high-quality, accessible UI.

## Parts

Rust Radix consists of the following parts:

-   [Colors](./colors)
-   [Icons](./icons)
-   [Primitives](./primitives)
-   [Themes](./themes)

## Frameworks

Rust Radix is available for the following frameworks:

-   [Dioxus](https://dioxuslabs.com/)
-   [Leptos](https://leptos.dev/)
-   [Yew](https://yew.rs/)

The tables below show the support for the various frameworks.

-   ✅ = Supported
-   🟦 = Early Support
-   🚧 = Work In Progress
-   ❌ = Unsupported

### Colors Support

| Name   | Framework Independent |
| ------ | --------------------- |
| Colors | ✅                    |

### Icons Support

| Name  | Dioxus | Leptos | Yew |
| ----- | ------ | ------ | --- |
| Icons | ✅     | ✅     | ✅  |

### Primitives Support

| Name                   | Dioxus                                                    | Leptos                                                  | Yew                                                       |
| ---------------------- | --------------------------------------------------------- | ------------------------------------------------------- | --------------------------------------------------------- |
| Accessible Icon        | ❌ [#120](https://github.com/RustForWeb/radix/issues/120) | 🚧 [#17](https://github.com/RustForWeb/radix/issues/17) | ❌ [#69](https://github.com/RustForWeb/radix/issues/69)   |
| Accordion              | ❌ [#121](https://github.com/RustForWeb/radix/issues/121) | ❌ [#18](https://github.com/RustForWeb/radix/issues/18) | ❌ [#70](https://github.com/RustForWeb/radix/issues/70)   |
| Alert Dialog           | ❌ [#122](https://github.com/RustForWeb/radix/issues/122) | ❌ [#19](https://github.com/RustForWeb/radix/issues/19) | ❌ [#71](https://github.com/RustForWeb/radix/issues/71)   |
| Arrow                  | ❌ [#123](https://github.com/RustForWeb/radix/issues/123) | 🚧 [#20](https://github.com/RustForWeb/radix/issues/20) | 🚧 [#72](https://github.com/RustForWeb/radix/issues/72)   |
| Aspect Ratio           | ❌ [#124](https://github.com/RustForWeb/radix/issues/124) | 🟦 [#21](https://github.com/RustForWeb/radix/issues/21) | ❌ [#73](https://github.com/RustForWeb/radix/issues/73)   |
| Avatar                 | ❌ [#125](https://github.com/RustForWeb/radix/issues/125) | 🚧 [#22](https://github.com/RustForWeb/radix/issues/22) | 🚧 [#74](https://github.com/RustForWeb/radix/issues/74)   |
| Checkbox               | ❌ [#126](https://github.com/RustForWeb/radix/issues/126) | 🚧 [#23](https://github.com/RustForWeb/radix/issues/23) | 🟦 [#75](https://github.com/RustForWeb/radix/issues/75)   |
| Collapsible            | ❌ [#127](https://github.com/RustForWeb/radix/issues/127) | ❌ [#24](https://github.com/RustForWeb/radix/issues/24) | ❌ [#76](https://github.com/RustForWeb/radix/issues/76)   |
| Collection             | ❌ [#128](https://github.com/RustForWeb/radix/issues/128) | 🟦 [#25](https://github.com/RustForWeb/radix/issues/25) | 🟦 [#77](https://github.com/RustForWeb/radix/issues/77)   |
| Compose Refs           | ❌ [#129](https://github.com/RustForWeb/radix/issues/129) | 🟦 [#26](https://github.com/RustForWeb/radix/issues/26) | 🟦 [#78](https://github.com/RustForWeb/radix/issues/78)   |
| Context Menu           | ❌ [#130](https://github.com/RustForWeb/radix/issues/130) | ❌ [#27](https://github.com/RustForWeb/radix/issues/27) | ❌ [#79](https://github.com/RustForWeb/radix/issues/79)   |
| Context                | ❌ [#131](https://github.com/RustForWeb/radix/issues/131) | ❌ [#28](https://github.com/RustForWeb/radix/issues/28) | ❌ [#80](https://github.com/RustForWeb/radix/issues/80)   |
| Dialog                 | ❌ [#132](https://github.com/RustForWeb/radix/issues/132) | ❌ [#29](https://github.com/RustForWeb/radix/issues/29) | 🚧 [#81](https://github.com/RustForWeb/radix/issues/81)   |
| Direction              | ❌ [#133](https://github.com/RustForWeb/radix/issues/133) | 🟦 [#30](https://github.com/RustForWeb/radix/issues/30) | 🟦 [#82](https://github.com/RustForWeb/radix/issues/82)   |
| Dismissable Layer      | ❌ [#134](https://github.com/RustForWeb/radix/issues/134) | 🚧 [#31](https://github.com/RustForWeb/radix/issues/31) | 🚧 [#83](https://github.com/RustForWeb/radix/issues/83)   |
| Dropdown Menu          | ❌ [#135](https://github.com/RustForWeb/radix/issues/135) | ❌ [#32](https://github.com/RustForWeb/radix/issues/32) | ❌ [#84](https://github.com/RustForWeb/radix/issues/84)   |
| Focus Guards           | ❌ [#136](https://github.com/RustForWeb/radix/issues/136) | 🟦 [#33](https://github.com/RustForWeb/radix/issues/33) | 🟦 [#85](https://github.com/RustForWeb/radix/issues/85)   |
| Focus Scope            | ❌ [#137](https://github.com/RustForWeb/radix/issues/137) | 🚧 [#34](https://github.com/RustForWeb/radix/issues/34) | 🚧 [#86](https://github.com/RustForWeb/radix/issues/86)   |
| Form                   | ❌ [#138](https://github.com/RustForWeb/radix/issues/138) | ❌ [#35](https://github.com/RustForWeb/radix/issues/35) | ❌ [#87](https://github.com/RustForWeb/radix/issues/87)   |
| Hover Card             | ❌ [#139](https://github.com/RustForWeb/radix/issues/139) | ❌ [#36](https://github.com/RustForWeb/radix/issues/36) | ❌ [#88](https://github.com/RustForWeb/radix/issues/88)   |
| ID                     | ❌                                                        | 🟦                                                      | 🟦                                                        |
| Label                  | ❌ [#140](https://github.com/RustForWeb/radix/issues/140) | 🟦 [#37](https://github.com/RustForWeb/radix/issues/37) | 🟦 [#89](https://github.com/RustForWeb/radix/issues/89)   |
| Menu                   | ❌ [#141](https://github.com/RustForWeb/radix/issues/141) | 🚧 [#38](https://github.com/RustForWeb/radix/issues/38) | ❌ [#90](https://github.com/RustForWeb/radix/issues/90)   |
| Menubar                | ❌ [#142](https://github.com/RustForWeb/radix/issues/142) | ❌ [#39](https://github.com/RustForWeb/radix/issues/39) | ❌ [#91](https://github.com/RustForWeb/radix/issues/91)   |
| Navigation Menu        | ❌ [#143](https://github.com/RustForWeb/radix/issues/143) | ❌ [#40](https://github.com/RustForWeb/radix/issues/40) | ❌ [#92](https://github.com/RustForWeb/radix/issues/92)   |
| Popover                | ❌ [#144](https://github.com/RustForWeb/radix/issues/144) | ❌ [#41](https://github.com/RustForWeb/radix/issues/41) | ❌ [#93](https://github.com/RustForWeb/radix/issues/93)   |
| Popper                 | ❌ [#145](https://github.com/RustForWeb/radix/issues/145) | 🟦 [#42](https://github.com/RustForWeb/radix/issues/42) | 🚧 [#94](https://github.com/RustForWeb/radix/issues/94)   |
| Portal                 | ❌ [#146](https://github.com/RustForWeb/radix/issues/146) | 🟦 [#43](https://github.com/RustForWeb/radix/issues/43) | 🟦 [#95](https://github.com/RustForWeb/radix/issues/95)   |
| Presence               | ❌ [#147](https://github.com/RustForWeb/radix/issues/147) | 🟦 [#44](https://github.com/RustForWeb/radix/issues/44) | 🟦 [#96](https://github.com/RustForWeb/radix/issues/96)   |
| Primitive              | ❌ [#148](https://github.com/RustForWeb/radix/issues/148) | 🟦 [#45](https://github.com/RustForWeb/radix/issues/45) | 🟦 [#97](https://github.com/RustForWeb/radix/issues/97)   |
| Progress               | ❌ [#149](https://github.com/RustForWeb/radix/issues/150) | 🟦 [#46](https://github.com/RustForWeb/radix/issues/46) | ❌ [#98](https://github.com/RustForWeb/radix/issues/98)   |
| Radio Group            | ❌ [#150](https://github.com/RustForWeb/radix/issues/150) | ❌ [#47](https://github.com/RustForWeb/radix/issues/47) | ❌ [#99](https://github.com/RustForWeb/radix/issues/99)   |
| Roving Focus           | ❌ [#151](https://github.com/RustForWeb/radix/issues/151) | 🚧 [#48](https://github.com/RustForWeb/radix/issues/48) | ❌ [#100](https://github.com/RustForWeb/radix/issues/100) |
| Scroll Area            | ❌ [#152](https://github.com/RustForWeb/radix/issues/152) | ❌ [#49](https://github.com/RustForWeb/radix/issues/49) | ❌ [#101](https://github.com/RustForWeb/radix/issues/101) |
| Select                 | ❌ [#153](https://github.com/RustForWeb/radix/issues/153) | ❌ [#50](https://github.com/RustForWeb/radix/issues/50) | 🚧 [#102](https://github.com/RustForWeb/radix/issues/102) |
| Separator              | ❌ [#154](https://github.com/RustForWeb/radix/issues/154) | 🟦 [#51](https://github.com/RustForWeb/radix/issues/51) | 🟦 [#103](https://github.com/RustForWeb/radix/issues/103) |
| Slider                 | ❌ [#155](https://github.com/RustForWeb/radix/issues/155) | ❌ [#52](https://github.com/RustForWeb/radix/issues/52) | ❌ [#104](https://github.com/RustForWeb/radix/issues/104) |
| Slot                   | ❌ [#156](https://github.com/RustForWeb/radix/issues/156) | 🚧 [#53](https://github.com/RustForWeb/radix/issues/53) | ❌ [#105](https://github.com/RustForWeb/radix/issues/105) |
| Switch                 | ❌ [#157](https://github.com/RustForWeb/radix/issues/157) | 🟦 [#54](https://github.com/RustForWeb/radix/issues/54) | 🟦 [#106](https://github.com/RustForWeb/radix/issues/106) |
| Tabs                   | ❌ [#158](https://github.com/RustForWeb/radix/issues/158) | ❌ [#55](https://github.com/RustForWeb/radix/issues/55) | ❌ [#107](https://github.com/RustForWeb/radix/issues/107) |
| Toast                  | ❌ [#159](https://github.com/RustForWeb/radix/issues/159) | ❌ [#56](https://github.com/RustForWeb/radix/issues/56) | ❌ [#108](https://github.com/RustForWeb/radix/issues/108) |
| Toggle Group           | ❌ [#160](https://github.com/RustForWeb/radix/issues/160) | ❌ [#57](https://github.com/RustForWeb/radix/issues/57) | ❌ [#109](https://github.com/RustForWeb/radix/issues/109) |
| Toggle                 | ❌ [#161](https://github.com/RustForWeb/radix/issues/161) | 🚧 [#58](https://github.com/RustForWeb/radix/issues/58) | ❌ [#110](https://github.com/RustForWeb/radix/issues/110) |
| Toolbar                | ❌ [#162](https://github.com/RustForWeb/radix/issues/162) | ❌ [#59](https://github.com/RustForWeb/radix/issues/59) | ❌ [#111](https://github.com/RustForWeb/radix/issues/111) |
| Tooltip                | ❌ [#163](https://github.com/RustForWeb/radix/issues/163) | ❌ [#60](https://github.com/RustForWeb/radix/issues/60) | 🚧 [#112](https://github.com/RustForWeb/radix/issues/112) |
| Use Callback Ref       | ❌                                                        | ❌                                                      | ❌                                                        |
| Use Controllable State | ❌ [#164](https://github.com/RustForWeb/radix/issues/164) | 🟦 [#61](https://github.com/RustForWeb/radix/issues/61) | 🟦 [#113](https://github.com/RustForWeb/radix/issues/113) |
| Use Escape Keydown     | ❌ [#165](https://github.com/RustForWeb/radix/issues/165) | 🟦 [#62](https://github.com/RustForWeb/radix/issues/62) | ❌ [#114](https://github.com/RustForWeb/radix/issues/114) |
| Use Layout Effect      | ❌                                                        | ❌                                                      | ❌                                                        |
| Use Previous           | ❌ [#166](https://github.com/RustForWeb/radix/issues/166) | 🟦 [#63](https://github.com/RustForWeb/radix/issues/63) | 🟦 [#115](https://github.com/RustForWeb/radix/issues/115) |
| Use Rect               | ❌ [#167](https://github.com/RustForWeb/radix/issues/167) | ❌ [#64](https://github.com/RustForWeb/radix/issues/64) | ❌ [#116](https://github.com/RustForWeb/radix/issues/116) |
| Use Size               | ❌ [#168](https://github.com/RustForWeb/radix/issues/168) | 🟦 [#65](https://github.com/RustForWeb/radix/issues/65) | 🟦 [#117](https://github.com/RustForWeb/radix/issues/117) |
| Visually Hidden        | ❌ [#169](https://github.com/RustForWeb/radix/issues/169) | 🟦 [#66](https://github.com/RustForWeb/radix/issues/66) | 🟦 [#118](https://github.com/RustForWeb/radix/issues/118) |
| **Total**              | 0 / 52                                                    | 29 / 52                                                 | 24 / 52                                                   |

### Themes Support

| Name              | Dioxus                                                    | Leptos                                                    | Yew                                                       |
| ----------------- | --------------------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------------- |
| Accessible Icon   | ❌ [#172](https://github.com/RustForWeb/radix/issues/172) | ❌ [#231](https://github.com/RustForWeb/radix/issues/231) | ❌ [#290](https://github.com/RustForWeb/radix/issues/290) |
| Alert Dialog      | ❌ [#173](https://github.com/RustForWeb/radix/issues/173) | ❌ [#232](https://github.com/RustForWeb/radix/issues/232) | ❌ [#291](https://github.com/RustForWeb/radix/issues/291) |
| Aspect Ratio      | ❌ [#174](https://github.com/RustForWeb/radix/issues/174) | ❌ [#233](https://github.com/RustForWeb/radix/issues/233) | 🟦 [#292](https://github.com/RustForWeb/radix/issues/292) |
| Avatar            | ❌ [#175](https://github.com/RustForWeb/radix/issues/175) | ❌ [#234](https://github.com/RustForWeb/radix/issues/234) | 🟦 [#293](https://github.com/RustForWeb/radix/issues/293) |
| Badge             | ❌ [#176](https://github.com/RustForWeb/radix/issues/176) | ❌ [#235](https://github.com/RustForWeb/radix/issues/235) | 🟦 [#294](https://github.com/RustForWeb/radix/issues/294) |
| Base Button       | ❌ [#177](https://github.com/RustForWeb/radix/issues/177) | ❌ [#236](https://github.com/RustForWeb/radix/issues/236) | 🟦 [#295](https://github.com/RustForWeb/radix/issues/295) |
| Blockquote        | ❌ [#178](https://github.com/RustForWeb/radix/issues/178) | ❌ [#237](https://github.com/RustForWeb/radix/issues/237) | 🟦 [#296](https://github.com/RustForWeb/radix/issues/296) |
| Box               | ❌ [#179](https://github.com/RustForWeb/radix/issues/179) | ❌ [#238](https://github.com/RustForWeb/radix/issues/238) | 🟦 [#297](https://github.com/RustForWeb/radix/issues/297) |
| Button            | ❌ [#180](https://github.com/RustForWeb/radix/issues/180) | ❌ [#239](https://github.com/RustForWeb/radix/issues/239) | 🟦 [#298](https://github.com/RustForWeb/radix/issues/298) |
| Callout           | ❌ [#181](https://github.com/RustForWeb/radix/issues/181) | ❌ [#240](https://github.com/RustForWeb/radix/issues/240) | 🟦 [#299](https://github.com/RustForWeb/radix/issues/299) |
| Card              | ❌ [#182](https://github.com/RustForWeb/radix/issues/182) | ❌ [#241](https://github.com/RustForWeb/radix/issues/241) | 🟦 [#300](https://github.com/RustForWeb/radix/issues/300) |
| Checkbox Cards    | ❌ [#183](https://github.com/RustForWeb/radix/issues/183) | ❌ [#242](https://github.com/RustForWeb/radix/issues/242) | ❌ [#301](https://github.com/RustForWeb/radix/issues/301) |
| Checkbox Group    | ❌ [#184](https://github.com/RustForWeb/radix/issues/184) | ❌ [#243](https://github.com/RustForWeb/radix/issues/243) | ❌ [#302](https://github.com/RustForWeb/radix/issues/302) |
| Checkbox          | ❌ [#185](https://github.com/RustForWeb/radix/issues/185) | ❌ [#244](https://github.com/RustForWeb/radix/issues/244) | 🟦 [#303](https://github.com/RustForWeb/radix/issues/303) |
| Code              | ❌ [#186](https://github.com/RustForWeb/radix/issues/186) | ❌ [#245](https://github.com/RustForWeb/radix/issues/245) | 🟦 [#304](https://github.com/RustForWeb/radix/issues/304) |
| Container         | ❌ [#187](https://github.com/RustForWeb/radix/issues/187) | ❌ [#246](https://github.com/RustForWeb/radix/issues/246) | 🟦 [#305](https://github.com/RustForWeb/radix/issues/305) |
| Context Menu      | ❌ [#188](https://github.com/RustForWeb/radix/issues/188) | ❌ [#247](https://github.com/RustForWeb/radix/issues/247) | ❌ [#306](https://github.com/RustForWeb/radix/issues/306) |
| Data List         | ❌ [#189](https://github.com/RustForWeb/radix/issues/189) | ❌ [#248](https://github.com/RustForWeb/radix/issues/248) | 🟦 [#307](https://github.com/RustForWeb/radix/issues/307) |
| Dialog            | ❌ [#190](https://github.com/RustForWeb/radix/issues/190) | ❌ [#249](https://github.com/RustForWeb/radix/issues/249) | ❌ [#308](https://github.com/RustForWeb/radix/issues/308) |
| Dropdown Menu     | ❌ [#191](https://github.com/RustForWeb/radix/issues/191) | ❌ [#250](https://github.com/RustForWeb/radix/issues/250) | ❌ [#309](https://github.com/RustForWeb/radix/issues/309) |
| Em                | ❌ [#192](https://github.com/RustForWeb/radix/issues/192) | ❌ [#251](https://github.com/RustForWeb/radix/issues/251) | 🟦 [#310](https://github.com/RustForWeb/radix/issues/310) |
| Flex              | ❌ [#193](https://github.com/RustForWeb/radix/issues/193) | ❌ [#252](https://github.com/RustForWeb/radix/issues/252) | 🟦 [#311](https://github.com/RustForWeb/radix/issues/311) |
| Grid              | ❌ [#194](https://github.com/RustForWeb/radix/issues/194) | ❌ [#253](https://github.com/RustForWeb/radix/issues/253) | 🟦 [#312](https://github.com/RustForWeb/radix/issues/312) |
| Heading           | ❌ [#195](https://github.com/RustForWeb/radix/issues/195) | ❌ [#254](https://github.com/RustForWeb/radix/issues/254) | 🟦 [#313](https://github.com/RustForWeb/radix/issues/313) |
| Hover Card        | ❌ [#196](https://github.com/RustForWeb/radix/issues/196) | ❌ [#255](https://github.com/RustForWeb/radix/issues/255) | ❌ [#314](https://github.com/RustForWeb/radix/issues/314) |
| Icon Button       | ❌ [#197](https://github.com/RustForWeb/radix/issues/197) | ❌ [#256](https://github.com/RustForWeb/radix/issues/256) | 🟦 [#315](https://github.com/RustForWeb/radix/issues/315) |
| Icons             | ❌ [#198](https://github.com/RustForWeb/radix/issues/198) | ❌ [#257](https://github.com/RustForWeb/radix/issues/257) | 🟦 [#316](https://github.com/RustForWeb/radix/issues/316) |
| Inset             | ❌ [#199](https://github.com/RustForWeb/radix/issues/199) | ❌ [#258](https://github.com/RustForWeb/radix/issues/258) | 🟦 [#317](https://github.com/RustForWeb/radix/issues/317) |
| Kbd               | ❌ [#200](https://github.com/RustForWeb/radix/issues/200) | ❌ [#259](https://github.com/RustForWeb/radix/issues/259) | 🟦 [#318](https://github.com/RustForWeb/radix/issues/318) |
| Link              | ❌ [#201](https://github.com/RustForWeb/radix/issues/201) | ❌ [#260](https://github.com/RustForWeb/radix/issues/260) | 🟦 [#319](https://github.com/RustForWeb/radix/issues/319) |
| Popover           | ❌ [#202](https://github.com/RustForWeb/radix/issues/202) | ❌ [#261](https://github.com/RustForWeb/radix/issues/261) | ❌ [#320](https://github.com/RustForWeb/radix/issues/320) |
| Portal            | ❌ [#203](https://github.com/RustForWeb/radix/issues/203) | ❌ [#262](https://github.com/RustForWeb/radix/issues/262) | 🟦 [#321](https://github.com/RustForWeb/radix/issues/321) |
| Progress          | ❌ [#204](https://github.com/RustForWeb/radix/issues/204) | ❌ [#263](https://github.com/RustForWeb/radix/issues/263) | ❌ [#322](https://github.com/RustForWeb/radix/issues/322) |
| Quote             | ❌ [#205](https://github.com/RustForWeb/radix/issues/205) | ❌ [#264](https://github.com/RustForWeb/radix/issues/264) | 🟦 [#323](https://github.com/RustForWeb/radix/issues/323) |
| Radio Cards       | ❌ [#206](https://github.com/RustForWeb/radix/issues/206) | ❌ [#265](https://github.com/RustForWeb/radix/issues/265) | ❌ [#324](https://github.com/RustForWeb/radix/issues/324) |
| Radio Group       | ❌ [#207](https://github.com/RustForWeb/radix/issues/207) | ❌ [#266](https://github.com/RustForWeb/radix/issues/266) | ❌ [#325](https://github.com/RustForWeb/radix/issues/325) |
| Radio             | ❌ [#208](https://github.com/RustForWeb/radix/issues/208) | ❌ [#267](https://github.com/RustForWeb/radix/issues/267) | 🟦 [#326](https://github.com/RustForWeb/radix/issues/326) |
| Reset             | ❌ [#209](https://github.com/RustForWeb/radix/issues/209) | ❌ [#268](https://github.com/RustForWeb/radix/issues/268) | ❌ [#327](https://github.com/RustForWeb/radix/issues/327) |
| Scroll Area       | ❌ [#210](https://github.com/RustForWeb/radix/issues/210) | ❌ [#269](https://github.com/RustForWeb/radix/issues/269) | ❌ [#328](https://github.com/RustForWeb/radix/issues/328) |
| Section           | ❌ [#211](https://github.com/RustForWeb/radix/issues/211) | ❌ [#270](https://github.com/RustForWeb/radix/issues/270) | 🟦 [#329](https://github.com/RustForWeb/radix/issues/329) |
| Segmented Control | ❌ [#212](https://github.com/RustForWeb/radix/issues/212) | ❌ [#271](https://github.com/RustForWeb/radix/issues/271) | ❌ [#330](https://github.com/RustForWeb/radix/issues/330) |
| Select            | ❌ [#213](https://github.com/RustForWeb/radix/issues/213) | ❌ [#272](https://github.com/RustForWeb/radix/issues/272) | 🚧 [#331](https://github.com/RustForWeb/radix/issues/331) |
| Separator         | ❌ [#214](https://github.com/RustForWeb/radix/issues/214) | ❌ [#273](https://github.com/RustForWeb/radix/issues/273) | 🟦 [#332](https://github.com/RustForWeb/radix/issues/332) |
| Skeleton          | ❌ [#215](https://github.com/RustForWeb/radix/issues/215) | ❌ [#274](https://github.com/RustForWeb/radix/issues/274) | 🟦 [#333](https://github.com/RustForWeb/radix/issues/333) |
| Slider            | ❌ [#216](https://github.com/RustForWeb/radix/issues/216) | ❌ [#275](https://github.com/RustForWeb/radix/issues/275) | ❌ [#334](https://github.com/RustForWeb/radix/issues/334) |
| Slot              | ❌ [#217](https://github.com/RustForWeb/radix/issues/217) | ❌ [#276](https://github.com/RustForWeb/radix/issues/276) | ❌ [#335](https://github.com/RustForWeb/radix/issues/335) |
| Spinner           | ❌ [#218](https://github.com/RustForWeb/radix/issues/218) | ❌ [#277](https://github.com/RustForWeb/radix/issues/277) | 🟦 [#336](https://github.com/RustForWeb/radix/issues/336) |
| Strong            | ❌ [#219](https://github.com/RustForWeb/radix/issues/219) | ❌ [#278](https://github.com/RustForWeb/radix/issues/278) | 🟦 [#337](https://github.com/RustForWeb/radix/issues/337) |
| Switch            | ❌ [#220](https://github.com/RustForWeb/radix/issues/220) | ❌ [#279](https://github.com/RustForWeb/radix/issues/279) | 🟦 [#338](https://github.com/RustForWeb/radix/issues/338) |
| Table             | ❌ [#221](https://github.com/RustForWeb/radix/issues/221) | ❌ [#280](https://github.com/RustForWeb/radix/issues/280) | 🟦 [#339](https://github.com/RustForWeb/radix/issues/339) |
| Tab Nav           | ❌ [#222](https://github.com/RustForWeb/radix/issues/222) | ❌ [#281](https://github.com/RustForWeb/radix/issues/281) | ❌ [#340](https://github.com/RustForWeb/radix/issues/340) |
| Tabs              | ❌ [#223](https://github.com/RustForWeb/radix/issues/223) | ❌ [#282](https://github.com/RustForWeb/radix/issues/282) | ❌ [#341](https://github.com/RustForWeb/radix/issues/341) |
| Text Area         | ❌ [#224](https://github.com/RustForWeb/radix/issues/224) | ❌ [#283](https://github.com/RustForWeb/radix/issues/283) | 🟦 [#342](https://github.com/RustForWeb/radix/issues/342) |
| Text Field        | ❌ [#225](https://github.com/RustForWeb/radix/issues/225) | ❌ [#284](https://github.com/RustForWeb/radix/issues/284) | 🟦 [#343](https://github.com/RustForWeb/radix/issues/343) |
| Text              | ❌ [#226](https://github.com/RustForWeb/radix/issues/226) | ❌ [#285](https://github.com/RustForWeb/radix/issues/285) | 🟦 [#344](https://github.com/RustForWeb/radix/issues/344) |
| Theme Panel       | ❌ [#227](https://github.com/RustForWeb/radix/issues/227) | ❌ [#286](https://github.com/RustForWeb/radix/issues/286) | ❌ [#345](https://github.com/RustForWeb/radix/issues/345) |
| Theme             | ❌ [#228](https://github.com/RustForWeb/radix/issues/228) | ❌ [#287](https://github.com/RustForWeb/radix/issues/287) | 🟦 [#346](https://github.com/RustForWeb/radix/issues/346) |
| Tooltip           | ❌ [#229](https://github.com/RustForWeb/radix/issues/229) | ❌ [#288](https://github.com/RustForWeb/radix/issues/288) | 🚧 [#347](https://github.com/RustForWeb/radix/issues/347) |
| Visually Hidden   | ❌ [#230](https://github.com/RustForWeb/radix/issues/230) | ❌ [#289](https://github.com/RustForWeb/radix/issues/289) | 🟦 [#348](https://github.com/RustForWeb/radix/issues/348) |
| **Total**         | 0 / 59                                                    | 0 / 59                                                    | 39 / 59                                                   |

## License

This project is available under the [MIT license](https://github.com/RustForWeb/radix/blob/main/LICENSE.md).

## Rust for Web

The Rust Radix project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/introduction.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/README.md
# Primitives

-   [Overview](./overview)
-   [Guides](./guides)
-   [Components](./components)
-   [Utilities](./utilities)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/utilities/README.md
# Utilities

-   [Accessible Icon](./accessible-icon.md)
-   [Direction Provider](./direction-provider.md)
-   [Portal](./portal.md)
-   [Visually Hidden](./visually-hidden.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/utilities/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/utilities/portal.md
# Portal

Renders a subtree in a different part of the DOM.

## Features

-   Render any subtree outside of your App.
-   Appends to `document.body` by default but can be customized to use a different container.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-portal
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-portal)
-   [View on docs.rs](https://docs.rs/radix-leptos-portal/latest/radix_leptos_portal/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/portal)

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-portal
```

-   [View on crates.io](https://crates.io/crates/radix-yew-portal)
-   [View on docs.rs](https://docs.rs/radix-yew-portal/latest/radix_yew_portal/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/portal)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import the component.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_portal::Portal;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <Portal />
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_portal::Portal;
use yew::prelude::*;

#[function_component]
fn Anatomy() -> Html {
    html! {
        <Portal />
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Anything you put inside this component will be rendered in a separate `<div>` element. By default, this element will be appended to `document.body` but you can choose a different container by using the `container` or `container_ref` prop.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop            | Type                                       | Default |
| --------------- | ------------------------------------------ | ------- |
| `as_child`      | `MaybeProp<bool>`                          | `false` |
| `container`     | `MaybeProp<SendWrapper<web_sys::Element>>` | -       |
| `container_ref` | `NodeRef<AnyElement>`                      | -       |

{{#endtab }}
{{#tab name="Yew" }}

| Prop            | Type                                       | Default |
| --------------- | ------------------------------------------ | ------- |
| `as_child`      | `Option<Callback<PortalChildProps, Html>>` | -       |
| `container`     | `Option<web_sys::Element>`                 | -       |
| `container_ref` | `Option<NodeRef>`                          | -       |

{{#endtab }}
{{#endtabs }}

## Example

Use the portal primitive.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_portal::Portal;

#[component]
fn Example() -> impl IntoView {
    view! {
        <Portal>Content</Portal>
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_portal::Portal;
use yew::prelude::*;

#[function_component]
fn Example() -> Html {
    html! {
        <Portal>{"Content"}</Portal>
    }
}
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/utilities/portal)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/utilities/portal.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/utilities/accessible-icon.md
# Accessible Icon

Makes icons accessible by adding a label.

## Features

-   Quickly make any icon accessible by wrapping it and providing a meaningful label.
-   No visual difference, but announced correctly by screen readers.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-accessible-icon
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-accessible-icon)
-   [View on docs.rs](https://docs.rs/radix-leptos-accessible-icon/latest/radix_leptos_accessible_icon/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/accessible-icon)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import the component.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_accessible_icon::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <AccessibleIcon />
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Contains the icon to make accessible.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop    | Type             | Default |
| ------- | ---------------- | ------- |
| `label` | `Signal<String>` | -       |

{{#endtab }}
{{#endtabs }}

## Accessibility

Most icons or icon systems come with no accessibility built-in. For example, the same visual **cross** icon may in fact mean **"close"** or **"delete"**.
This component lets you give meaning to icons used throughout your app.

This is built with [Visually Hidden](./visually-hidden.md).

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/utilities/accessible-icon)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/utilities/accessible-icon.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/utilities/direction-provider.md
# Direction Provider

Wraps your app to provide global reading direction.

## Features

-   Enables all primitives to inherit global reading direction.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-direction
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-direction)
-   [View on docs.rs](https://docs.rs/radix-leptos-direction/latest/radix_leptos_direction/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/direction)

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-direction
```

-   [View on crates.io](https://crates.io/crates/radix-yew-direction)
-   [View on docs.rs](https://docs.rs/radix-yew-direction/latest/radix_yew_direction/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/direction)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import the component.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_direction::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <DirectionProvider />
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_direction::*;
use yew::prelude::*;

#[function_component]
fn Anatomy() -> Html {
    html! {
        <DirectionProvider />
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

When creating localized apps that require right-to-left (RTL) reading direction, you need to wrap your application with the `DirectionProvider` component to ensure all of the primitives adjust their behavior based on the `dir` prop.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop  | Type                | Default |
| ----- | ------------------- | ------- |
| `dir` | `Signal<Direction>` | -       |

{{#endtab }}
{{#tab name="Yew" }}

| Prop  | Type        | Default |
| ----- | ----------- | ------- |
| `dir` | `Direction` | -       |

{{#endtab }}
{{#endtabs }}

## Example

Use the direction provider.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_direction::*;

#[component]
fn Example() -> impl IntoView {
    view! {
        <DirectionProvider dir=Direction::Rtl>
            /* your app */
        </DirectionProvider>
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_direction::*;
use yew::prelude::*;

#[function_component]
fn Example() -> Html {
    html! {
        <DirectionProvider dir={Direction::Rtl}>
            /* your app */
        </DirectionProvider>
    }
}
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/utilities/direction-provider)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/utilities/direction-provider.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/utilities/visually-hidden.md
# Visually Hidden

Hides content from the screen in an accessible way.

## Features

-   Visually hides content while preserving it for assistive technology.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-visually-hidden
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-visually-hidden)
-   [View on docs.rs](https://docs.rs/radix-leptos-visually-hidden/latest/radix_leptos_visually_hidden/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/visually-hidden)

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-visually-hidden
```

-   [View on crates.io](https://crates.io/crates/radix-yew-visually-hidden)
-   [View on docs.rs](https://docs.rs/radix-yew-visually-hidden/latest/radix_yew_visually_hidden/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/visually-hidden)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import the component.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_visually_hidden::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <VisuallyHidden />
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_visually_hidden::*;
use yew::prelude::*;

#[function_component]
fn Anatomy() -> Html {
    html! {
        <VisuallyHidden />
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Anything you put inside this component will be hidden from the screen but will be announced by screen readers.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop       | Type              | Default |
| ---------- | ----------------- | ------- |
| `as_child` | `MaybeProp<bool>` | `false` |

{{#endtab }}
{{#tab name="Yew" }}

| Prop       | Type                                               | Default |
| ---------- | -------------------------------------------------- | ------- |
| `as_child` | `Option<Callback<VisuallyHiddenChildProps, Html>>` | -       |

{{#endtab }}
{{#endtabs }}

## Example

Use the visually hidden primitive.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_icons::GearIcon;
use radix_leptos_visually_hidden::*;

#[component]
fn Example() -> impl IntoView {
    view! {
        <button>
            <GearIcon />
            <VisuallyHidden>"Settings"</VisuallyHidden>
        </button>
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_icons::GearIcon;
use radix_yew_visually_hidden::*;
use yew::prelude::*;

#[function_component]
fn Example() -> Html {
    html! {
        <button>
            <GearIcon />
            <VisuallyHidden>{"Settings"}</VisuallyHidden>
        </button>
    }
}
```

{{#endtab }}
{{#endtabs }}

## Accessibility

This is useful in certain scenarios as an alternative to traditional labelling with `aria-label` or `aria-labelledby`.

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/utilities/visually-hidden)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/utilities/visually-hidden.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/label.md
# Label

Renders an accessible label associated with controls.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```toml,trunk
package = "radix-leptos-book-primitives"
features = ["label"]
files = ["src/label.rs"]
```

{{#endtab }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-primitives"
features = ["label"]
files = ["src/label.rs"]
```

{{#endtab }}
{{#endtabs }}

## Features

-   Text selection is prevented when double clicking label.
-   Supports nested controls.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-label
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-label)
-   [View on docs.rs](https://docs.rs/radix-leptos-label/latest/radix_leptos_label/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/label)

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-label
```

-   [View on crates.io](https://crates.io/crates/radix-yew-label)
-   [View on docs.rs](https://docs.rs/radix-yew-label/latest/radix_yew_label/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/label)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import the component.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_label::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <Label />
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_label::*;
use yew::prelude::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <Label />
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Contains the content for the label.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop            | Type                        | Default |
| --------------- | --------------------------- | ------- |
| `as_child`      | `MaybeProp<bool>`           | `false` |
| `on_mouse_down` | `MaybeCallback<MouseEvent>` | -       |

{{#endtab }}
{{#tab name="Yew" }}

| Prop            | Type                                      | Default |
| --------------- | ----------------------------------------- | ------- |
| `as_child`      | `Option<Callback<LabelChildProps, Html>>` | -       |
| `on_mouse_down` | `Option<Callback<MouseEvent>>`            | -       |

{{#endtab }}
{{#endtabs }}

## Accessibility

This component is based on the native `label` element, it will automatically apply the correct labelling when wrapping controls or using the `for` attribute. For your own custom controls to work correctly, ensure they use native elements such as `button` or `input` as a base.

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/components/label)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/label.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/aspect-ratio.md
# Aspect Ratio

Displays content within a desired ratio.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```toml,trunk
package = "radix-leptos-book-primitives"
features = ["aspect-ratio"]
files = ["src/aspect_ratio.rs"]
```

{{#endtab }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-primitives"
features = ["aspect-ratio"]
files = ["src/aspect_ratio.rs"]
```

{{#endtab }}
{{#endtabs }}

## Features

-   Accepts any custom ratio.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-aspect-ratio
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-aspect-ratio)
-   [View on docs.rs](https://docs.rs/radix-leptos-aspect-ratio/latest/radix_leptos_aspect_ratio/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/aspect-ratio)

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-aspect-ratio
```

-   [View on crates.io](https://crates.io/crates/radix-yew-aspect-ratio)
-   [View on docs.rs](https://docs.rs/radix-yew-aspect-ratio/latest/radix_yew_aspect_ratio/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/aspect-ratio)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import the component.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_aspect_ratio::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <AspectRatio />
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_aspect_ratio::*;
use yew::prelude::::*;

#[function_component]
fn Anatomy() -> Html {
    html! {
        <AspectRatio />
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Contains the content you want to constrain to a given ratio.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop       | Type              | Default |
| ---------- | ----------------- | ------- |
| `as_child` | `MaybeProp<bool>` | `false` |
| `ratio`    | `Signal<f64>`     | `1.0`   |

{{#endtab }}
{{#tab name="Yew" }}

| Prop       | Type                                            | Default |
| ---------- | ----------------------------------------------- | ------- |
| `as_child` | `Option<Callback<AspectRatioChildProps, Html>>` | -       |
| `ratio`    | `f64`                                           | `1.0`   |

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/components/aspect-ratio)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/aspect-ratio.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/checkbox.md
# Checkbox

A control that allows the user to toggle between checked and not checked.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

<div class="warning">

This component is not yet updated to Leptos 0.7+.

</div>

<!-- ```toml,trunk
package = "radix-leptos-book-primitives"
features = ["checkbox"]
files = ["src/checkbox.rs"]
``` -->

{{#endtab }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-primitives"
features = ["checkbox"]
files = ["src/checkbox.rs"]
```

{{#endtab }}
{{#endtabs }}

## Features

-   Supports indeterminate state.
-   Full keyboard navigation.
-   Can be controlled or uncontrolled.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-checkbox
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-checkbox)
-   [View on docs.rs](https://docs.rs/radix-leptos-checkbox/latest/radix_leptos_checkbox/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/checkbox)

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-checkbox
```

-   [View on crates.io](https://crates.io/crates/radix-yew-checkbox)
-   [View on docs.rs](https://docs.rs/radix-yew-checkbox/latest/radix_yew_checkbox/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/checkbox)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import all parts and piece them together.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_checkbox::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <Checkbox>
            <CheckboxIndicator />
        </Checkbox>
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_checkbox::*;
use yew::prelude::*;

#[function_component]
fn Anatomy() -> Html {
    html! {
        <Checkbox>
            <CheckboxIndicator />
        </Checkbox>
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Contains all the parts of a checkbox. An `input` will also render when used within a `form` to ensure events propagate correctly.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop                | Type                      | Default |
| ------------------- | ------------------------- | ------- |
| `as_child`          | `MaybeProp<bool>`         | `false` |
| `default_checked`   | `MaybeProp<CheckedState>` | -       |
| `checked`           | `MaybeProp<CheckedState>` | -       |
| `on_checked_change` | `Option<Callback<bool>>`  | -       |
| `disabled`          | `MaybeProp<bool>`         | -       |
| `required`          | `MaybeProp<bool>`         | -       |
| `name`              | `MaybeProp<String>`       | -       |
| `value`             | `MaybeProp<String>`       | `"on"`  |

{{#endtab }}
{{#tab name="Yew" }}

| Prop                | Type                                         | Default |
| ------------------- | -------------------------------------------- | ------- |
| `as_child`          | `Option<Callback<CheckboxChildProps, Html>>` | -       |
| `default_checked`   | `Option<CheckedState>`                       | -       |
| `checked`           | `Option<CheckedState>`                       | -       |
| `on_checked_change` | `Callback<bool>`                             | -       |
| `disabled`          | `Option<bool>`                               | -       |
| `required`          | `Option<bool>`                               | -       |
| `name`              | `Option<String>`                             | -       |
| `value`             | `String`                                     | `"on"`  |

{{#endtab }}
{{#endtabs }}

<div style="height: 1em;"></div>

| Data attribute    | Values                                        |
| ----------------- | --------------------------------------------- |
| `[data-state]`    | `"checked" \| "unchecked" \| "indeterminate"` |
| `[data-disabled]` | Present when disabled                         |

### Indicator

Renders when the checkbox is in a checked or indeterminate state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop          | Type              | Default |
| ------------- | ----------------- | ------- |
| `as_child`    | `MaybeProp<bool>` | `false` |
| `force_mount` | `MaybeProp<bool>` | -       |

{{#endtab }}
{{#tab name="Yew" }}

| Prop          | Type                                              | Default |
| ------------- | ------------------------------------------------- | ------- |
| `as_child`    | `Option<Callback<CheckboxThumbChildProps, Html>>` | -       |
| `force_mount` | `Option<bool>`                                    | -       |

{{#endtab }}
{{#endtabs }}

<div style="height: 1em;"></div>

| Data attribute    | Values                                        |
| ----------------- | --------------------------------------------- |
| `[data-state]`    | `"checked" \| "unchecked" \| "indeterminate"` |
| `[data-disabled]` | Present when disabled                         |

## Examples

### Indeterminate

You can set the checkbox to `CheckedState::Indeterminate` by taking control of its state.

TODO

## Accessibility

Adheres to the [tri-state Checkbox WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/switch/).

### Keyboard Interactions

| Key     | Description                   |
| ------- | ----------------------------- |
| `Space` | Checks/unchecks the checkbox. |

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/components/checkbox)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/checkbox.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/progress.md
# Progress

Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

<div class="warning">

This component is not yet updated to Leptos 0.7+.

</div>

<!-- ```toml,trunk
package = "radix-leptos-book-primitives"
features = ["progress"]
files = ["src/progress.rs"]
``` -->

{{#endtab }}
{{#endtabs }}

## Features

-   Provides context for assistive technology to read the progress of a task.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-progress
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-progress)
-   [View on docs.rs](https://docs.rs/radix-leptos-progress/latest/radix_leptos_progress/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/progress)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import all parts and piece them together.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_progress::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <Progress>
            <ProgressIndicator />
        </Progress>
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Contains all of the progress parts.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop              | Type                                   | Default |
| ----------------- | -------------------------------------- | ------- |
| `as_child`        | `MaybeProp<bool>`                      | `false` |
| `value`           | `MaybeProp<f64>`                       | -       |
| `max`             | `MaybeProp<f64>`                       | `100.0` |
| `get_value_label` | `Option<Callback<(f64, f64), String>>` | -       |

{{#endtab }}
{{#endtabs }}

<div style="height: 1em;"></div>

| Data attribute | Values                                       |
| -------------- | -------------------------------------------- |
| `[data-state]` | `"complete" \| "indeterminate" \| "loading"` |
| `[data-value]` | The current value                            |
| `[data-max]`   | The max value                                |

### Indicator

Used to show the progress visually. It also makes progress accessible to assistive technologies.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop       | Type              | Default |
| ---------- | ----------------- | ------- |
| `as_child` | `MaybeProp<bool>` | `false` |

{{#endtab }}
{{#endtabs }}

<div style="height: 1em;"></div>

| Data attribute | Values                                       |
| -------------- | -------------------------------------------- |
| `[data-state]` | `"complete" \| "indeterminate" \| "loading"` |
| `[data-value]` | The current value                            |
| `[data-max]`   | The max value                                |

## Accessibility

Adheres to the [`progressbar` role requirements](https://www.w3.org/WAI/ARIA/apg/patterns/meter/).

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/components/progress)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/progress.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/select.md
# Select

<div class="warning">

This component is work in progress and not yet available for use.

</div>

Displays a list of options for the user to pick from - triggered by a button.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-primitives"
features = ["select"]
files = ["src/select.rs"]
```

{{#endtab }}
{{#endtabs }}

## Features

-   Can be controlled or uncontrolled.
-   Offers 2 positioning modes.
-   Supports items, labels, groups of items.
-   Focus is fully managed.
-   Full keyboard navigation.
-   Supports custom placeholder.
-   Typeahead support.
-   Supports Right to Left direction.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-select
```

-   [View on crates.io](https://crates.io/crates/radix-yew-select)
-   [View on docs.rs](https://docs.rs/radix-yew-select/latest/radix_yew_select/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/select)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import all parts and piece them together.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_switch::*;
use yew::prelude::*;

#[function_component]
fn Anatomy() -> Html {
    html! {
        <Select>
            <SelectTrigger>
                <SelectValue />
                <SelectIcon />
            </SelectTrigger>

            <SelectPortal>
                <SelectContent>
                    <SelectScrollUpButton />
                    <SelectViewport>
                        <SelectItem>
                            <SelectItemText />
                            <SelectItemIndicator />
                        </SelectItem>

                        <SelectGroup>
                            <SelectLabel />
                            <SelectItem>
                                <SelectItemText />
                                <SelectItemIndicator />
                            </SelectItem>
                        </SelectGroup>

                        <SelectSeparator />
                    </SelectViewport>
                    <SelectScrollDownButton />
                    <SelectArrow />
                </SelectContent>
            </SelectPortal>
        </Select>
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

TODO

## Examples

TODO

## Accessibility

Adheres to the [ListBox WAI-ARIA design pattern](https://www.w3.org/WAI/ARIA/apg/patterns/listbox/).

See the W3C [Select-Only Combobox](https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/) example for more information.

### Keyboard Interactions

| Key         | Description                                                                                                                                |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `Space`     | When focus is on `SelectTrigger`, opens the select and focuses the selected item.<br />When focus is on an item, selects the focused item. |
| `Enter`     | When focus is on `SelectTrigger`, opens the select and focuses the first item.<br />When focus is on an item, selects the focused item.    |
| `ArrowDown` | When focus is on `SelectTrigger`, opens the select.<br />When focus is on an item, moves focus to the next item.                           |
| `ArrowUp`   | When focus is on `SelectTrigger`, opens the select.<br />When focus is on an item, moves focus to the previous item.                       |
| `Esc`       | Closes the select and moves focus to `Select.Trigger`.                                                                                     |

### Labelling

Use the [Label](./label.md) component in order to offer a visual and accessible label for the select.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_label::*;
use radix_yew_switch::*;
use yew::prelude::*;

#[function_component]
fn Labelling() -> Html {
    html! {
        <>
            <Label>
                {"Country"}
                <Select>...</Select>
            </Label>

            // or

            <Label r#for="country">Country</Label>
            <Select>
                <SelectTrigger id="country">...</SelectTrigger>

                <SelectPortal>
                    <SelectContent>...</SelectContent>
                </SelectPortal>
            </Select>
        </>
    }
}
```

{{#endtab }}
{{#endtabs }}

## Custom APIs

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/components/select)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/select.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/README.md
# Components

-   [Aspect Ratio](./aspect-ratio.md)
-   [Avatar](./avatar.md)
-   [Checkbox](./checkbox.md)
-   [Label](./label.md)
-   [Progress](./progress.md)
-   [Select](./select.md)
-   [Separator](./separator.md)
-   [Switch](./switch.md)
-   [Toggle](./toggle.md)
-   [Tooltip](./tooltip.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/toggle.md
# Toggle

A two-state button that can be either on or off.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

<div class="warning">

This component is not yet updated to Leptos 0.7+.

</div>

<!-- ```toml,trunk
package = "radix-leptos-book-primitives"
features = ["toggle"]
files = ["src/toggle.rs"]
``` -->

{{#endtab }}
{{#endtabs }}

## Features

-   Full keyboard navigation.
-   Can be controlled or uncontrolled.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-toggle
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-toggle)
-   [View on docs.rs](https://docs.rs/radix-leptos-toggle/latest/radix_leptos_toggle/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/toggle)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import the component.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_toggle::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <Toggle />
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

The toggle.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop                | Type                     | Default |
| ------------------- | ------------------------ | ------- |
| `as_child`          | `MaybeProp<bool>`        | `false` |
| `default_pressed`   | `MaybeProp<bool>`        | -       |
| `pressed`           | `MaybeProp<bool>`        | -       |
| `on_pressed_change` | `Option<Callback<bool>>` | -       |
| `disabled`          | `MaybeProp<bool>`        | -       |

{{#endtab }}
{{#endtabs }}

<div style="height: 1em;"></div>

| Data attribute    | Values                |
| ----------------- | --------------------- |
| `[data-state]`    | `"on" \| "off"`       |
| `[data-disabled]` | Present when disabled |

## Accessibility

### Keyboard Interactions

| Key     | Description                       |
| ------- | --------------------------------- |
| `Space` | Activates/deactivates the toggle. |
| `Enter` | Activates/deactivates the toggle. |

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/components/toggle)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/toggle.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/separator.md
# Separator

Visually or semantically separates content.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```toml,trunk
package = "radix-leptos-book-primitives"
features = ["separator"]
files = ["src/separator.rs"]
```

{{#endtab }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-primitives"
features = ["separator"]
files = ["src/separator.rs"]
```

{{#endtab }}
{{#endtabs }}

## Features

-   Supports horizontal and vertical orientations.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-separator
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-separator)
-   [View on docs.rs](https://docs.rs/radix-leptos-separator/latest/radix_leptos_separator/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/separator)

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-separator
```

-   [View on crates.io](https://crates.io/crates/radix-yew-separator)
-   [View on docs.rs](https://docs.rs/radix-yew-separator/latest/radix_yew_separator/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/separator)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import the component.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_separator::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <Separator />
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_separator::*;
use yew::prelude::*;

#[component]
fn Anatomy() -> Html {
    html! {
        <Separator />
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

The separator.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop          | Type                     | Default                   |
| ------------- | ------------------------ | ------------------------- |
| `as_child`    | `MaybeProp<bool>`        | `false`                   |
| `orientation` | `MaybeProp<Orientation>` | `Orientation::Horizontal` |
| `decorative`  | `MaybeProp<bool>`        | `false`                   |

{{#endtab }}
{{#tab name="Yew" }}

| Prop          | Type                                          | Default                   |
| ------------- | --------------------------------------------- | ------------------------- |
| `as_child`    | `Option<Callback<SeparatorChildProps, Html>>` | -                         |
| `orientation` | `Orientation`                                 | `Orientation::Horizontal` |
| `decorative`  | `bool`                                        | `false`                   |

{{#endtab }}
{{#endtabs }}

<div style="height: 1em;"></div>

| Data attribute       | Values                       |
| -------------------- | ---------------------------- |
| `[data-orientation]` | `"horizontal" \| "vertical"` |

## Accessibility

Adheres to the [`separator` role requirements](https://www.w3.org/TR/wai-aria-1.2/#separator).

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/components/separator)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/separator.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/switch.md
# Switch

A control that allows the user to toggle between checked and not checked.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

<div class="warning">

This component is not yet updated to Leptos 0.7+.

</div>

<!-- ```toml,trunk
package = "radix-leptos-book-primitives"
features = ["switch"]
files = ["src/switch.rs"]
``` -->

{{#endtab }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-primitives"
features = ["switch"]
files = ["src/switch.rs"]
```

{{#endtab }}
{{#endtabs }}

## Features

-   Full keyboard navigation.
-   Can be controlled or uncontrolled.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-switch
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-switch)
-   [View on docs.rs](https://docs.rs/radix-leptos-switch/latest/radix_leptos_switch/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/switch)

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-switch
```

-   [View on crates.io](https://crates.io/crates/radix-yew-switch)
-   [View on docs.rs](https://docs.rs/radix-yew-switch/latest/radix_yew_switch/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/switch)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import all parts and piece them together.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_switch::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <Switch>
            <SwitchThumb />
        </Switch>
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_switch::*;
use yew::prelude::*;

#[function_component]
fn Anatomy() -> Html {
    html! {
        <Switch>
            <SwitchThumb />
        </Switch>
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Contains all the parts of a switch. An `input` will also render when used within a `form` to ensure events propagate correctly.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop                | Type                     | Default |
| ------------------- | ------------------------ | ------- |
| `as_child`          | `MaybeProp<bool>`        | `false` |
| `default_checked`   | `MaybeProp<bool>`        | -       |
| `checked`           | `MaybeProp<bool>`        | -       |
| `on_checked_change` | `Option<Callback<bool>>` | -       |
| `disabled`          | `MaybeProp<bool>`        | -       |
| `required`          | `MaybeProp<bool>`        | -       |
| `name`              | `MaybeProp<String>`      | -       |
| `value`             | `MaybeProp<String>`      | `"on"`  |

{{#endtab }}
{{#tab name="Yew" }}

| Prop                | Type                                       | Default |
| ------------------- | ------------------------------------------ | ------- |
| `as_child`          | `Option<Callback<SwitchChildProps, Html>>` | -       |
| `default_checked`   | `Option<bool>`                             | -       |
| `checked`           | `Option<bool>`                             | -       |
| `on_checked_change` | `Callback<bool>`                           | -       |
| `disabled`          | `Option<bool>`                             | -       |
| `required`          | `Option<bool>`                             | -       |
| `name`              | `Option<String>`                           | -       |
| `value`             | `String`                                   | `"on"`  |

{{#endtab }}
{{#endtabs }}

<div style="height: 1em;"></div>

| Data attribute    | Values                     |
| ----------------- | -------------------------- |
| `[data-state]`    | `"checked" \| "unchecked"` |
| `[data-disabled]` | Present when disabled      |

### Thumb

The thumb that is used to visually indicate whether the switch is on or off.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop       | Type              | Default |
| ---------- | ----------------- | ------- |
| `as_child` | `MaybeProp<bool>` | `false` |

{{#endtab }}
{{#tab name="Yew" }}

| Prop       | Type                                            | Default |
| ---------- | ----------------------------------------------- | ------- |
| `as_child` | `Option<Callback<SwitchThumbChildProps, Html>>` | -       |

{{#endtab }}
{{#endtabs }}

<div style="height: 1em;"></div>

| Data attribute    | Values                     |
| ----------------- | -------------------------- |
| `[data-state]`    | `"checked" \| "unchecked"` |
| `[data-disabled]` | Present when disabled      |

## Accessibility

Adheres to the [`switch` role requirements](https://www.w3.org/WAI/ARIA/apg/patterns/switch/).

### Keyboard Interactions

| Key     | Description                    |
| ------- | ------------------------------ |
| `Space` | Toggles the component's state. |
| `Enter` | Toggles the component's state. |

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/components/switch)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/switch.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/avatar.md
# Avatar

An image element with a fallback for representing the user.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

<div class="warning">

This component is not yet updated to Leptos 0.7+.

</div>

<!-- ```toml,trunk
package = "radix-leptos-book-primitives"
features = ["avatar"]
files = ["src/avatar.rs"]
``` -->

{{#endtab }}

{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-primitives"
features = ["avatar"]
files = ["src/avatar.rs"]
```

{{#endtab }}
{{#endtabs }}

## Features

-   Automatic and manual control over when the image renders.
-   Fallback part accepts any children.
-   Optionally delay fallback rendering to avoid content flashing.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-avatar
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-avatar)
-   [View on docs.rs](https://docs.rs/radix-leptos-avatar/latest/radix_leptos_avatar/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/leptos/avatar)

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-avatar
```

-   [View on crates.io](https://crates.io/crates/radix-yew-avatar)
-   [View on docs.rs](https://docs.rs/radix-yew-avatar/latest/radix_yew_avatar/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/avatar)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import all parts and piece them together.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_avatar::*;

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <Avatar>
            <AvatarImage />
            <AvatarFallback />
        </Avatar>
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_avatar::*;
use yew::prelude::*;

#[function_component]
fn Anatomy() -> Html {
    html! {
        <Avatar>
            <AvatarImage />
            <AvatarFallback />
        </Avatar>
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Contains all the parts of an avatar.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop       | Type              | Default |
| ---------- | ----------------- | ------- |
| `as_child` | `MaybeProp<bool>` | `false` |

{{#endtab }}
{{#tab name="Yew" }}

| Prop       | Type                                       | Default |
| ---------- | ------------------------------------------ | ------- |
| `as_child` | `Option<Callback<AvatarChildProps, Html>>` | -       |

{{#endtab }}
{{#endtabs }}

### Image

The image to render. By default it will only render when it has loaded. You can use the `on_loading_status_change` handler if you need more control.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop                       | Type                                   | Default |
| -------------------------- | -------------------------------------- | ------- |
| `as_child`                 | `MaybeProp<bool>`                      | `false` |
| `on_loading_status_change` | `Option<Callback<ImageLoadingStatus>>` | -       |

{{#endtab }}
{{#tab name="Yew" }}

| Prop                       | Type                                            | Default |
| -------------------------- | ----------------------------------------------- | ------- |
| `as_child`                 | `Option<Callback<AvatarImageChildProps, Html>>` | -       |
| `on_loading_status_change` | `Callback<ImageLoadingStatus>`                  | -       |

{{#endtab }}
{{#endtabs }}

### Fallback

An element that renders when the image hasn't loaded. This means whilst it's loading, or if there was an error. If you notice a flash during loading, you can provide a `delay_ms` prop to delay its rendering so it only renders for those with slower connections. For more control, use the `on_loading_status_change` handler on `AvatarImage`.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

| Prop       | Type              | Default |
| ---------- | ----------------- | ------- |
| `as_child` | `MaybeProp<bool>` | `false` |
| `delay_ms` | `MaybeProp<i32>`  | -       |

{{#endtab }}
{{#tab name="Yew" }}

| Prop       | Type                                               | Default |
| ---------- | -------------------------------------------------- | ------- |
| `as_child` | `Option<Callback<AvatarFallbackChildProps, Html>>` | -       |
| `delay_ms` | `Option<i32>`                                      | -       |

{{#endtab }}
{{#endtabs }}

## Examples

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/components/avatar)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/avatar.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/tooltip.md
# Tooltip

A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-primitives"
features = ["tooltip"]
files = ["src/tooltip.rs"]
```

{{#endtab }}
{{#endtabs }}

## Features

-   Provider to control display delay globally.
-   Opens when the trigger is focused or hovered.
-   Closes when the trigger is activated or when pressing escape.
-   Supports custom timings.

## Installation

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-tooltip
```

-   [View on crates.io](https://crates.io/crates/radix-yew-tooltip)
-   [View on docs.rs](https://docs.rs/radix-yew-tooltip/latest/radix_yew_tooltip/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/primitives/yew/tooltip)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import all parts and piece them together.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_tooltip::*;
use yew::prelude::*;

#[component]
fn Anatomy() -> Html {
    html! {
        <TooltipProvider>
            <Tooltip>
                <TooltipTrigger />
                <TooltipPortal>
                    <TooltipContent>
                        <TooltipArrow />
                    </TooltipContent>
                </TooltipPortal>
            </Tooltip>
        </TooltipProvider>
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Provider

Wraps your app to provide global functionality to your tooltips.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop                        | Type           | Default |
| --------------------------- | -------------- | ------- |
| `delay_duration`            | `i32`          | `700`   |
| `skip_delay_duration`       | `i32`          | `300`   |
| `disable_hoverable_content` | `Option<bool>` | -       |

{{#endtab }}
{{#endtabs }}

### Root

Contains all the parts of a tooltip.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop                        | Type             | Default |
| --------------------------- | ---------------- | ------- |
| `default_open`              | `Option<bool>`   | -       |
| `open`                      | `Option<bool>`   | -       |
| `on_open_change`            | `Callback<bool>` | -       |
| `delay_duration`            | `Option<i32>`    | -       |
| `disable_hoverable_content` | `Option<bool>`   | -       |

{{#endtab }}
{{#endtabs }}

### Trigger

The button that toggles the tooltip. By default, the `TooltipContent` will position itself against the trigger.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop       | Type                                       | Default |
| ---------- | ------------------------------------------ | ------- |
| `as_child` | `Callback<TooltipTriggerChildProps, Html>` | -       |

{{#endtab }}
{{#endtabs }}

<div style="height: 1em;"></div>

| Data attribute | Values                                         |
| -------------- | ---------------------------------------------- |
| `[data-state]` | `"closed" \| "delayed-open" \| "instant-open"` |

### Portal

When used, portals the content part into the `body`.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                       | Default |
| --------------- | -------------------------- | ------- |
| `force_mount`   | `Option<bool>`             | -       |
| `container`     | `Option<web_sys::Element>` | -       |
| `container_ref` | `Option<NodeRef>`          | -       |

{{#endtab }}
{{#endtabs }}

### Content

The component that pops out when the tooltip is open.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop                      | Type                                               | Default             |
| ------------------------- | -------------------------------------------------- | ------------------- |
| `as_child`                | `Option<Callback<TooltipContentChildProps, Html>>` | -                   |
| `on_escape_key_down`      | `Callback<KeyboardEvent>`                          | -                   |
| `on_pointer_down_outside` | `Callback<PointerDownOutsideEvent>`                | -                   |
| `force_mount`             | `Option<bool>`                                     | -                   |
| `side`                    | `Side`                                             | `Side::Top`         |
| `side_offset`             | `f64`                                              | `0.0`               |
| `align`                   | `Align`                                            | `Align::Center`     |
| `align_offset`            | `f64`                                              | `0.0`               |
| `avoid_collisions`        | `bool`                                             | `true`              |
| `collision_boundary`      | `Vec<web_sys::Element>`                            | `vec![]`            |
| `collision_padding`       | `Padding`                                          | `Padding::All(0.0)` |
| `sticky`                  | `Sticky`                                           | `Sticky::Partial`   |
| `hide_when_detatched`     | `bool`                                             | `false`             |

{{#endtab }}
{{#endtabs }}

<div style="height: 1em;"></div>

| Data attribute | Values                                         |
| -------------- | ---------------------------------------------- |
| `[data-state]` | `"closed" \| "delayed-open" \| "instant-open"` |
| `[data-side]`  | `"left" \| "right" \| "bottom" \| "top"`       |
| `[data-align]` | `"start" \| "end" \| "center"`                 |

<div style="height: 1em;"></div>

| CSS Variable                               | Description                                                                   |
| ------------------------------------------ | ----------------------------------------------------------------------------- |
| `--radix-tooltip-content-transform-origin` | The `transform-origin` computed from the content and arrow positions/offsets. |
| `--radix-tooltip-content-available-width`  | The remaining width between the trigger and the boundary edge.                |
| `--radix-tooltip-content-available-height` | The remaining height between the trigger and the boundary edge.               |
| `--radix-tooltip-trigger-width`            | The width of the trigger.                                                     |
| `--radix-tooltip-trigger-height`           | The height of the trigger.                                                    |

### Arrow

An optional arrow element to render alongside the tooltip. This can be used to help visually link the trigger with the `TooltipContent`. Must be rendered inside `TooltipContent`.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop       | Type                                             | Default |
| ---------- | ------------------------------------------------ | ------- |
| `as_child` | `Option<Callback<TooltipArrowChildProps, Html>>` | -       |
| `width`    | `f64`                                            | `10.0`  |
| `height`   | `f64`                                            | `5.0`   |

{{#endtab }}
{{#endtabs }}

## Examples

TODO

## Accessibility

### Keyboard Interactions

| Key      | Description                                |
| -------- | ------------------------------------------ |
| `Tab`    | Opens/closes the tooltip without delay.    |
| `Space`  | If open, closes the tooltip without delay. |
| `Enter`  | If open, closes the tooltip without delay. |
| `Escape` | If open, closes the tooltip without delay. |

## Custom APIs

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/components/tooltip)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/components/tooltip.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/guides/animation.md
# Animation

Animate Radix Primitives with CSS keyframes or the Rust animation library of your choice.

Adding animation to Radix Primitives should feel similar to any other component, but there are some caveats noted here in regards to exiting animations with Rust animation libraries.

## Animating with CSS Animation

The simplest way to animate Primitives is with CSS.

You can use CSS animation to animate both mount and unmount phases. The latter is possible because the Radix Primitives will suspend unmount while your animation plays out.

```css
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

@keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}

.DialogOverlay[data-state='open'],
.DialogContent[data-state='open'] {
    animation: fadeIn 300ms ease-out;
}

.DialogOverlay[data-state='closed'],
.DialogContent[data-state='closed'] {
    animation: fadeOut 300ms ease-in;
}
```

## Delegating Unmounting for Rust Animation

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/guides/animation)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/guides/animation.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/guides/composition.md
# Composition

Use the `as_child` prop to compose Radix's functionality onto alternative element types or your own components.

<!-- TODO: All Radix primitive parts that render a DOM element accept an `as_child` prop. When `as_child` is set to true, Radix will not render a default DOM element, instead cloning the part's child and passing it the props and behavior required to make it functional. -->

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/guides/composition)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/guides/composition.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/guides/README.md
# Guides

-   [Styling](./styling.md)
-   [Animation](./animation.md)
-   [Composition](./composition.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/guides/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/guides/styling.md
# Styling

Radix Primitives are unstyled - and compatible with any styling solution - giving you complete control over styling.

## Styling Overview

### Functional Styles

You are in control of all aspects of styling, including functional styles. For example - by default - a [Dialog Overlay](../components/dialog.md) won't cover the entire viewport. You're responsible for adding those styles, plus any presentation styles.

### Classes

All components and their parts accept a `class` prop. This class will be passed through to the DOM element. You can use it in CSS as expected.

### Data Attributes

When components are stateful, their state will be exposed in a `data-state` attribute. For example, when an [Accordion Item](../components/accordion.md) is opened, it includes a `data-state="open"` attribute.

## Styling with CSS

### Styling a Part

You can style a component part by targeting the `class` that you provide.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_accordion::*;

#[component]
fn AccordionDemo() -> impl IntoView {
    view! {
        <Accordion>
            <AccordionItem class="AccordionItem" value="item-1" />
            /* ... */
        </Accordion>
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_accordion::*;
use yew::prelude::*;

#[function_component]
fn AccordionDemo() -> Html {
    html! {
        <Accordion>
            <AccordionItem class="AccordionItem" value="item-1" />
            /* ... */
        </Accordion>
    }
}
```

{{#endtab }}
{{#endtabs }}

### Styling a State

You can style a component state by targeting its `data-state` attribute.

```css
.AccordionItem {
    border-bottom: 1px solid gainsboro;
}

.AccordionItem[data-state='open'] {
    border-bottom-width: 2px;
}
```

## Styling with CSS-in-Rust

TODO

## Extending a Primitive

Extending a primitive is done the same way you extend any component.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
// TODO
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
// TODO
```

{{#endtab }}
{{#endtabs }}

## Summary

Radix Primitives were designed to encapsulate accessibility concerns and other complex functionalities, while ensuring you retain complete control over styling.

For convenience, stateful components include a `data-state` attribute.

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/guides/styling)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/guides/styling.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/overview/accessibility.md
# Accessibility

Radix Primitives follow the WAI-ARIA authoring practices guidelines and are tested in a wide selection of modern browsers and commonly used assistive technologies.

It takes care of many of the difficult implementation details related to accessibility, including aria and role attributes, focus management, and keyboard navigation. That means that users should be able to use the components as-is in most contexts and rely on functionality to follow the expected accessibility design patterns.

## WAI-ARIA

[WAI-ARIA](https://www.w3.org/TR/wai-aria-1.2/), published and maintained by the W3C, specifies the semantics for many common UI patterns that show up in Radix Primitives. This is designed to provide meaning for controls that aren't built using elements provided by the browser. For example, if you use a `div` instead of a `button` element to create a button, there are attributes you need to add to the `div` in order to convey that it's a button for screen readers or voice recognition tools.

In addition to semantics, there are behaviors that are expected from different types of components. A `button` element is going to respond to certain interactions in ways that a `div` will not, so it's up to the developer to reimplement those interactions. The [WAI-ARIA authoring practices](https://www.w3.org/WAI/ARIA/apg/) provide additional guidance for implementing behaviors for various controls that come with Radix Primitives.

## Accessible Labels

With many built-in form controls, the native HTML `label` element is designed to provide semantic meaning and context for corresponding `input` elements. For non-form control elements, or for custom controls like those provided by Radix Primitives, [WAI-ARIA provides a specification](https://www.w3.org/TR/wai-aria-1.2/#namecalculation) for how to provide accessible names and descriptions to those controls.

Where possible, Radix Primitives include abstractions to make labelling the controls simple. The [Label](../components/label.md) primitive is designed to work with many of the controls. Ultimately it's up to you to provide those labels so that users have the proper context when navigating your application.

## Keyboard Navigation

Many complex components, like [Tabs](../components/tabs.md) and [Dialog](../components/dialog.md), come with expectations from users on how to interact with their content using a keyboard or other non-mouse input modalities. Radix Primitives provide basic keyboard support in accordance with the [WAI-ARIA authoring practices](https://www.w3.org/WAI/ARIA/apg/).

## Focus Mangement

Proper keyboard navigation and good labelling often go hand-in-hand with managing focus. When a user interacts with an element and something changes as a result, it's often helpful to move focus with the interaction so that the next tab stop is logical depending on the new context of the app. And for screen reader users, moving focus often results in an announcement to convey this new context, which relies on proper labelling.

In many Radix Primitives, the focus moves based on the interactions a user normally takes in a given component. For example, in [AlertDialog](../components/alert-dialog.md), when the modal is opened, focus is programatically moved to a `Cancel` button element to anticipate a response to the prompt.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/overview/accessibility.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/overview/introduction.md
# Introduction

An open-source UI component library for building high-quality, accessible design systems and web apps.

Radix Primitives is a low-level UI component library with a focus on accessibility, customization and developer experience. You can use these components either as the base layer of your design system, or adopt them incrementally.

## Vision

Most of us share similar definitions for common UI patterns like accordion, checkbox, combobox, dialog, dropdown, select, slider, and tooltip. These UI patterns are [documented by WAI-ARIA](https://www.w3.org/WAI/ARIA/apg/#aria_ex). and generally understood by the community.

However, the implementations provided to us by the web platform are inadequate. They're either non-existent, lacking in functionality, or cannot be customized sufficiently.

So, developers are forced to build custom components; an incredibly difficult task. As a result, most components on the web are inaccessible, non-performant, and lacking important features.

The goal of Radix Primitives is to create an open-source component library that the community can use to build accessible design systems.

## Key Features

### Accessible

Components adhere to the [WAI-ARIA design patterns](https://www.w3.org/WAI/ARIA/apg/) where possible. It handles many of the difficult implementation details related to accessibility, including aria and role attributes, focus management, and keyboard navigation. Learn more in the [accessibility](./accessibility.md) overview.

### Unstyled

Components ship with zero styles, giving you complete control over styling. Components can be styled with any styling solution (vanilla CSS, CSS preprocessors, CSS-in-Rust libraries). Learn more in the [styling](../guides/styling.md) guide.

### Opened

Radix Primitives are designed to be customized to suit your needs. The open component architecture provides you granular access to each component part, so you can wrap them and add your own event listeners, props, or refs.

### Uncontrolled

Where applicable, components are uncontrolled by default but can also be controlled, alternatively. All of the behavior wiring is handled internally, so you can get up and running as smoothly as possible, without needing to create any local states.

### Developer Experience

One of the main goals is to provide the best possible developer experience. Radix Primitives provides a fully-typed API. All components share a similar API, creating a consistent and predictable experience. They also implement an `as_child` prop, giving users full control over the rendered element.

### Incremental Adoption

Each primitive can be installed individually so you can adopt them incrementally.

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/overview/introduction)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/overview/introduction.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/overview/getting-started.md
# Getting Started

A quick tutorial to get you up and running with Rust Radix Primitives.

## Implementing a Popover

In this quick tutorial, we will install and style the [Popover](../components/popover.md) component.

### 1. Install the primtive

Install the component from your command line.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-popover
```

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-popover
```

{{#endtab }}
{{#endtabs }}

### 2. Import the parts

Import and structure the parts.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_popover::*;

#[component]
fn PopoverDemo() -> impl IntoView {
    view! {
        <Popover>
            <PopoverTrigger>More info</PopoverTrigger>
            <PopoverPortal>
                <PopoverContent>
                    Some more info...
                    <PopoverArrow />
                </PopoverContent>
            </PopoverPortal>
        </Popover>
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_popover::*;
use yew::prelude::*;

#[function_component]
fn PopoverDemo() -> Html {
    html! {
        <Popover>
            <PopoverTrigger class="PopoverTrigger">{"More info"}</PopoverTrigger>
            <PopoverPortal>
                <PopoverContent class="PopoverContent">
                    {"Some more info..."}
                    <PopoverArrow />
                </PopoverContent class="PopoverArrow">
            </PopoverPortal>
        </Popover>
    }
}
```

{{#endtab }}
{{#endtabs }}

### 3. Add your styles

Add styles where desired.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
// TODO
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_popover::*;
use yew::prelude::*;

#[function_component]
fn PopoverDemo() -> Html {
    html! {
        <Popover>
            <PopoverTrigger class="PopoverTrigger">{"More info"}</PopoverTrigger>
            <PopoverPortal>
                <PopoverContent class="PopoverContent">
                    {"Some more info..."}
                    <PopoverArrow class="PopoverArrow" />
                </PopoverContent>
            </PopoverPortal>
        </Popover>
    }
}
```

{{#endtab }}
{{#endtabs }}

```css
.PopoverTrigger {
    background-color: white;
    border-radius: 4px;
}

.PopoverContent {
    border-radius: 4px;
    padding: 20px;
    width: 260px;
    background-color: white;
}

.PopoverArrow {
    fill: white;
}
```

### Demo

Here's a complete demo.

TODO

## Summary

The steps above outline briefly what's involved in using a Rust Radix Primitive in your application.

These components are low-level enough to give you control over how you want to wrap them. You're free to introduce your own high-level API to better suit the needs of your team and product.

In a few simple steps, we've implemented a fully accessible Popover component, without having to worry about many of its complexities.

-   Adheres to [WAI-ARIA](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/) design pattern.
-   Can be controlled or uncontrolled.
-   Customize side, alignment, offsets, collision handling.
-   Optionally render a pointing arrow.
-   Focus is fully managed and customizable.
-   Dismissing and layering behavior is highly customizable.

## See Also

-   [Radix documentation](https://www.radix-ui.com/primitives/docs/overview/getting-started)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/overview/getting-started.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/overview/README.md
# Overview

-   [Introduction](./introduction.md)
-   [Getting Started](./getting-started.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/primitives/overview/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/colors/README.md
# Colors

## Installation

Install the colors from your command line.

```shell
cargo add radix-colors
```

-   [View on crates.io](https://crates.io/crates/radix-colors)
-   [View on docs.rs](https://docs.rs/radix-colors/latest/radix_colors/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/colors)

TODO

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/colors/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/icons/README.md
# Icons

A crisp set of 15×15 icons. All icons are available as individual components.

{{#tabs global="framework" }}
{{#tab name="Dioxus" }}

```toml,trunk
package = "radix-dioxus-book-icons"
features = ["icons"]
files = ["src/icons.rs"]
```

{{#endtab }}
{{#tab name="Leptos" }}

```toml,trunk
package = "radix-leptos-book-icons"
features = ["icons"]
files = ["src/icons.rs"]
```

{{#endtab }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-icons"
features = ["icons"]
files = ["src/icons.rs"]
```

{{#endtab }}
{{#endtabs }}

## Installation

Install the icons from your command line.

{{#tabs global="framework" }}
{{#tab name="Dioxus" }}

```shell
cargo add radix-dioxus-icons
```

-   [View on crates.io](https://crates.io/crates/radix-dioxus-icons)
-   [View on docs.rs](https://docs.rs/radix-dioxus-icons/latest/radix_dioxus_icons/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/icons/dioxus)

{{#endtab }}
{{#tab name="Leptos" }}

```shell
cargo add radix-leptos-icons
```

-   [View on crates.io](https://crates.io/crates/radix-leptos-icons)
-   [View on docs.rs](https://docs.rs/radix-leptos-icons/latest/radix_leptos_icons/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/icons/leptos)

{{#endtab }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-icons
```

-   [View on crates.io](https://crates.io/crates/radix-yew-icons)
-   [View on docs.rs](https://docs.rs/radix-yew-icons/latest/radix_yew_icons/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/icons/yew)

{{#endtab }}
{{#endtabs }}

## Anatomy

Import the icons.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use dioxus::prelude::*;
use radix_dioxus_icons::{FaceIcon, ImageIcon, SunIcon};

#[component]
fn App() -> Element {
    rsx! {
        FaceIcon {}
        ImageIcon {}
        SunIcon {}
    }
}
```

{{#endtab }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_icons::{FaceIcon, ImageIcon, SunIcon};

#[component]
fn Anatomy() -> impl IntoView {
    view! {
        <FaceIcon />
        <SunIcon />
        <ImageIcon />
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use yew::prelude::*;
use radix_yew_icons::{FaceIcon, ImageIcon, SunIcon};

#[function_component]
fn Anatomy() -> Html {
    html! {
        <>
            <FaceIcon />
            <SunIcon />
            <ImageIcon />
        </>
    }
}
```

{{#endtab }}
{{#endtabs }}

## API Reference

{{#tabs global="framework" }}
{{#tab name="Dioxus" }}

| Prop     | Type     | Default          |
| -------- | -------- | ---------------- |
| `width`  | `usize`  | `15`             |
| `height` | `usize`  | `15`             |
| `color`  | `String` | `"currentColor"` |

{{#endtab }}
{{#tab name="Leptos" }}

| Prop     | Type             | Default          |
| -------- | ---------------- | ---------------- |
| `width`  | `Signal<usize>`  | `15`             |
| `height` | `Signal<usize>`  | `15`             |
| `color`  | `Signal<String>` | `"currentColor"` |

{{#endtab }}
{{#tab name="Yew" }}

| Prop     | Type        | Default          |
| -------- | ----------- | ---------------- |
| `width`  | `usize`     | `15`             |
| `height` | `usize`     | `15`             |
| `color`  | `AttrValue` | `"currentColor"` |

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/icons)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/icons/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/README.md
# Themes

-   [Overview](./overview)
-   [Theme](./theme)
-   [Layout](./layout)
-   [Typography](./typography)
-   [Components](./components)
-   [Utilities](./utilities)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/container.md
# Container

Constrains the maximum width of page content.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["container"]
files = ["src/container/container.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/container)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/container.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/flex.md
# Flex

Component for creating flex layouts.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["flex"]
files = ["src/flex/flex.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/flex)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/flex.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/README.md
# Layout

-   [Box](./box.md)
-   [Flex](./flex.md)
-   [Grid](./grid.md)
-   [Container](./container.md)
-   [Section](./section.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/box.md
# Box

Fundamental layout building block.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["box"]
files = ["src/box/box.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/box)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/box.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/grid.md
# Grid

Component for creating grid layouts.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["grid"]
files = ["src/grid/grid.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

TODO

## Examples

### Responsive

All props marked `Responsive`, such as `columns` and `rows` accept a [breakpoint values](../theme/breakpoints.md). For example, the following grid starts with 1 column, and uses 2 columns from the medium breakpoint.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["grid"]
files = ["src/grid/grid_responsive.rs"]
show_files = true
url_fragment = "#/responsive"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/grid)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/grid.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/section.md
# Section

Denotes a section of page content.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["section"]
files = ["src/section/section.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/section)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/layout/section.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/utilities/README.md
# Utilities

-   [Theme](./theme.md)
-   [Visually Hidden](./visually-hidden.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/utilities/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/utilities/portal.md
# Portal

Renders a subtree in a different part of the DOM.

## API Reference

This component inherits all props and functionality from the [Portalen primitive](../../primitives/utilities/portal.md) utility.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/utilities/portal.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/utilities/theme.md
# Theme

Wraps all or part of a component tree to provide theme configuration.

## API Reference

TODO

## Examples

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/theme)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/utilities/theme.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/utilities/visually-hidden.md
# Visually Hidden

Hides content from the screen in an accessible way.

## API Reference

This component inherits all props and functionality from the [Visually Hidden primitive](../../primitives/utilities/visually-hidden.md) utility.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/utilities/visually-hidden.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/text-area.md
# Text Area

Captures multi-line user input.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-area"]
files = ["src/text_area/text_area.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `textarea` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop      | Type                         | Default                     |
| --------- | ---------------------------- | --------------------------- |
| `size`    | `Responsive<1..3>`           | `2`                         |
| `variant` | `TextFieldVariant`           | `TextFieldVariant::Surface` |
| `resize`  | `Responsive<TextAreaResize>` | -                           |
| `color`   | `Option<AccentColor>`        | -                           |
| `radius`  | `Option<Radius>`             | -                           |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-area"]
files = ["src/text_area/text_area_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-area"]
files = ["src/text_area/text_area_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-area"]
files = ["src/text_area/text_area_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### Radius

Use the `radius` prop to assign a specific radius value.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-area"]
files = ["src/text_area/text_area_radius.rs"]
show_files = true
url_fragment = "#/radius"
```

{{#endtab }}
{{#endtabs }}

### Radius

Use the `resize` prop to enable resizing on one or both axis.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-area"]
files = ["src/text_area/text_area_resize.rs"]
show_files = true
url_fragment = "#/resize"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/text-area)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/text-area.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/radio.md
# Radio

Standalone radio button that can be used in any layout.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["radio"]
files = ["src/radio/radio.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component inherits props from the [Radio Group primitive](../../primitives/components/radio-group.md) element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                  | Default                 |
| --------------- | --------------------- | ----------------------- |
| `size`          | `Responsive<1..3>`    | `2`                     |
| `variant`       | `RadioVariant`        | `RadioVariant::Surface` |
| `color`         | `Option<AccentColor>` | -                       |
| `high_contrast` | `Option<bool>`        | -                       |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the radio button size.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["radio"]
files = ["src/radio/radio_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style of the radio buttons.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["radio"]
files = ["src/radio/radio_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["radio"]
files = ["src/radio/radio_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["radio"]
files = ["src/radio/radio_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### Alignment

Composing `Radio` within `Text` automatically centers it with the first line of text. It is automatically well-aligned with multi-line text too.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["radio"]
files = ["src/radio/radio_alignment.rs"]
show_files = true
url_fragment = "#/alignment"
```

{{#endtab }}
{{#endtabs }}

### Disabled

Use the native `disabled` attribute to create a disabled radio button.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["radio"]
files = ["src/radio/radio_disabled.rs"]
show_files = true
url_fragment = "#/disabled"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/radio)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/radio.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/card.md
# Card

Container that groups related content and actions.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["card"]
files = ["src/card/card.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `div` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop       | Type                               | Default                |
| ---------- | ---------------------------------- | ---------------------- |
| `as_child` | `Option<Callback<CardChildProps>>` | -                      |
| `size`     | `Responsive<1..5>`                 | `1`                    |
| `variant`  | `CardVariant`                      | `CardVariant::Surface` |

{{#endtab }}
{{#endtabs }}

## Examples

### As Another Element

Use the `as_child` prop to render the card as a link or a button. This prop adds styles for the interactive states, like hover and focus.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["card"]
files = ["src/card/card_as_another_element.rs"]
show_files = true
url_fragment = "#/as-another-element"
```

{{#endtab }}
{{#endtabs }}

### Size

Use the `size` prop to control the size.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["card"]
files = ["src/card/card_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["card"]
files = ["src/card/card_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

### With Inset Content

Use the [Inset](./inset.md) component to align content flush with the sides of the card.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["card"]
files = ["src/card/card_with_inset_content.rs"]
show_files = true
url_fragment = "#/with-inset-content"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/card)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/card.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/aspect-ratio.md
# Aspect Ratio

Displays content within a desired ratio.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["aspect-ratio"]
files = ["src/aspect_ratio/aspect_ratio.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component inherits props from the [Aspect Ratio primitive](../../primitives/components/aspect-ratio.md).

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/aspect-ratio.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/button.md
# Button

Trigger an action or event, such as submitting a form or displaying a dialog.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["button"]
files = ["src/button/button.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `button` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                                 | Default                |
| --------------- | ------------------------------------ | ---------------------- |
| `as_child`      | `Option<Callback<ButtonChildProps>>` | -                      |
| `size`          | `Responsive<1..4>`                   | `2`                    |
| `variant`       | `ButtonVariant`                      | `ButtonVariant::Solid` |
| `color`         | `Option<AccentColor>`                | -                      |
| `high_contrast` | `Option<bool>`                       | -                      |
| `radius`        | `Option<Radius>`                     | -                      |
| `loading`       | `bool`                               | `false`                |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size of the button.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["button"]
files = ["src/button/button_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style of the button.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["button"]
files = ["src/button/button_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

#### Ghost

Use the `ghost` variant to display a button without chrome. Ghost buttons behave like text in layout, as they use a negative margin to optically align themselves against their siblings while maintaining the padding in active and hover states.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["button"]
files = ["src/button/button_variant_ghost.rs"]
show_files = true
url_fragment = "#/variant-ghost"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["button"]
files = ["src/button/button_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["button"]
files = ["src/button/button_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### Radius

Use the `radius` prop to assign a specific radius value.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["button"]
files = ["src/button/button_radius.rs"]
show_files = true
url_fragment = "#/radius"
```

{{#endtab }}
{{#endtabs }}

### With Icons

You can nest icons directly inside the button. An appropriate gap is provided automatically.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["button"]
files = ["src/button/button_with_icons.rs"]
show_files = true
url_fragment = "#/with-icons"
```

{{#endtab }}
{{#endtabs }}

### Loading

Use the `loading` prop to display a loading spinner in place of button content, preserving the original size of the button in its normal state. The button will be disabled while loading.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["button"]
files = ["src/button/button_loading.rs"]
show_files = true
url_fragment = "#/loading"
```

{{#endtab }}
{{#endtabs }}

If you have an icon inside the button, you can use the button's `disabled` state and wrap the icon in a standalone [Spinner](./spinner.md) to achieve a more sophisticated design.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["button"]
files = ["src/button/button_loading_spinner.rs"]
show_files = true
url_fragment = "#/loading-spinner"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/button)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/button.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/checkbox.md
# Checkbox

Base input element to toggle an option on and off.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["checkbox"]
files = ["src/checkbox/checkbox.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component inherits props from the [Checkbox primitive](../../primitives/components/checkbox.md) and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                  | Default                    |
| --------------- | --------------------- | -------------------------- |
| `size`          | `Responsive<1..3>`    | `2`                        |
| `variant`       | `CheckboxVariant`     | `CheckboxVariant::Surface` |
| `color`         | `Option<AccentColor>` | -                          |
| `high_contrast` | `Option<bool>`        | -                          |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size of the checkbox.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["checkbox"]
files = ["src/checkbox/checkbox_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style of the checkbox.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["checkbox"]
files = ["src/checkbox/checkbox_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["checkbox"]
files = ["src/checkbox/checkbox_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast in light mode.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["checkbox"]
files = ["src/checkbox/checkbox_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### Alignment

Composing `Checkbox` within `Text` automatically centers it with the first line of text.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["checkbox"]
files = ["src/checkbox/checkbox_alignment.rs"]
show_files = true
url_fragment = "#/alignment"
```

{{#endtab }}
{{#endtabs }}

It is automatically well-aligned with multi-line text too.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["checkbox"]
files = ["src/checkbox/checkbox_alignment_multi_line.rs"]
show_files = true
url_fragment = "#/alignment-multi-line"
```

{{#endtab }}
{{#endtabs }}

### Disabled

Use the native `disabled` attribute to create a disabled checkbox.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["checkbox"]
files = ["src/checkbox/checkbox_disabled.rs"]
show_files = true
url_fragment = "#/disabled"
```

{{#endtab }}
{{#endtabs }}

### Indeterminate

Use the `CheckedState::Indeterminate` value to create an indeterminate checkbox.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["checkbox"]
files = ["src/checkbox/checkbox_indeterminate.rs"]
show_files = true
url_fragment = "#/indeterminate"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/checkbox)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/checkbox.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/select.md
# Select

Displays a list of options for the user to pick from - triggered by a button.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["select"]
files = ["src/select/select.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

TODO

## Examples

### Size

TODO

### Variant

TODO

### Color

TODO

### High-Contrast

TODO

### Radius

TODO

### Placeholder

TODO

### Position

TODO

### With SSR

TODO

### With an Icon

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/select)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/select.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/table.md
# Table

Semantic table element for presenting data.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["table"]
files = ["src/table/table.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Groups the `Header` and `Body` parts. This component is based on the `table` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop      | Type                              | Default               |
| --------- | --------------------------------- | --------------------- |
| `size`    | `Responsive<1..3>`                | `1`                   |
| `variant` | `TableVariant`                    | `TableVariant::Ghost` |
| `layout`  | `Option<Responsive<TableLayout>>` | -                     |

{{#endtab }}
{{#endtabs }}

### Header

Contains the column headings for the table, based on the `thead` element.

### Body

Displays the table data. This component is based on the `tbody` element.

### Row

A row of table cells. Based on the `tr` element.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop    | Type                                | Default |
| ------- | ----------------------------------- | ------- |
| `align` | `Option<Responsive<TableRowAlign>>` | -       |

{{#endtab }}
{{#endtabs }}

### Cell

A basic table cell. This component is based on the `td` element, but uses `justify` instead of align to control how horizontal space is distributed within the table cell.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop        | Type                                   | Default |
| ----------- | -------------------------------------- | ------- |
| `justify`   | `Option<Responsive<TableCellJustify>>` | -       |
| `width`     | `Option<Responsive<String>>`           | -       |
| `min_width` | `Option<Responsive<String>>`           | -       |
| `max_width` | `Option<Responsive<String>>`           | -       |
| `p`         | `Option<Responsive<0..9>>`             | -       |
| `px`        | `Option<Responsive<0..9>>`             | -       |
| `py`        | `Option<Responsive<0..9>>`             | -       |
| `pt`        | `Option<Responsive<0..9>>`             | -       |
| `pr`        | `Option<Responsive<0..9>>`             | -       |
| `pb`        | `Option<Responsive<0..9>>`             | -       |
| `pl`        | `Option<Responsive<0..9>>`             | -       |

{{#endtab }}
{{#endtabs }}

### ColumnHeaderCell

The header of a table column. Based on the `th` element and provides the same props interface as the `Cell` part.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop        | Type                                   | Default |
| ----------- | -------------------------------------- | ------- |
| `justify`   | `Option<Responsive<TableCellJustify>>` | -       |
| `width`     | `Option<Responsive<String>>`           | -       |
| `min_width` | `Option<Responsive<String>>`           | -       |
| `max_width` | `Option<Responsive<String>>`           | -       |
| `p`         | `Option<Responsive<0..9>>`             | -       |
| `px`        | `Option<Responsive<0..9>>`             | -       |
| `py`        | `Option<Responsive<0..9>>`             | -       |
| `pt`        | `Option<Responsive<0..9>>`             | -       |
| `pr`        | `Option<Responsive<0..9>>`             | -       |
| `pb`        | `Option<Responsive<0..9>>`             | -       |
| `pl`        | `Option<Responsive<0..9>>`             | -       |

{{#endtab }}
{{#endtabs }}

### RowHeaderCell

The header of a table row. Based on the `th` element and provides the same props interface as the `Cell` part.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop        | Type                                   | Default |
| ----------- | -------------------------------------- | ------- |
| `justify`   | `Option<Responsive<TableCellJustify>>` | -       |
| `width`     | `Option<Responsive<String>>`           | -       |
| `min_width` | `Option<Responsive<String>>`           | -       |
| `max_width` | `Option<Responsive<String>>`           | -       |
| `p`         | `Option<Responsive<0..9>>`             | -       |
| `px`        | `Option<Responsive<0..9>>`             | -       |
| `py`        | `Option<Responsive<0..9>>`             | -       |
| `pt`        | `Option<Responsive<0..9>>`             | -       |
| `pr`        | `Option<Responsive<0..9>>`             | -       |
| `pb`        | `Option<Responsive<0..9>>`             | -       |
| `pl`        | `Option<Responsive<0..9>>`             | -       |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control how large the text and padding of the table cells should be.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["table"]
files = ["src/table/table_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### With a Backplate

Use `TableVariant::Surface` to add a visually enclosed backplate to the table.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["table"]
files = ["src/table/table_with_a_backplate.rs"]
show_files = true
url_fragment = "#/with-a-backplate"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/table)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/table.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/spinner.md
# Spinner

Displays an animated loading indicator.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["spinner"]
files = ["src/spinner/spinner.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `span` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop      | Type               | Default |
| --------- | ------------------ | ------- |
| `size`    | `Responsive<1..3>` | `2`     |
| `loading` | `bool`             | `true`  |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size of the spinner.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["spinner"]
files = ["src/spinner/spinner_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### With Children

Use the § prop to control whether the spinner or its children are displayed. Spinner preserves the dimensions of children when they are hidden and disables interactive elements.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["spinner"]
files = ["src/spinner/spinner_with_children.rs"]
show_files = true
url_fragment = "#/with-children"
```

{{#endtab }}
{{#endtabs }}

### With Buttons

[Buttons](./button.md) have their own `loading` prop that automatically composes a spinner.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["spinner"]
files = ["src/spinner/spinner_with_buttons.rs"]
show_files = true
url_fragment = "#/with-buttons"
```

{{#endtab }}
{{#endtabs }}

If you have an icon inside the button, you can use the button's `disabled` state and wrap the icon in a standalone `<Spinner>` to achieve a more sophisticated design.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["spinner"]
files = ["src/spinner/spinner_with_buttons_disabled.rs"]
show_files = true
url_fragment = "#/with-buttons-disabled"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/spinner)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/spinner.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/callout.md
# Callout

Short message to attract user's attention.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["callout"]
files = ["src/callout/callout.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Groups Icon and Text parts. This component is based on the `div` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                                  | Default                |
| --------------- | ------------------------------------- | ---------------------- |
| `as_child`      | `Option<Callback<CalloutChildProps>>` | -                      |
| `size`          | `Responsive<1..3>`                    | `1`                    |
| `variant`       | `CalloutVariant`                      | `CalloutVariant::Soft` |
| `color`         | `Option<AccentColor>`                 | -                      |
| `high_contrast` | `Option<bool>`                        | -                      |

{{#endtab }}
{{#endtabs }}

### Icon

Provides width and height for the icon associated with the callout. This component is based on the `div` element.

### Text

Renders the callout text. This component is based on the `p` element.

## Examples

### Size

Use the `size` prop to control the size.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["callout"]
files = ["src/callout/callout_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["callout"]
files = ["src/callout/callout_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["callout"]
files = ["src/callout/callout_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["callout"]
files = ["src/callout/callout_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### As Alert

Add a native [WAI-ARIA `alert` role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/alert_role) to the callout when the user's immediate attention is required, like when an error message appears. The screen reader will be interrupted, announcing the new content immediately.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["callout"]
files = ["src/callout/callout_as_alert.rs"]
show_files = true
url_fragment = "#/as-alert"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/callout)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/callout.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/README.md
# Components

-   [Aspect Ratio](./aspect-ratio.md)
-   [Avatar](./avatar.md)
-   [Badge](./badge.md)
-   [Button](./button.md)
-   [Callout](./callout.md)
-   [Card](./card.md)
-   [Checkbox](./checkbox.md)
-   [Data List](./data-list.md)
-   [Icon Button](./icon-button.md)
-   [Inset](./inset.md)
-   [Radio](./radio.md)
-   [Select](./select.md)
-   [Separator](./separator.md)
-   [Skeleton](./skeleton.md)
-   [Spinner](./spinner.md)
-   [Switch](./switch.md)
-   [Table](./table.md)
-   [Text Area](./text-area.md)
-   [Text Field](./text-field.md)
-   [Tooltip](./tooltip.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/text-field.md
# Text Field

Captures user input with an optional slot for buttons and icons.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-field"]
files = ["src/text_field/text_field.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

### Root

Groups Slot and Input parts. This component is based on the `input` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop      | Type                  | Default                     |
| --------- | --------------------- | --------------------------- |
| `size`    | `Responsive<1..3>`    | `2`                         |
| `variant` | `TextFieldVariant`    | `TextFieldVariant::Surface` |
| `color`   | `Option<AccentColor>` | -                           |
| `radius`  | `Option<Radius>`      | -                           |

{{#endtab }}
{{#endtabs }}

### Slot

Contains icons or buttons associated with an Input.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop    | Type                        | Default |
| ------- | --------------------------- | ------- |
| `side`  | `Option<TextFieldSlotSide>` | -       |
| `color` | `Option<AccentColor>`       | -       |
| `gap`   | `Option<Responsive<0..9>>`  | -       |
| `px`    | `Option<Responsive<0..9>>`  | -       |
| `pl`    | `Option<Responsive<0..9>>`  | -       |
| `pr`    | `Option<Responsive<0..9>>`  | -       |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-field"]
files = ["src/text_field/text_field_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

Use matching component sizes when composing Text Field with buttons. However, don't use size 1 inputs with buttons - at this size, there is not enough vertical space to nest other interactive elements.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-field"]
files = ["src/text_field/text_field_size_buttons.rs"]
show_files = true
url_fragment = "#/size-buttons"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-field"]
files = ["src/text_field/text_field_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-field"]
files = ["src/text_field/text_field_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### Radius

Use the `radius` prop to assign a specific radius value.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text-field"]
files = ["src/text_field/text_field_radius.rs"]
show_files = true
url_fragment = "#/radius"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/text-field)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/text-field.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/separator.md
# Separator

Visually or semantically separates content.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["separator"]
files = ["src/separator/separator.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component inherits props from the [Separator primitive](../../primitives/components/separator.md) and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop          | Type                   | Default                          |
| ------------- | ---------------------- | -------------------------------- |
| `orientation` | `SeparatorOrientation` | `SeparatorOrientationHorizontal` |
| `size`        | `Responsive<1..4>`     | `1`                              |
| `color`       | `AccentColor`          | `AccentColor::Gray`              |
| `decorative`  | `bool`                 | `true`                           |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size of the separator. The largest step takes full width or height of the container.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["separator"]
files = ["src/separator/separator_size_horizontal.rs"]
show_files = true
url_fragment = "#/size-horizontal"
```

{{#endtab }}
{{#endtabs }}

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["separator"]
files = ["src/separator/separator_size_vertical.rs"]
show_files = true
url_fragment = "#/size-vertical"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["separator"]
files = ["src/separator/separator_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### Orientation

Use the `orientation` prop to control whether the separator is horizontal or vertical.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["separator"]
files = ["src/separator/separator_orientation.rs"]
show_files = true
url_fragment = "#/orientation"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/separator)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/separator.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/switch.md
# Switch

Toggle switch alternative to the checkbox.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["switch"]
files = ["src/switch/switch.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component inherits props from the [Switch primitive](../../primitives/components/switch.md) and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                  | Default                  |
| --------------- | --------------------- | ------------------------ |
| `size`          | `Responsive<1..3>`    | `2`                      |
| `variant`       | `SwitchVariant`       | `SwitchVariant::Surface` |
| `color`         | `Option<AccentColor>` | -                        |
| `high_contrast` | `Option<bool>`        | -                        |
| `radius`        | `Option<Radius>`      | -                        |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size of the switch.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["switch"]
files = ["src/switch/switch_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style of the switch.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["switch"]
files = ["src/switch/switch_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["switch"]
files = ["src/switch/switch_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast in light mode.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["switch"]
files = ["src/switch/switch_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### Radius

Use the `radius` prop to assign a specific radius value.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["switch"]
files = ["src/switch/switch_radius.rs"]
show_files = true
url_fragment = "#/radius"
```

{{#endtab }}
{{#endtabs }}

### Alignment

Composing `Switch` within `Text` automatically centers it with the first line of text.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["switch"]
files = ["src/switch/switch_alignment.rs"]
show_files = true
url_fragment = "#/alignment"
```

{{#endtab }}
{{#endtabs }}

It is automatically well-aligned with multi-line text too.

### Disabled

Use the native `disabled` attribute to create a disabled switch.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["switch"]
files = ["src/switch/switch_disabled.rs"]
show_files = true
url_fragment = "#/disabled"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/switch)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/switch.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/avatar.md
# Avatar

Profile picture, user initials or fallback icon.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["avatar"]
files = ["src/avatar/avatar.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component inherits props from the [Avatar primitive](../../primitives/components/avatar.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                                 | Default               |
| --------------- | ------------------------------------ | --------------------- |
| `as_child`      | `Option<Callback<AvatarChildProps>>` | -                     |
| `size`          | `Responsive<1..9>`                   | `3`                   |
| `variant`       | `AvatarVariant`                      | `AvatarVariant::Soft` |
| `color`         | `Option<AccentColor>`                | -                     |
| `high_contrast` | `Option<bool>`                       | -                     |
| `radius`        | `Option<Radius>`                     | -                     |
| `fallback`      | `Html`                               | -                     |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size of the avatar.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["avatar"]
files = ["src/avatar/avatar_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style of the avatar.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["avatar"]
files = ["src/avatar/avatar_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["avatar"]
files = ["src/avatar/avatar_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["avatar"]
files = ["src/avatar/avatar_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### Radius

Use the `radius` prop to assign a specific radius value.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["avatar"]
files = ["src/avatar/avatar_radius.rs"]
show_files = true
url_fragment = "#/radius"
```

{{#endtab }}
{{#endtabs }}

### Fallback

Use the `fallback` prop to modify the rendered fallback element.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["avatar"]
files = ["src/avatar/avatar_fallback.rs"]
show_files = true
url_fragment = "#/fallback"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/avatar)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/avatar.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/inset.md
# Inset

Applies a negative margin to allow content to bleed into the surrounding container.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["inset"]
files = ["src/inset/inset.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `div` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop       | Type                                | Default                |
| ---------- | ----------------------------------- | ---------------------- |
| `as_child` | `Option<Callback<InsetChildProps>>` | -                      |
| `side`     | `Responsive<InsetSide>`             | `InsetSide::All`       |
| `clip`     | `Responsive<InsetClip>`             | `InsetClip::BorderBox` |
| `p`        | `Option<Responsive<InsetPadding>>`  | -                      |
| `px`       | `Option<Responsive<InsetPadding>>`  | -                      |
| `py`       | `Option<Responsive<InsetPadding>>`  | -                      |
| `pt`       | `Option<Responsive<InsetPadding>>`  | -                      |
| `pr`       | `Option<Responsive<InsetPadding>>`  | -                      |
| `pb`       | `Option<Responsive<InsetPadding>>`  | -                      |
| `pl`       | `Option<Responsive<InsetPadding>>`  | -                      |

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/inset)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/inset.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/tooltip.md
# Tooltip

Floating element that provides a control with contextual information via pointer or focus.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["tooltip"]
files = ["src/tooltip/tooltip.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component inherits and merges props from the Radix Tooltip primitive [Root](../../primitives/components/tooltip.md#root), [Portal](../../primitives/components/tooltip.md#portal) and [Content](../../primitives/components/tooltip.md#content) parts. It supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop        | Type                         | Default |
| ----------- | ---------------------------- | ------- |
| `content`   | `Html`                       | -       |
| `width`     | `Option<Responsive<String>>` | -       |
| `min_width` | `Option<Responsive<String>>` | -       |
| `max_width` | `Responsive<String>`         | `360p`  |

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/tooltip)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/tooltip.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/badge.md
# Badge

Stylized badge element.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["badge"]
files = ["src/badge/badge.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `span` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                                | Default              |
| --------------- | ----------------------------------- | -------------------- |
| `as_child`      | `Option<Callback<BadgeChildProps>>` | -                    |
| `size`          | `Responsive<1..3>`                  | `1`                  |
| `variant`       | `BadgeVariant`                      | `BadgeVariant::Soft` |
| `color`         | `Option<AccentColor>`               | -                    |
| `high_contrast` | `Option<bool>`                      | -                    |
| `radius`        | `Option<Radius>`                    | -                    |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["badge"]
files = ["src/badge/badge_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["badge"]
files = ["src/badge/badge_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["badge"]
files = ["src/badge/badge_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["badge"]
files = ["src/badge/badge_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### Radius

Use the `radius` prop to assign a specific radius value.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["badge"]
files = ["src/badge/badge_radius.rs"]
show_files = true
url_fragment = "#/radius"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/badge)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/badge.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/data-list.md
# Data List

Displays metadata as a list of key-value pairs.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["data-list"]
files = ["src/data_list/data_list.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `dl` element and supports [common margin props](../overview/layout.md#margin-props).

### Root

Contains all the parts of the data list.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop          | Type                               | Default                           |
| ------------- | ---------------------------------- | --------------------------------- |
| `orientation` | `Responsive<DataListOrientation>`  | `DataListOrientation::Horizontal` |
| `size`        | `Responsive<1..3>`                 | `2`                               |
| `trim`        | `Option<Responsive<DataListTrim>>` | -                                 |

{{#endtab }}
{{#endtabs }}

### Item

Wraps a key-value pair.

| Prop    | Type                                    | Default |
| ------- | --------------------------------------- | ------- |
| `align` | `Option<Responsive<DataListItemAlign>>` | -       |

### Label

Contains the key of the key-value pair.

| Prop            | Type                         | Default |
| --------------- | ---------------------------- | ------- |
| `width`         | `Option<Responsive<String>>` | -       |
| `min_width`     | `Option<Responsive<String>>` | -       |
| `max_width`     | `Option<Responsive<String>>` | -       |
| `color`         | `Option<AccentColor>`        | -       |
| `high_contrast` | `Option<bool>`               | -       |

### Value

Contains the value of the key-value pair.

## Examples

### Orientation

Use the `orientation` prop to change the way the data list is layed-out.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["data-list"]
files = ["src/data_list/data_list_orientation.rs"]
show_files = true
url_fragment = "#/orientation"
```

{{#endtab }}
{{#endtabs }}

### Size

Use the `size` prop to change the size of the data list.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["data-list"]
files = ["src/data_list/data_list_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop on the Label part to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["data-list"]
files = ["src/data_list/data_list_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["data-list"]
files = ["src/data_list/data_list_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/data-list)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/data-list.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/skeleton.md
# Skeleton

Replaces content with same shape placeholder that indicates a loading state.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["skeleton"]
files = ["src/skeleton/skeleton.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `span` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop         | Type                                   | Default |
| ------------ | -------------------------------------- | ------- |
| `as_child`   | `Option<Callback<SkeletonChildProps>>` | -       |
| `loading`    | `bool`                                 | `true`  |
| `width`      | `Option<Responsive<String>>`           | -       |
| `min_width`  | `Option<Responsive<String>>`           | -       |
| `max_width`  | `Option<Responsive<String>>`           | -       |
| `height`     | `Option<Responsive<String>>`           | -       |
| `min_height` | `Option<Responsive<String>>`           | -       |
| `max_height` | `Option<Responsive<String>>`           | -       |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the width and height props to manually control the size of the skeleton.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["skeleton"]
files = ["src/skeleton/skeleton_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### With Children

Use the `loading` prop to control whether the skeleton or its children are displayed. Skeleton preserves the dimensions of children when they are hidden and disables interactive elements.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["skeleton"]
files = ["src/skeleton/skeleton_with_children.rs"]
show_files = true
url_fragment = "#/with-children"
```

{{#endtab }}
{{#endtabs }}

### With Text

When using Skeleton with text, you'd usually wrap the text node itself rather than the parent element. This ensures that the text is replaced with a placeholder of the same size:

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["skeleton"]
files = ["src/skeleton/skeleton_with_text.rs"]
show_files = true
url_fragment = "#/with-text"
```

{{#endtab }}
{{#endtabs }}

The difference is especially noticeable when wrapping longer paragraphs:

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["skeleton"]
files = ["src/skeleton/skeleton_with_text_paragraph.rs"]
show_files = true
url_fragment = "#/with-text-paragraph"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/skeleton)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/skeleton.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/icon-button.md
# Icon Button

Button designed specifically for usage with a single icon.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["icon-button"]
files = ["src/icon_button/icon_button.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `button` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                                     | Default                    |
| --------------- | ---------------------------------------- | -------------------------- |
| `as_child`      | `Option<Callback<IconButtonChildProps>>` | -                          |
| `size`          | `Responsive<1..4>`                       | `2`                        |
| `variant`       | `IconButtonVariant`                      | `IconButtonVariant::Solid` |
| `color`         | `Option<AccentColor>`                    | -                          |
| `high_contrast` | `Option<bool>`                           | -                          |
| `radius`        | `Option<Radius>`                         | -                          |
| `loading`       | `bool`                                   | `false`                    |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size of the button.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["icon-button"]
files = ["src/icon_button/icon_button_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style of the button.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["icon-button"]
files = ["src/icon_button/icon_button_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

#### Ghost

Use the `ghost` variant to display a button without chrome. Ghost buttons behave like text in layout, as they use a negative margin to optically align themselves against their siblings while maintaining the padding in active and hover states.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["icon-button"]
files = ["src/icon_button/icon_button_variant_ghost.rs"]
show_files = true
url_fragment = "#/variant-ghost"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["icon-button"]
files = ["src/icon_button/icon_button_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["icon-button"]
files = ["src/icon_button/icon_button_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### Radius

Use the `radius` prop to assign a specific radius value.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["icon-button"]
files = ["src/icon_button/icon_button_radius.rs"]
show_files = true
url_fragment = "#/radius"
```

{{#endtab }}
{{#endtabs }}

### Loading

Use the `loading` prop to display a loading spinner in place of button content. The button will be disabled while loading.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["icon-button"]
files = ["src/icon_button/icon_button_loading.rs"]
show_files = true
url_fragment = "#/loading"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/icon-button)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/components/icon-button.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/radius.md
# Radius

Choosing the right radius setting in your theme.

## Theme Setting

Theme `radius` setting manages the radius factor applied to the components:

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::{Radius, Theme};
use yew::prelude::*;

#[function_component]
pub fn RadiusExample() -> Html {
    html! {
        <Theme radius={Radius::Dark}>
            <MyApp />
        </Theme>
    }
}
```

{{#endtab }}
{{#endtabs }}

| Radius           | Description | Example |
| ---------------- | ----------- | ------- |
| `Radius::None`   | None        | TODO    |
| `Radius::Small`  | Small       | TODO    |
| `Radius::Medium` | Medium      | TODO    |
| `Radius::Large`  | Large       | TODO    |
| `Radius::Full`   | Full        | TODO    |

The resulting `border-radius` is contextual and differs depending on the component. For example, when set to `Radius::Full`, a [Button](../components/button.md) becomes pill-shaped, while a [Checkbox](../components/checkbox.md) will never become fully rounded to prevent any confusion between it and a [Radio](../components/radio.md).

TODO: example

## Radius Overrides

Certain components allow you to override the radius factor using their own `radius` prop.

TODO: example

Components that render panels, like [Card](../components/card.md), [Dialog](../components/dialog.md), and [Popover](../components/popover.md), among others, won't have the `radius` prop, but will inherit the radius setting from the theme. The `radius` prop is also unavailable on most text-based components.

## Radius Scale

Radius values used in the components are derived from a 6-step scale.

TODO: visual

While you can't use a specific step on a particular component directly - the `radius` prop is used to set just the radius factor - you can use the radius scale to style your own components.

Radius tokens are accessed using CSS variables. You can use these tokens to style your custom components, ensuring they are consistent with the rest of your theme.

```css
/* Radius values that automatically respond to the radius factor */
var(--radius-1);
var(--radius-2);
var(--radius-3);
var(--radius-4);
var(--radius-5);
var(--radius-6);

/* A multiplier that controls the theme radius */
var(--radius-factor);

/*
 * A variable used to calculate a fully rounded radius.
 * Usually used within a CSS `max()` function.
 */
var(--radius-full);

/*
 * A variable used to calculate radius of a thumb element.
 * Usually used within a CSS `max()` function.
 */
var(--radius-thumb);
```

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/theme/radius)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/radius.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/overview.md
# Theme Overview

Use the `Theme` component to change the look and feel of your UI.

## Anatomy

The [Theme component](../utilities/theme.md) defines the overall visual look of your application. It can be customized by passing a minimal set of configuration options.

TODO: example

A well tuned set of defaults is provided to get you started, but don't be afraid to play with all of the available options to find the right visual style for your application. Check out the [Playground](https://www.radix-ui.com/themes/playground) to see what effect each option has.

## Variants

Variants are visual variations of a component which are used to create visual hierarchies and communicate relative importance.

Each component offers a different set of variants, though all are designed to be consistent and complimentary with each other.

TODO: example

## Examples

Using a combination of component variants alongside customized theme settings allows you to create a multitude of unique-looking interfaces.

For example you could create:

<div class="warning">

These examples are from the original Radix Themes written in TypeScript.

</div>

-   [Music applications](https://www.radix-ui.com/themes/example-music-app)
-   [Ecommerce product elements](https://www.radix-ui.com/themes/example-dashboard)
-   [SaaS dashboards](https://www.radix-ui.com/themes/example-ecommerce)

Or any number of differing treatments and styles.

TODO: examples

## Tokens

Tokens provide direct access to theme values and give you flexibility to build and customize your own themed components.

For all available theme tokens see the [source code](https://github.com/radix-ui/themes/tree/main/packages/radix-ui-themes/src/styles/tokens), or read more about each type of token in the relevant theme pages.

-   [Color](./color.md)
-   [Typography](./typography.md)
-   [Spacing](./spacing.md)
-   [Radius](./radius.md)
-   [Shadows](./shadows.md)
-   [Cursors](./cursors.md)

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/theme/overview)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/overview.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/shadows.md
# Shadows

Understanding the shadow styles used in your theme.

Shadows used in the components are derived from a 6-step scale. Refer to the [source code](https://github.com/radix-ui/themes/blob/main/packages/radix-ui-themes/src/styles/tokens/shadow.css) for the actual values used to achieve these shadows.

TODO: visual

## Shadow Tokens

Shadow tokens can be accessed using CSS variables. You can use these tokens to style your custom components, ensuring they are consistent with the rest of your theme.

```css
/* Inset shadow */
var(--shadow-1);

/* Shadows for variant="classic" panels, like Card */
var(--shadow-2);
var(--shadow-3);

/* Shadows for smaller overlay panels, like Hover Card and Popover */
var(--shadow-4);
var(--shadow-5);

/* Shadows for larger overlay panels, like Dialog */
var(--shadow-6);
```

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/theme/shadows)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/shadows.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/breakpoints.md
# Breakpoints

Built-in breakpoints allow you to easily build adaptive layouts.

## Available Sizes

Each breakpoint matches a fixed screen width. Values are `min-width` based and apply when the screen width is equal or greater.

| Size                  | Description         | Width    |
| --------------------- | ------------------- | -------- |
| `Breakpoint::Initial` | Phones (portait)    | `0px`    |
| `Breakpoint::Xs`      | Phones (landscape)  | `520px`  |
| `Breakpoint::Sm`      | Tablets(portait)    | `768px`  |
| `Breakpoint::Md`      | Tablets (landscape) | `1024px` |
| `Breakpoint::Lg`      | Laptops             | `1280px` |
| `Breakpoint::Xl`      | Desktops            | `1640px` |

## Usage

Most component size and layout props will accept an additional `ResponsiveValues` struct instance for modifying the given prop across breakpoints.

Each size maps to a corresponding key, the value of each will be applied when the screen size is greater than or equal to the named breakpoint.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::{Breakpoint, Heading};
use yew::prelude::*;

#[function_component]
pub fn BreakpointsExample() -> Html {
    html! {
        <Heading
            size={ResponsiveValues::from([
                (Breakpoint::Initial, 3)
                (Breakpoint::Md, 5)
                (Breakpoint::Xl, 7)
            ])}
        />
    }
}
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/theme/breakpoints)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/breakpoints.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/dark-mode.md
# Dark Mode

Using appearance to manage and integrate dark mode.

## Overview

Light and dark modes are supported out of the box, allowing you to easily switch appearance without additional design or styling.

TODO: example

## Basic Usage

By default, the root [Theme](../utilities/theme.md) appearance is `Appearance::Light`. To set a different appearance pass it via the `appearance` prop. This will force the theme to use the specified setting.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::{Appearance, Theme};
use yew::prelude::*;

#[function_component]
pub fn AppearanceExample() -> Html {
    html! {
        <Theme appearance={Appearance::Dark}>
            <MyApp />
        </Theme>
    }
}
```

{{#endtab }}
{{#endtabs }}

## Inheriting System Appearance

A common requirement is to inherit the appearance setting from a user's system preferences.

This is a deceptively complex problem to solve given SSR, SSG and client side hydration considerations. To make implementation easier, we recommend integrating with a theme switching library.

### With ?

TODO: recommend a library

### With Other Libraries

Any library that supports class switching is compatible. You'll just need to ensure that the appended class names match those supported by Radix Themes:

-   `class="light"`
-   `class="light-theme"`
-   `class="dark"`
-   `class="dark-theme"`

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/theme/dark-mode)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/dark-mode.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/README.md
# Theme

-   [Overview](./overview.md)
-   [Color](./color.md)
-   [Dark Mode](./dark-mode.md)
-   [Typography](./typography.md)
-   [Spacing](./spacing.md)
-   [Breakpoints](./breakpoints.md)
-   [Radius](./radius.md)
-   [Shadows](./shadows.md)
-   [Cursors](./cursors.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/color.md
# Color

Understanding the color system and its application in your theme.

Radix Themes comes with a number of color scales, each with their own light, dark and alpha variants. Under the hood, the color system is powered by [Radix Colors](../../colors).

## Accents

Accent color is the most dominant color in your theme. It is used for primary buttons, links and other interactive elements. `accent_color` is specified directly on the [Theme](../utilities/theme.md) component:

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::{AccentColor, Theme};
use yew::prelude::*;

#[function_component]
pub fn AccentColorExample() -> Html {
    html! {
        <Theme accent_color={AccentColor::Indigo}>
            <MyApp />
        </Theme>
    }
}
```

{{#endtab }}
{{#endtabs }}

### Available Accent Colors

There is a range of accent colors to choose from:

TODO: visual

### Accent Scale Anatomy

Each accent is a 12-step scale that includes a solid and a transparent variant of each color. For example, here's the `AccentColor::Indigo` color scale:

TODO: visual

### Accent Scale Tokens

Accent color tokens can be accessed using CSS variables. You can use these tokens to style your custom components, ensuring they are accessible and consistent with the rest of your theme.

```css
/* Backgrounds */
var(--accent-1);
var(--accent-2);

/* Interactive components */
var(--accent-3);
var(--accent-4);
var(--accent-5);

/* Borders and separators */
var(--accent-6);
var(--accent-7);
var(--accent-8);

/* Solid colors */
var(--accent-9);
var(--accent-10);

/* Accessible text */
var(--accent-11);
var(--accent-12);

/* Functional colors */
var(--accent-surface);
var(--accent-indicator);
var(--accent-track);
var(--accent-contrast);
```

## Grays

You can also choose between a pure gray or a number of tinted grays. Your accent color will be automatically paired with a gray shade that compliments it. However, you can also specify a custom `gray_color` directly on the [Theme](../utilities/theme.md) component:

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::{GrayColor, Theme};
use yew::prelude::*;

#[function_component]
pub fn GrayColorExample() -> Html {
    html! {
        <Theme gray_color={GrayColor::Mauve}>
            <MyApp />
        </Theme>
    }
}
```

{{#endtab }}
{{#endtabs }}

### Available Gray Colors

There is 6 grays to choose from. The difference may seem subtle, but it is impactful especially on pages with a lot of text or in dense UIs.

TODO: visual

### Gray Scale Anatomy

Grays are based on the same 12-step color scale that includes a solid and a transparent variant of each color. For example, here's the `Gray::Slate` color scale:

TODO: visual

### Gray Scale Tokens

Gray color tokens can be accessed using CSS variables. You can use these tokens to style your custom components, ensuring they are accessible and consistent with the rest of your theme.

```css
/* Backgrounds */
var(--gray-1);
var(--gray-2);

/* Interactive components */
var(--gray-3);
var(--gray-4);
var(--gray-5);

/* Borders and separators */
var(--gray-6);
var(--gray-7);
var(--gray-8);

/* Solid colors */
var(--gray-9);
var(--gray-10);

/* Accessible text */
var(--gray-11);
var(--gray-12);

/* Functional colors */
var(--gray-surface);
var(--gray-indicator);
var(--gray-track);
var(--gray-contrast);
```

## Color Overrides

When available, the `color` prop on the components can be used to override the theme accent. Nested components will automatically inherit the new accent color.

TODO: example

### Individual Color Tokens

Individual colors can be accessed directly using similar CSS variables by their corresponding names. For example, the reds are accessed via `--red-1`, `--red-2`, and so on up to `--red-12`.

## High Contrast

Most of the time, components with a `color` prop also provide a `high_contrast` option that achieves appearance that stands out against the page background:

TODO: example

## Focus and Selection

Radix Themes automatically adjusts the focus and selection colors depending on the accent color of the current component. Most of the time, setting the `color` prop will intelligently change the focus and selection colors to avoid a mismatch of conflicting hues:

TODO: example

### Focus Scale Tokens

Focus color tokens can be accessed using CSS variables that follow a similar naming structure like the other scales, e.g. `--focus-1`, `--focus-2`, and so on up to `--focus-12`.

Most of the components use `--focus-8` for the focus outline color.

## Alpha Colors

Every color has an alpha variant which is designed to appear visually the same when placed over the page background. This is a powerful tool that allows colors to look naturally when overlayed over another background. All numerical color steps have a corresponding alpha variant.

```css
/* Solid colors */
var(--red-1);
var(--red-2);
...
var(--red-12);

/* Alpha colors */
var(--red-a1);
var(--red-a2);
...
var(--red-a12);
```

Alpha colors are used automatically within Radix Themes components - no additional configuration is required.

## Backgrounds

A number of background colors are used to create a sense of visual hierarchy in Radix Themes UIs. These colors are used for backgrounds, cards, and other surfaces.

```css
/* Page background */
var(--color-background);

/* Panel backgrounds, such as cards, tables, popovers, dropdown menus, etc. */
var(--color-panel-solid);
var(--color-panel-translucent);

/* Form component backgrounds, such as text fields, checkboxes, select, etc. */
var(--color-surface);

/* Dialog overlays */
var(--color-overlay);
```

### Panel Background

The `panel_background` prop controls whether panelled elements use a solid or a `translucent` background color. The default `PanelBackground::Translucent` value creates a subtle overlay effect:

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::{PanelBackground, Theme};
use yew::prelude::*;

#[function_component]
pub fn PanelBackgroundExample() -> Html {
    html! {
        <Theme panel_background={PanelBackground::Translucent}>
            <MyApp />
        </Theme>
    }
}
```

{{#endtab }}
{{#endtabs }}

TODO: example

While `PanelBackground::Solid` is useful when you'd prefer to present information unobstructed.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::{PanelBackground, Theme};
use yew::prelude::*;

#[function_component]
pub fn PanelBackgroundExample() -> Html {
    html! {
        <Theme panel_background={PanelBackground::Solid}>
            <MyApp />
        </Theme>
    }
}
```

{{#endtab }}
{{#endtabs }}

TODO: example

## Customization

Radix Themes colors can be customized by overriding the corresponding CSS variables of the token system. Refer to the [source code](https://github.com/radix-ui/themes/blob/main/packages/radix-ui-themes/src/styles/tokens/color.css) for the full list of the color tokens.

Make sure that your CSS is applied after the Radix Themes styles so that it takes precedence.

### Brand Color

You can replace a specific color with your brand color by remapping the corresponding token. Usually, you'd override **step 9** of the scale that you are using as your theme accent.

```css
.radix-themes {
    --my-brand-color: #3052f6;
    --indigo-9: var(--my-brand-color);
    --indigo-a9: var(--my-brand-color);
}
```

In this example, using solid-colored `AccentColor::Indigo` components will now reference your custom color.

### Custom Palette

You can use the [custom color palette tool](https://www.radix-ui.com/colors/custom) to generate a custom palette based just on a couple reference colors. Once you are happy with the result, paste the generated CSS into your project. You can rename the generated colors to match the accent that you want to use in your theme.

To generate dark theme colors, toggle the appearance to use the dark theme. Make sure to paste the generated CSS after your light theme color overrides.

<a href="https://www.radix-ui.com/colors/custom">

![Custom Color Palette Tool](https://workos.imgix.net/images/4c48334e-feb3-4046-9569-bd695b174728.png?auto=format&fit=clip&q=80)

</a>
<span align="center">

[Create a custom palette →](https://www.radix-ui.com/colors/custom)

</span>

### Color Aliasing

You may prefer to use generic color names to refer to the color shades that you want to use. For example, it is common to refer to `AccentColor::Crimson`, `AccentColor::Jade`, and `AccentColor::Indigo` as `AccentColor::Red`, `AccentColor::Green`, and `AccentColor::Blue` respectively.

In this case, you can remap Radix Themes tokens in place of one another and reclaim the color names you want to use:

```css
.radix-themes {
    --red-1: var(--ruby-1);
    --red-2: var(--ruby-2);
    --red-3: var(--ruby-3);
    --red-4: var(--ruby-4);
    --red-5: var(--ruby-5);
    --red-6: var(--ruby-6);
    --red-7: var(--ruby-7);
    --red-8: var(--ruby-8);
    --red-9: var(--ruby-9);
    --red-10: var(--ruby-10);
    --red-11: var(--ruby-11);
    --red-12: var(--ruby-12);

    --red-a1: var(--ruby-a1);
    --red-a2: var(--ruby-a2);
    --red-a3: var(--ruby-a3);
    --red-a4: var(--ruby-a4);
    --red-a5: var(--ruby-a5);
    --red-a6: var(--ruby-a6);
    --red-a7: var(--ruby-a7);
    --red-a8: var(--ruby-a8);
    --red-a9: var(--ruby-a9);
    --red-a10: var(--ruby-a10);
    --red-a11: var(--ruby-a11);
    --red-a12: var(--ruby-a12);

    --red-surface: var(--ruby-surface);
    --red-indicator: var(--ruby-indicator);
    --red-track: var(--ruby-track);
    --red-contrast: var(--ruby-contrast);
}
```

In this example, using the `AccentColor::Red` color in Radix Themes components and tokens would now reference the original `AccentColor::Ruby` scale.

## Individual CSS Files

Color definitions comprise around 20% of the total CSS size that Radix Themes ships with.

If you'd prefer to reduce your CSS bundle size and have access just to the colors you use, you can import the individual CSS files for each color module. Here's a sample setup:

```css
// Base theme tokens
@import "@radix-ui/themes/tokens/base.css";

// Include just the colors you use, for example `ruby`, `teal`, and `slate`.
// Remember to import the gray tint that matches your theme setting.
@import "@radix-ui/themes/tokens/colors/ruby.css";
@import "@radix-ui/themes/tokens/colors/teal.css";
@import "@radix-ui/themes/tokens/colors/slate.css";

// Rest of the CSS
@import "@radix-ui/themes/components.css";
@import "@radix-ui/themes/utilities.css";
```

Please note that the colors you didn't import will still be accepted by the `color` prop in Rust. Also, make sure that your developer tooling preserves the order of the imported CSS files.

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/theme/color)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/color.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/spacing.md
# Spacing

Overview of the space scale and scaling options.

## Space scale

Spacing values are derived from a 9-step scale, which is used for props such as margin and padding. These props accept numeric values from `1` to `9`, which correspond to the steps in the scale below.

TODO: visual

| Step | Base value |
| ---- | ---------- |
| `1`  | `4px`      |
| `2`  | `8px`      |
| `3`  | `12px`     |
| `4`  | `16px`     |
| `5`  | `24px`     |
| `6`  | `32px`     |
| `7`  | `40px`     |
| `8`  | `48px`     |
| `9`  | `64px`     |

### Space Scale Tokens

Space scale tokens can be also accessed using CSS variables. You can use these tokens to style your custom components, ensuring they are consistent with the rest of your theme.

```css
/* Space scale */
var(--space-1);
var(--space-2);
var(--space-3);
var(--space-4);
var(--space-5);
var(--space-6);
var(--space-7);
var(--space-8);
var(--space-9);
```

## Scaling

Values which affect layout (spacing, font size, line height) scale relatively to each other based on the `scaling` value defined in your [Theme](../utilities/theme.md). This setting allows you to scale the UI density uniformly across your entire application.

TODO: example

### Scaling Factor

The scaling factor token can be accessed using the `--scaling` CSS variable. If you need to use different scaling factors in your app, you can use this token in your custom styles, ensuring they are consistent with the rest of your theme.

```css
.MyCustomComponent {
    width: calc(200px * var(--scaling));
}
```

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/theme/spacing)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/spacing.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/typography.md
# Typography

Guidance for using and tuning typography.

## Base Components

Use [Text](../typography/text.md) and [Heading](../typography/heading.md) components to render titles and body copy. These components share `size` and `weight` props and map to the underlying type system to ensure consistent typography throughout your app.

TODO: example

## Formatting Components

Compose formatting components to add [emphasis](../typography/em.md), [signal importance](../typography/strong.md), present [code](../typography/code.md) and more.

TODO: example

## Type Scale

The typographic system is based on a 9-step `size` scale. Every step has a corresponding font size, line height and letter spacing value which are all designed to be used in combination.

TODO: visual
TODO: example

| Step | Size   | Letter Spacing | Line Height |
| ---- | ------ | -------------- | ----------- |
| `1`  | `12px` | `0.0025em`     | `16px`      |
| `2`  | `14px` | `0em`          | `20px`      |
| `3`  | `16px` | `0em`          | `24px`      |
| `4`  | `18px` | `-0.0025em`    | `26px`      |
| `5`  | `20px` | `-0.005em`     | `28px`      |
| `6`  | `24px` | `-0.00625em`   | `30px`      |
| `7`  | `28px` | `-0.0075em`    | `36px`      |
| `8`  | `35px` | `-0.01em`      | `40px`      |
| `9`  | `60px` | `-0.025em`     | `60px`      |

## Font Weight

The following weights are supported. Weights can be [customized](#custom-font-weights) to map to your own typeface.

TODO: example

| Weight            | Description | Default Value |
| ----------------- | ----------- | ------------- |
| `Weight::Light`   | Light       | `300`         |
| `Weight::Regular` | Regular     | `400`         |
| `Weight::Medium`  | Medium      | `500`         |
| `Weight::Bold`    | Bold        | `700`         |

## Font Family

By default, Radix Themes uses a system font stack for portability and legibility. Continue to the next section to learn about customizing your theme with a custom font.

| Type     | Default value                                                                                                                                                          |
| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Text     | `-apple-system, BlinkMacSystemFont, 'Segoe UI (Custom)', Roboto, 'Helvetica Neue', 'Open Sans (Custom)', system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji'` |
| Code     | `'Menlo', 'Consolas (Custom)', 'Bitstream Vera Sans Mono', monospace, 'Apple Color Emoji', 'Segoe UI Emoji'`                                                           |
| Emphasis | `'Times New Roman', 'Times', serif`                                                                                                                                    |
| Quote    | `'Times New Roman', 'Times', serif`                                                                                                                                    |

## Customization

Radix Themes typography can be customized by overriding the corresponding CSS variables of the token system. Refer to the [source code](https://github.com/radix-ui/themes/blob/main/packages/radix-ui-themes/src/styles/tokens/typography.css) for the full list of the typographic tokens.

Make sure that your CSS is applied after the Radix Themes styles so that it takes precedence.

### Custom Fonts

You can provide your own fonts, however, how you choose to import and serve them is up to you. It is only required that you specify your named fonts using the correct syntax.

To customize the font family used in your theme, remap the corresponding `font-family` tokens:

```css
.radix-themes {
    --default-font-family: /* Your custom default font */ '';
    --heading-font-family: /* Your custom font for <Heading> components */ '';
    --code-font-family:  /* Your custom font for <Code> components */ '';
    --strong-font-family:  /* Your custom font for <Strong> components */ '';
    --em-font-family:  /* Your custom font for <Em> components */ '';
    --quote-font-family:  /* Your custom font for <Quote> components */ '';
}
```

### Custom Font Weights

To customize the exact font weights used in your theme, remap the corresponding `font-weight` tokens to your own values:

```css
.radix-themes {
    --font-weight-light: 200;
    --font-weight-regular: 300;
    --font-weight-medium: 600;
    --font-weight-bold: 800;
}
```

### Advanced Settings

There's a number of advanced typographic features that can be customized. These include a font size multiplier for certain components, font style, letter spacing, and leading trim. For example, you can customize the headings to render with a relatively larger font size than your default font, different leading trim values, and tighter letter spacing:

```css
.radix-themes {
    --heading-font-family: 'Untitled Sans', sans-serif;
    --heading-font-size-adjust: 1.05;
    --heading-font-style: normal;
    --heading-leading-trim-start: 0.42em;
    --heading-leading-trim-end: 0.38em;
    --heading-letter-spacing: -0.01em;
}
```

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/theme/typography)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/typography.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/cursors.md
# Cursors

Customizing cursors used for interactive elements.

## Default Cursors

By default, interactive elements that don\t link to another page use the regular arrow cursor. This also matches the browser defaults. However, disabled elements use an explicit disabled cursor.

TODO: example

## Cursor Tokens

Cursor settings can be accessed using CSS variables. You can use these tokens to style your custom components, ensuring they are accessible and consistent with the rest of your theme.

```css
/* Available cursor tokens */
var(--cursor-button);
var(--cursor-checkbox);
var(--cursor-disabled);
var(--cursor-link);
var(--cursor-menu-item);
var(--cursor-radio);
var(--cursor-slider-thumb);
var(--cursor-slider-thumb-active);
var(--cursor-switch);
```

## Customization

It's common to use a pointer cursor for interactive elements. Radix Themes cursors can be customized by overriding the corresponding CSS variables of the token system.

Here's an example of how you can customize the cursor tokens to set `cursor: pointer` for most interactive elements in the theme:

```css
.radix-themes {
    --cursor-button: pointer;
    --cursor-checkbox: pointer;
    --cursor-disabled: default;
    --cursor-link: pointer;
    --cursor-menu-item: pointer;
    --cursor-radio: pointer;
    --cursor-slider-thumb: grab;
    --cursor-slider-thumb-active: grabbing;
    --cursor-switch: pointer;
}
```

Make sure that your CSS is applied after the Radix Themes styles so that it takes precedence.

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/theme/cursors)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/theme/cursors.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/text.md
# Text

Foundational text primitive.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `span` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                               | Default        |
| --------------- | ---------------------------------- | -------------- |
| `as`            | `TextAs`                           | `TextAs::Span` |
| `as_child`      | `Option<Callback<TextChildProps>>` | -              |
| `size`          | `Option<Responsive<1..9>>`         | -              |
| `weight`        | `Option<Responsive<Weight>>`       | -              |
| `align`         | `Option<Responsive<TextAlign>>`    | -              |
| `trim`          | `Option<Responsive<LeadingTrim>>`  | -              |
| `truncate`      | `Option<bool>`                     | -              |
| `wrap`          | `Option<Responsive<TextWrap>>`     | -              |
| `color`         | `Option<AccentColor>`              | -              |
| `high_contrast` | `Option<bool>`                     | -              |

{{#endtab }}
{{#endtabs }}

## Examples

### As Another Element

Use the `as` prop to render text as a `p`, `label`, `div` or `span`. This prop is purely semantic and does not alter visual appearance.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_as.rs"]
show_files = true
url_fragment = "#/as"
```

{{#endtab }}
{{#endtabs }}

### Size

Use the `size` prop to control text size. This prop also provides correct line height and corrective letter spacing - as text size increases, the relative line height and letter spacing decrease.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

Sizes 2-4 are designed to work well for long-form content.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_size_content.rs"]
show_files = true
url_fragment = "#/size-content"
```

{{#endtab }}
{{#endtabs }}

Sizes 1-3 are designed to work well for UI labels.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_size_labels.rs"]
show_files = true
url_fragment = "#/size-labels"
```

{{#endtab }}
{{#endtabs }}

### Weight

Use the `weight` prop to set the text weight.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_weight.rs"]
show_files = true
url_fragment = "#/weight"
```

{{#endtab }}
{{#endtabs }}

### Align

Use the `align` prop to set text alignment.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_align.rs"]
show_files = true
url_fragment = "#/align"
```

{{#endtab }}
{{#endtabs }}

### Trim

Use the `trim` prop to trim the leading space at the start, end, or both sides of the text box.

The prop works similarly to the upcoming [half-leading control](https://www.w3.org/TR/css-inline-3/#leading-trim) spec, but uses a common [negative margin workaround](https://seek-oss.github.io/capsize/) under the hood for cross-browser support.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_trim.rs"]
show_files = true
url_fragment = "#/trim"
```

{{#endtab }}
{{#endtabs }}

Trimming the leading is useful when dialing in vertical spacing in cards or other "boxy" components. Otherwise, padding looks larger on top and bottom than on the sides.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_trim_box.rs"]
show_files = true
url_fragment = "#/trim-box"
```

{{#endtab }}
{{#endtabs }}

The default trim values are configured for the system font stack that's used by Radix Themes. If you are using custom fonts, you can [adjust](../theme/typography.md) the trim values using the corresponding CSS variables.

```css
.radix-themes {
    --default-leading-trim-start: 0.42em;
    --default-leading-trim-end: 0.36em;
    --heading-leading-trim-start: 0.42em;
    --heading-leading-trim-end: 0.36em;
}
```

### Truncate

Use the `truncate` prop to truncate text with an ellipsis when it overflows its container.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_truncate.rs"]
show_files = true
url_fragment = "#/truncate"
```

{{#endtab }}
{{#endtabs }}

### Wrap

Use the `wrap` prop to control text wrapping.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_wrap.rs"]
show_files = true
url_fragment = "#/wrap"
```

{{#endtab }}
{{#endtabs }}

<div class="warning">

`text-wrap: pretty` is an experimental value that is [not yet supported in all browsers](https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap#browser_compatibility). However, it can be treated as a progressive enhancement for browsers that do support it.

</div>

### Color

Use the `color` prop to assign a specific [color](../theme/color.md). The text colors are designed to achieve at least Lc 60 APCA contrast over common background colors.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

## With Formatting

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_formatting.rs"]
show_files = true
url_fragment = "#/formatting"
```

{{#endtab }}
{{#endtabs }}

## With Form Controls

Compose `Text` with formatting components to add emphasis and structure to content.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

Composing `Text` with a form control like [`Checkbox`](../components/checkbox.md), [`RadioGroup`](../components/radio-group.md), or [`Switch`](../components/switch.md) automatically centers the control with the first line of text, even when the text is multi-line.

```toml,trunk
package = "radix-yew-book-themes"
features = ["text"]
files = ["src/text/text_form_controls.rs"]
show_files = true
url_fragment = "#/form-controls"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/text)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/text.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/blockquote.md
# Blockquote

Block-level quotation from another source.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["blockquote"]
files = ["src/blockquote/blockquote.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `blockquote` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                                     | Default |
| --------------- | ---------------------------------------- | ------- |
| `as_child`      | `Option<Callback<BlockquoteChildProps>>` | -       |
| `size`          | `Option<Responsive<1..9>>`               | -       |
| `weight`        | `Option<Responsive<Weight>>`             | -       |
| `color`         | `Option<AccentColor>`                    | -       |
| `high_contrast` | `Option<bool>`                           | -       |
| `truncate`      | `Option<bool>`                           | -       |
| `wrap`          | `Option<Responsive<TextWrap>>`           | -       |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["blockquote"]
files = ["src/blockquote/blockquote_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Weight

Use the `weight` prop to set the text weight.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["blockquote"]
files = ["src/blockquote/blockquote_weight.rs"]
show_files = true
url_fragment = "#/weight"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["blockquote"]
files = ["src/blockquote/blockquote_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["blockquote"]
files = ["src/blockquote/blockquote_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### Truncate

Use the `truncate` prop to truncate text with an ellipsis when it overflows its container.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["blockquote"]
files = ["src/blockquote/blockquote_truncate.rs"]
show_files = true
url_fragment = "#/truncate"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/blockquote)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/blockquote.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/heading.md
# Heading

Semantic heading element.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `h1` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                                  | Default         |
| --------------- | ------------------------------------- | --------------- |
| `as`            | `HeadingAs`                           | `HeadingAs::H1` |
| `as_child`      | `Option<Callback<HeadingChildProps>>` | -               |
| `size`          | `Responsive<1..9>`                    | `6`             |
| `weight`        | `Option<Responsive<Weight>>`          | -               |
| `align`         | `Option<Responsive<TextAlign>>`       | -               |
| `trim`          | `Option<Responsive<LeadingTrim>>`     | -               |
| `truncate`      | `Option<bool>`                        | -               |
| `wrap`          | `Option<Responsive<TextWrap>>`        | -               |
| `color`         | `Option<AccentColor>`                 | -               |
| `high_contrast` | `Option<bool>`                        | -               |

{{#endtab }}
{{#endtabs }}

## Examples

### As Another Element

Use the `as` prop to change the heading level. This prop is purely semantic and does not change the visual appearance.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading_as.rs"]
show_files = true
url_fragment = "#/as"
```

{{#endtab }}
{{#endtabs }}

### Size

Use the `size` prop to control the size of the heading. The prop also provides correct line height and corrective letter spacing - as text size increases, the relative line height and letter spacing decrease.

Heading sizes match [Text](./text.md) sizes. However, the line heights are set a bit tighter as headings tend to be shorter than running text.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Weight

Use the `weight` prop to set the text weight.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading_weight.rs"]
show_files = true
url_fragment = "#/weight"
```

{{#endtab }}
{{#endtabs }}

### Align

Use the `align` prop to set text alignment.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading_align.rs"]
show_files = true
url_fragment = "#/align"
```

{{#endtab }}
{{#endtabs }}

### Trim

Use the `trim` prop to trim the leading space at the start, end, or both sides of the text box.

The prop works similarly to the upcoming [half-leading control](https://www.w3.org/TR/css-inline-3/#leading-trim) spec, but uses a common [negative margin workaround](https://seek-oss.github.io/capsize/) under the hood for cross-browser support.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading_trim.rs"]
show_files = true
url_fragment = "#/trim"
```

{{#endtab }}
{{#endtabs }}

Trimming the leading is useful when dialing in vertical spacing in cards or other "boxy" components. Otherwise, padding looks larger on top and bottom than on the sides.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading_trim_box.rs"]
show_files = true
url_fragment = "#/trim-box"
```

{{#endtab }}
{{#endtabs }}

The default trim values are configured for the system font stack that's used by Radix Themes. If you are using custom fonts, you can [adjust](../theme/typography.md) the trim values using the corresponding CSS variables.

```css
.radix-themes {
    --default-leading-trim-start: 0.42em;
    --default-leading-trim-end: 0.36em;
    --heading-leading-trim-start: 0.42em;
    --heading-leading-trim-end: 0.36em;
}
```

### Truncate

Use the `truncate` prop to truncate text with an ellipsis when it overflows its container.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading_truncate.rs"]
show_files = true
url_fragment = "#/truncate"
```

{{#endtab }}
{{#endtabs }}

### Wrap

Use the `wrap` prop to control text wrapping.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading_wrap.rs"]
show_files = true
url_fragment = "#/wrap"
```

{{#endtab }}
{{#endtabs }}

<div class="warning">

`text-wrap: pretty` is an experimental value that is [not yet supported in all browsers](https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap#browser_compatibility). However, it can be treated as a progressive enhancement for browsers that do support it.

</div>

### Color

Use the `color` prop to assign a specific [color](../theme/color.md). The text colors are designed to achieve at least Lc 60 APCA contrast over common background colors.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["heading"]
files = ["src/heading/heading_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/heading)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/heading.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/strong.md
# Strong

Marks text to signify strong importance.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["strong"]
files = ["src/strong/strong.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `strong` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop       | Type                                 | Default |
| ---------- | ------------------------------------ | ------- |
| `as_child` | `Option<Callback<StrongChildProps>>` | -       |
| `truncate` | `Option<bool>`                       | -       |
| `wrap`     | `Option<Responsive<TextWrap>>`       | -       |

{{#endtab }}
{{#endtabs }}

## Examples

### Truncate

Use the `truncate` prop to truncate text with an ellipsis when it overflows its container.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["strong"]
files = ["src/strong/strong_truncate.rs"]
show_files = true
url_fragment = "#/truncate"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/strong)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/strong.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/README.md
# Typography

-   [Text](./text.md)
-   [Heading](./heading.md)
-   [Blockquote](./blockquote.md)
-   [Code](./code.md)
-   [Em](./em.md)
-   [Kbd](./kbd.md)
-   [Link](./link.md)
-   [Quote](./quote.md)
-   [Strong](./strong.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/link.md
# Link

Semantic element for navigation between pages.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["link"]
files = ["src/link/link.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `a` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                               | Default               |
| --------------- | ---------------------------------- | --------------------- |
| `as_child`      | `Option<Callback<LinkChildProps>>` | -                     |
| `size`          | `Option<Responsive<1..9>>`         | -                     |
| `weight`        | `Option<Responsive<Weight>>`       | -                     |
| `trim`          | `Option<Responsive<LeadingTrim>>`  | -                     |
| `truncate`      | `Option<bool>`                     | -                     |
| `wrap`          | `Option<Responsive<TextWrap>>`     | -                     |
| `underline`     | `LinkUnderline`                    | `LinkUnderline::Auto` |
| `color`         | `Option<AccentColor>`              | -                     |
| `high_contrast` | `Option<bool>`                     | -                     |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control the size of the link. The prop also provides correct line height and corrective letter spacing - as text size increases, the relative line height and letter spacing decrease.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["link"]
files = ["src/link/link_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Weight

Use the `weight` prop to set the text weight.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["link"]
files = ["src/link/link_weight.rs"]
show_files = true
url_fragment = "#/weight"
```

{{#endtab }}
{{#endtabs }}

### Truncate

Use the `truncate` prop to truncate text with an ellipsis when it overflows its container.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["link"]
files = ["src/link/link_truncate.rs"]
show_files = true
url_fragment = "#/truncate"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["link"]
files = ["src/link/link_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["link"]
files = ["src/link/link_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### Underline

Use the `underline` prop to manage the visibility of the underline affordance.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["link"]
files = ["src/link/link_underline.rs"]
show_files = true
url_fragment = "#/underline"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/link)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/link.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/code.md
# Code

Marks text to signify a short fragment of computer code.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["code"]
files = ["src/code/code.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `code` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop            | Type                               | Default             |
| --------------- | ---------------------------------- | ------------------- |
| `as_child`      | `Option<Callback<CodeChildProps>>` | -                   |
| `size`          | `Option<Responsive<1..9>>`         | -                   |
| `variant`       | `CodeVariant`                      | `CodeVariant::Soft` |
| `weight`        | `Option<Responsive<Weight>>`       | -                   |
| `color`         | `Option<AccentColor>`              | -                   |
| `high_contrast` | `Option<bool>`                     | -                   |
| `truncate`      | `Option<bool>`                     | -                   |
| `wrap`          | `Option<Responsive<TextWrap>>`     | -                   |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control text size. This prop also provides correct line height and corrective letter spacing - as text size increases, the relative line height and letter spacing decrease.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["code"]
files = ["src/code/code_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

### Variant

Use the `variant` prop to control the visual style.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["code"]
files = ["src/code/code_variant.rs"]
show_files = true
url_fragment = "#/variant"
```

{{#endtab }}
{{#endtabs }}

### Color

Use the `color` prop to assign a specific [color](../theme/color.md).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["code"]
files = ["src/code/code_color.rs"]
show_files = true
url_fragment = "#/color"
```

{{#endtab }}
{{#endtabs }}

### High-Contrast

Use the `high_contrast` prop to increase color contrast with the background.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["code"]
files = ["src/code/code_high_contrast.rs"]
show_files = true
url_fragment = "#/high-contrast"
```

{{#endtab }}
{{#endtabs }}

### Weight

Use the `weight` prop to set the text weight.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["code"]
files = ["src/code/code_weight.rs"]
show_files = true
url_fragment = "#/weight"
```

{{#endtab }}
{{#endtabs }}

### Truncate

Use the `truncate` prop to truncate text with an ellipsis when it overflows its container.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["code"]
files = ["src/code/code_truncate.rs"]
show_files = true
url_fragment = "#/truncate"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/code)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/code.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/em.md
# Em

Marks text to stress emphasis.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["em"]
files = ["src/em/em.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `em` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop       | Type                             | Default |
| ---------- | -------------------------------- | ------- |
| `as_child` | `Option<Callback<EmChildProps>>` | -       |
| `truncate` | `Option<bool>`                   | -       |
| `wrap`     | `Option<Responsive<TextWrap>>`   | -       |

{{#endtab }}
{{#endtabs }}

## Examples

### Truncate

Use the `truncate` prop to truncate text with an ellipsis when it overflows its container.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["em"]
files = ["src/em/em_truncate.rs"]
show_files = true
url_fragment = "#/truncate"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/em)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/em.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/kbd.md
# Kbd

Represents keyboard input or a hotkey.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["kbd"]
files = ["src/kbd/kbd.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `kbd` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop       | Type                              | Default |
| ---------- | --------------------------------- | ------- |
| `as_child` | `Option<Callback<KbdChildProps>>` | -       |
| `size`     | `Option<Responsive<1..9>>`        | -       |

{{#endtab }}
{{#endtabs }}

## Examples

### Size

Use the `size` prop to control text size.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["kbd"]
files = ["src/kbd/kbd_size.rs"]
show_files = true
url_fragment = "#/size"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/kbd)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/kbd.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/quote.md
# Quote

Short inline quotation.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["quote"]
files = ["src/quote/quote.rs"]
show_files = true
url_fragment = "#/"
```

{{#endtab }}
{{#endtabs }}

## API Reference

This component is based on the `q` element and supports [common margin props](../overview/layout.md#margin-props).

{{#tabs global="framework" }}
{{#tab name="Yew" }}

| Prop       | Type                                | Default |
| ---------- | ----------------------------------- | ------- |
| `as_child` | `Option<Callback<QuoteChildProps>>` | -       |
| `truncate` | `Option<bool>`                      | -       |
| `wrap`     | `Option<Responsive<TextWrap>>`      | -       |

{{#endtab }}
{{#endtabs }}

## Examples

### Truncate

Use the `truncate` prop to truncate text with an ellipsis when it overflows its container.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```toml,trunk
package = "radix-yew-book-themes"
features = ["quote"]
files = ["src/quote/quote_truncate.rs"]
show_files = true
url_fragment = "#/truncate"
```

{{#endtab }}
{{#endtabs }}

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/components/quote)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/typography/quote.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/overview/getting-started.md
# Getting Started

Install Rust Radix Themes and start building in minutes.

Rust Radix Themes is a pre-styled component library that is designed to work out of the box with minimal configuration. If you are looking for the unstyled components, go to [Rust Radix Primitives](../../primitives/README.md).

## Installation

Getting up and running is quick and easy.

### 1. Install Rust Radix Themes

Install the package from your command line.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```shell
cargo add radix-yew-themes
```

-   [View on crates.io](https://crates.io/crates/radix-yew-themes)
-   [View on docs.rs](https://docs.rs/radix-yew-themes/latest/radix_yew_themes/)
-   [View source](https://github.com/RustForWeb/radix/tree/main/packages/themes/yew)

{{#endtab }}
{{#endtabs }}

### 2. Import the CSS file

Import the global CSS file at the root of your application.

TODO

### 3. Add the Theme component

Add `Theme` to your application, wrapping the root component inside of `body`.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::Theme;
use yew::prelude::*;

#[function_component]
pub fn Root() -> Html {
    html! {
        <Theme>
            <MyApp />
        </Theme>
    }
}
```

{{#endtab }}
{{#endtabs }}

### 4. Start building

You are now ready to use Rust Radix Themes components.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::{Button, Flex, FlexDirection, Text};
use yew::prelude::*;

#[function_component]
pub fn MyApp() -> Html {
    html! {
        <Flex direction={FlexDirection::Column} gap=2>
            <Text>{"Hello from Rust Radix Themes :)"}</Text>
            <Button>{"Let's go"}</Button>
        </Flex>
    }
}
```

{{#endtab }}
{{#endtabs }}

## Customizing your theme

Configuration is managed and applied via the [Theme](../utilities/theme.md) component.

### Basic configuration

Pass [configuration](../utilities/theme.md) to the `Theme` to customize appearance.

{{#tabs global="framework" }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::{AccentColor, GrayColor, Large, Radius, Scaling, Theme};
use yew::prelude::*;

#[function_component]
pub fn Root() -> Html {
    html! {
        <Theme accent_color={AccentColor::Crimson} gray_color={GrayColor::Sand} radius={Radius::Large} scaling={Scaling::S95}>
            <MyApp />
        </Theme>
    }
}
```

{{#endtab }}
{{#endtabs }}

### Using the theme panel

TODO

### Take it further

Get the most out of Radix Themes by exploring more concepts and features.

TODO: links

-   Styling
-   Layout
-   Theme Overview
-   Color
-   Dark Mode
-   Typography

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/overview/getting-started)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/overview/getting-started.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/overview/README.md
# Overview

-   [Getting Started](./getting-started.md)
-   [Styling](./styling.md)
-   [Layout](./layout.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/overview/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/overview/styling.md
# Styling

How to approach styling with Radix Themes.

## Introduction

Radix Themes does not come with a built-in styling system. There's no `css` or `sx` prop, and it does not use any styling libraries internally. Under the hood, it's built with vanilla CSS.

There's no overhead when it comes to picking a styling technology for your app.

## What You Get

The components in Radix Themes are relatively closed - they come with a set of styles that aren't always easily overridden. They are customizable within what's allowed by their props and the theme configuration.

However, you also get access to the same CSS variables that power the Radix Themes components. You can use these tokens to create custom components that naturally feel at home in the original theme. Changes to the token system are treated as breaking.

For more information on specific tokens, refer to the corresponding guides in the [Theme section](../theme/overview.md).

<!-- TODO: color, typography, shadow and radius examples -->

## Overriding Styles

Beyond simple style overrides, we recommend using the components as-is, or create your own versions using the same building blocks.

Most components do have `class` and `style` props, but if you find yourself needing to override a lot of styles, it's a good sign that you should either:

-   Try to achieve what you need with the existing props and theme configuration.
-   See whether you can achieve your design by tweaking the underlying token system.
-   Create your own component using lower-level building blocks, such as [Primitives](../../primitives) and [Colors](../../colors).
-   Reconsider whether Radix Themes is the right fit for your project.

### Tailwind

Tailwind is great. Yet, if you plan to use Radix Themes with Tailwind, keep in mind how its ergonomics may encourage you to create complex styles on the fly, sometimes reaching into the component internals without friction.

Tailwind is a different styling paradigm, which may not mix well with the idea of a closed component system where customization is achieved through props, tokens, and creating new components on top of a shared set of building blocks.

## Custom Components

If you need to create a custom component, use the same building blocks that Radix Themes uses:

-   [Theme](../theme/overview.md) tokens that power the components
-   [Radix Primitives](../../primitives), a library of accessible, unstyled components
-   [Radix Colors](../../colors), a color system for building beautiful websites and apps

Feel free to explore the [source code](https://github.com/RustForWeb/radix/tree/main/packages/themes) of Radix Themes to see how it is built.

## Common Issues

### Z-Index Conflicts

Out of the box, portalled Radix Themes components can be nested and stacked in any order without conflicts. For example, you can open a popover that opens a dialog, which in turn opens another popover. They all stack on top of each other in the order they were opened:

TODO: demo

When building your own components, use the following rules to avoid z-index conflicts:

-   Don't use `z-index` values other than `auto`, `0`, or `-1` in rare cases.
-   Render the elements that should stack on top of each other in portals.

Your main content and portalled content are separated by the stacking context that the styles of the root `Theme` component create. This allows you to stack portalled content on top of the main content without worrying about z-indices.

### Tailwind Base Styles

As of Tailwind v3, styles produced by the `@tailwind` directive are usually appended after any imported CSS, no matter the original import order. In particular, Tailwind's button reset style may interfere with Radix Themes buttons, rendering certain buttons without a background color.

Workarounds:

-   Don't use `@tailwind base`.
-   Set up separate CSS [layers](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) for Tailwind and Radix Themes.
-   Set up `postcss-import` and manually import Tailwind base styles via `@import tailwindcss/base` before Radix Themes styles. [Example setup](https://github.com/radix-ui/themes/issues/109#issuecomment-1747345743).

### Missing Styles in Portals

When you render a custom portal in a Radix Themes project, it will naturally appear outside of the root `Theme` component, which means it won't have access to most of the theme tokens and styles. To fix that, wrap the portal content with another `Theme`.

Components like Dialog and Popover in Radix Themes already handle this for you, so this is only necessary when creating your own portalled components.

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
// Implementation example of a custom dialog using the low-level Dialog primitive
// Refer to https://radix.rustforweb.org/primitives/components/dialog.html
use leptos::*;
use radix_leptos_dialog::*;
use radix_leptos_themes::Theme;

#[component]
fn MyCustomDialog() -> impl IntoView {
    view! {
        <Dialog>
            <DialogTrigger>Open</DialogTrigger>
            <DialogPortal>
                <Theme>
                    <DialogOverlay />
                    <DialogContent>
                        <DialogTitle />
                        <DialogDescription />
                        <DialogClose />
                    </DialogContent>
                </Theme>
            </DialogPortal>
        </Dialog>
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
// Implementation example of a custom dialog using the low-level Dialog primitive
// Refer to https://radix.rustforweb.org/primitives/components/dialog.html
use radix_yew_dialog::*;
use radix_yew_themes::Theme;
use yew::prelude::*;

#[function_component]
fn MyCustomDialog() -> Html {
    html! {
        <Dialog>
            <DialogTrigger>{"Open"}</DialogTrigger>
            <DialogPortal>
                <Theme>
                    <DialogOverlay />
                    <DialogContent>
                        <DialogTitle />
                        <DialogDescription />
                        <DialogClose />
                    </DialogContent>
                </Theme>
            </DialogPortal>
        </Dialog>
    }
}
```

{{#endtab }}
{{#endtabs }}

### Complex CSS Precedence

Usually, you'd want your custom CSS to override Radix Themes styles. However, there are cases when it is natural to expect the opposite.

Consider a simple paragraph style that just resets the browser's default margin:

```css
.my-paragraph {
    margin: 0;
}
```

And the styles are imported as follows:

```css
@import '@radix-ui/themes/styles.css';
@import './my-styles.css';
```

You might apply the margin prop from a `Box` onto your custom paragraph via `as_child`:

{{#tabs global="framework" }}
{{#tab name="Leptos" }}

```rust,ignore
use leptos::*;
use radix_leptos_dialog::*;

#[component]
fn MyApp() -> impl IntoView {
    view! {
        // TODO
    }
}
```

{{#endtab }}
{{#tab name="Yew" }}

```rust,ignore
use radix_yew_themes::{Box, Theme};
use yew::prelude::*;

#[function_component]
fn MyApp() -> Html {
    html! {
        <Theme>
            <Box
                m=5
                as_child={Callback::from(|BoxChildProps {class, style, ..}| html! {
                    <p class={format!("{} my-paragraph", class)} style=style>{"My custom paragraph"}</p>
                })}
            />
        </Theme>
    }
}
```

{{#endtab }}
{{#endtabs }}

Yet, this won't work intuitively. The custom styles are imported after Radix Themes styles, so they will override the margin prop. As a workaround, Radix Themes provides separate `tokens.css`, `components.css`, and `utilities.css` files that the original `styles.css` is built upon:

```css
@import '@radix-ui/themes/tokens.css';
@import '@radix-ui/themes/components.css';
@import '@radix-ui/themes/utilities.css';
```

You can import `utilities.css` after your custom styles to ensure that the layout props work as expected with your custom styles.

If you use standalone layout components, split CSS files are also available for them:

```css
@import '@radix-ui/themes/layout/tokens.css';
@import '@radix-ui/themes/layout/components.css';
@import '@radix-ui/themes/layout/utilities.css';
```

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/overview/styling)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/overview/styling.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/overview/layout.md
# Layout

Get the layout concerns right.

## Layout Components

Layout components are used to separate layout responsibilities from content and interactivity. This is the separation of concerns that makes your app maintainable and easy to reason about, and understanding these principles is key to building your interfaces effectively.

### Box

<!-- TODO: example -->

[Box](../layout/box.md) is the most fundamental layout component. Box is used to:

-   Provide spacing to child elements.
-   Impose sizing constraints on content.
-   Control layout behaviour within flex and grid containers.
-   Hide content based on screen size using its responsive `display` prop.

### Flex

<!-- TODO: example -->

[Flex](../layout/flex.md) component does everything that Box can do, but comes with an additional set of props to organize items along an axis. It provides convenient access to the CSS [flexbox properties](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).

### Grid

<!-- TODO: example -->

[Grid](../layout/grid.md) is used to organize the content in columns and rows. Like Box and Flex, it's made to provide convenient access to the underlying CSS [grid properties](https://css-tricks.com/snippets/css/complete-guide-grid/) without any magic of its own.

### Section

<!-- TODO: example -->

[Section](../layout/section.md) provides a consistent vertical spacing between the larger parts of your page content, creating a sense of hierarchy and separation. There's just a few pre-defined sizes for different spacing levels to keep things simple and consistent.

### Container

<!-- TODO: example -->

[Container]()'s sole responsibility is to provide a consistent `max-width` to the content it wraps. Like Section, it comes just with a couple of pre-defined sizes that work well with common breakpoints and typical content widths for comfortable reading.

## Common Layout Props

Each layout component has a set of it's own specialized props and also a shared set of common layout props. All layout props support [responsive values](../theme/breakpoints.md).

### Padding

TODO

### Width

TODO

### Height

TODO

### Positioning

TODO

### Flex Children

TODO

### Grid Children

TODO

## Margin Props

TODO

## See Also

-   [Radix documentation](https://www.radix-ui.com/themes/docs/overview/layout)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/radix/book/src/themes/overview/layout.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/LICENSE.md
MIT License

Copyright (c) 2024 Rust for Web

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
OR OTHER DEALINGS IN THE SOFTWARE.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/LICENSE.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/README.md
<p align="center">
    <a href="./logo.svg">
        <img src="./logo.svg" width="300" height="200" alt="Rust Lucide Logo">
    </a>
</p>

<h1 align="center">Rust Lucide</h1>

Rust port of [Lucide](https://lucide.dev/).

[Lucide](https://lucide.dev/) is a beautiful & consistent icon toolkit made by the community.

## Frameworks

Rust Lucide is available for these Rust frameworks:

- [Dioxus](https://dioxuslabs.com/)
- [Leptos](https://leptos.dev/)
- [Yew](https://yew.rs/)

See [the Rust Lucide book](https://lucide.rustforweb.org/introduction.html#frameworks) for more information.

## Documentation

See [the Rust Lucide book](https://lucide.rustforweb.org).

## Credits

The logo is a combination of the [Lucide logo](https://github.com/lucide-icons/lucide/blob/main/docs/public/logo-icon.svg) and [Ferris the Rustacean](https://rustacean.net/).

## License

This project is available under the [MIT license](LICENSE.md).

## Rust for Web

The Rust Lucide project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/packages/yew/README.md
<p align="center">
    <a href="../../logo.svg">
        <img src="../../logo.svg" width="300" height="200" alt="Rust Lucide Logo">
    </a>
</p>

<h1 align="center">Lucide Yew</h1>

Lucide is a beautiful & consistent icon toolkit made by the community.

[Rust Lucide](https://github.com/RustForWeb/lucide) is a Rust port of [Lucide](https://lucide.dev/).

## Documentation

See [the Rust Lucide book](https://lucide.rustforweb.org/) for documentation.

## Rust for Web

The Rust Lucide project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/packages/yew/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/packages/leptos/README.md
<p align="center">
    <a href="../../logo.svg">
        <img src="../../logo.svg" width="300" height="200" alt="Rust Lucide Logo">
    </a>
</p>

<h1 align="center">Lucide Leptos</h1>

Lucide is a beautiful & consistent icon toolkit made by the community.

[Rust Lucide](https://github.com/RustForWeb/lucide) is a Rust port of [Lucide](https://lucide.dev/).

## Documentation

See [the Rust Lucide book](https://lucide.rustforweb.org/) for documentation.

## Rust for Web

The Rust Lucide project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/packages/leptos/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/packages/dioxus/README.md
<p align="center">
    <a href="../../logo.svg">
        <img src="../../logo.svg" width="300" height="200" alt="Rust Lucide Logo">
    </a>
</p>

<h1 align="center">Lucide Dioxus</h1>

Lucide is a beautiful & consistent icon toolkit made by the community.

[Rust Lucide](https://github.com/RustForWeb/lucide) is a Rust port of [Lucide](https://lucide.dev/).

## Documentation

See [the Rust Lucide book](https://lucide.rustforweb.org/) for documentation.

## Rust for Web

The Rust Lucide project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/packages/dioxus/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/SUMMARY.md
# Summary

-   [Introduction](./introduction.md)
-   [Frameworks](./frameworks/README.md)
    -   [Dioxus](./frameworks/dioxus.md)
    -   [Leptos](./frameworks/leptos.md)
    -   [Yew](./frameworks/yew.md)
-   [Contributing]()

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/SUMMARY.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/introduction.md
<p align="center">
    <img src="./images/logo.svg" width="300" height="200" alt="Rust Lucide Logo">
</p>

# Introduction

Rust Lucide is a Rust port of [Lucide](https://lucide.dev/).

[Lucide](https://lucide.dev/) is a beautiful & consistent icon toolkit made by the community.

## Frameworks

Rust Lucide is available for the following frameworks:

- [Dioxus](https://dioxuslabs.com/)
- [Leptos](https://leptos.dev/)
- [Yew](https://yew.rs/)

## License

This project is available under the [MIT license](https://github.com/RustForWeb/lucide/blob/main/LICENSE.md).

## Rust for Web

The Rust Lucide project is part of [Rust for Web](https://github.com/RustForWeb).

[Rust for Web](https://github.com/RustForWeb) creates and ports web UI libraries for Rust. All projects are free and open source.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/introduction.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/frameworks/dioxus.md
# Lucide Dioxus

Implementation of the Lucide icon library for [Dioxus](https://dioxuslabs.com/) applications.

## Installation

```shell
# Selective categories (see https://lucide.dev/icons/categories)
cargo add lucide-dioxus --features accessibility,communication

# All categories
cargo add lucide-dioxus --features all-icons
```

- [View on crates.io](https://crates.io/crates/lucide-dioxus)
- [View on docs.rs](https://docs.rs/lucide-dioxus/latest/lucide_dioxus/)
- [View source](https://github.com/RustForWeb/lucide/tree/main/packages/dioxus)

## Usage

```rust,ignore
use dioxus::prelude::*;
use lucide_dioxus::Camera;

#[component]
fn App() -> Element {
    rsx! {
        Camera {
            color: "red",
            size: 48,
        }
    }
}
```

## Props

| Name                    | Type             | Default          |
| ----------------------- | ---------------- | ---------------- |
| `size`                  | `usize`          | `24`             |
| `color`                 | `String`         | `"currentColor"` |
| `fill`                  | `String`         | `"none"`         |
| `stroke_width`          | `usize`          | `2`              |
| `absolute_stroke_width` | `bool`           | `false`          |
| `class`                 | `Option<String>` | -                |
| `style`                 | `Option<String>` | -                |

## Icons

```toml,trunk
package = "lucide-dioxus-book"
features = ["icons"]
files = ["src/icons.rs"]
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/frameworks/dioxus.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/frameworks/README.md
# Frameworks

-   [Dioxus](./dioxus.md)
-   [Leptos](./leptos.md)
-   [Yew](./yew.md)

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/frameworks/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/frameworks/leptos.md
# Lucide Leptos

Implementation of the Lucide icon library for [Leptos](https://leptos.dev/) applications.

## Installation

Install the icons from your command line.

```shell
# Selective categories (see https://lucide.dev/icons/categories)
cargo add lucide-leptos --features accessibility,communication

# All categories
cargo add lucide-leptos --features all-icons
```

- [View on crates.io](https://crates.io/crates/lucide-leptos)
- [View on docs.rs](https://docs.rs/lucide-leptos/latest/lucide_leptos/)
- [View source](https://github.com/RustForWeb/lucide/tree/main/packages/leptos)

## Usage

```rust,ignore
use leptos::prelude::*;
use lucide_leptos::Camera;

#[component]
fn App() -> impl IntoView {
    view! {
        <Camera color="red" size=48 />
    }
}
```

## Props

| Name                    | Type             | Default          |
| ----------------------- | ---------------- | ---------------- |
| `size`                  | `Signal<usize>`  | `24`             |
| `color`                 | `Signal<String>` | `"currentColor"` |
| `fill`                  | `Signal<String>` | `"none"`         |
| `stroke_width`          | `Signal<usize>`  | `2`              |
| `absolute_stroke_width` | `Signal<bool>`   | `false`          |

## Icons

```toml,trunk
package = "lucide-leptos-book"
features = ["icons"]
files = ["src/icons.rs"]
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/frameworks/leptos.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/frameworks/yew.md
# Lucide Yew

Implementation of the Lucide icon library for [Yew](https://yew.rs/) applications.

## Installation

Install the icons from your command line.

```shell
# Selective categories (see https://lucide.dev/icons/categories)
cargo add lucide-yew --features accessibility,communication

# All categories
cargo add lucide-yew --features all-icons
```

- [View on crates.io](https://crates.io/crates/lucide-yew)
- [View on docs.rs](https://docs.rs/lucide-yew/latest/lucide_yew/)
- [View source](https://github.com/RustForWeb/lucide/tree/main/packages/yew)

## Usage

```rust,ignore
use lucide_yew::Camera;
use yew::prelude::*;

#[component]
fn App() -> Html {
    html! {
        <Camera color="red" size=48 />
    }
}
```

## Props

| Name                    | Type                | Default          |
| ----------------------- | ------------------- | ---------------- |
| `size`                  | `usize`             | `24`             |
| `color`                 | `AttrValue`         | `"currentColor"` |
| `fill`                  | `AttrValue`         | `"none"`         |
| `stroke_width`          | `usize`             | `2`              |
| `absolute_stroke_width` | `bool`              | `false`          |
| `class`                 | `Classes`           | -                |
| `style`                 | `Option<AttrValue>` | -                |

## Icons

```toml,trunk
package = "lucide-yew-book"
features = ["icons"]
files = ["src/icons.rs"]
```

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/lucide/book/src/frameworks/yew.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos-icons/README.md
# Leptos-Icons

[![Docs.rs](https://docs.rs/leptos_icons/badge.svg)](https://docs.rs/leptos_icons)
[![GitHub](https://img.shields.io/github/license/carloskiki/leptos-icons)](/LICENSE)

Add icons from popular icon libraries into your leptos projects.

Currently, you can use this [example](/examples/simple-app) as a guide, but better examples and docs are coming. An [index site](https://carloskiki.github.io/icondata/) is also available if you wish to filter through available icons.

## Leptos compatibility

| Crate version | Compatible Leptos version |
|---------------|---------------------------|
| 0.0.14        | 0.3                       |
| 0.0.15        | 0.4                       |
| 0.0.16-alpha  | 0.5.0-alpha               |
| 0.0.16-beta   | 0.5.0-beta2               |
| 0.0.16-rc3    | 0.5.0-rc3                 |
| 0.1           | 0.5                       |
| 0.2.1         | 0.5                       |
| 0.3.0 / 0.3.1 | 0.6                       |
| 0.4.0 / 0.5.0 | 0.7                       |
| 0.6.*         | 0.8                       |

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos-icons/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos-icons/examples/simple-app/README.md
# Simple Example

this example is a simple demonstration of how one would add an icon to his application.

to run it with [trunk](https://trunkrs.dev/) use `trunk serve --open` in the root of this example directory.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos-icons/examples/simple-app/README.md
-->start /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos-icons/.github/DOCS.md
# Github config and workflows

In this folder there is configuration for codecoverage, dependabot, and ci
workflows that check the library more deeply than the default configurations.

This folder can be or was merged using a --allow-unrelated-histories merge
strategy from <https://github.com/jonhoo/rust-ci-conf/> which provides a
reasonably sensible base for writing your own ci on. By using this strategy
the history of the CI repo is included in your repo, and future updates to
the CI can be merged later.

To perform this merge run:

```shell
git remote add ci https://github.com/jonhoo/rust-ci-conf.git
git fetch ci
git merge --allow-unrelated-histories ci/main
```

An overview of the files in this project is available at:
<https://www.youtube.com/watch?v=xUH-4y92jPg&t=491s>, which contains some
rationale for decisions and runs through an example of solving minimal version
and OpenSSL issues.

-->end /Users/qiuyeyijian/burong/leptos-shadcn/reference/leptos-icons/.github/DOCS.md
